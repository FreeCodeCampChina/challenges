{
  "name": "MongoDB and Mongoose",
  "order": 3,
  "time": "5 hours",
  "helpRoom": "Help",
  "challenges": [
    {
      "id": "587d7fb6367417b2b2512c06",
      "title": "Install and Set Up Mongoose",
      "description": [
        "在 package.json 文件中添加 MongoDB 和 Mongoose 依赖， 将 mLab 数据库的 URI 作为 MONGO_URI 变量存储在私有 .env 文件中。然后 <code>require('mongoose')</code>，使用 <code>mongoose.connect(<Your URI>)</code> 命令来连接数据库。"
      ],
      "tests": [
        {
          "text": "在 package.json 文件中应该有 \"mongodb\" 依赖",
          "testString": "getUserInput => $.get(getUserInput('url') + '/_api/file/package.json').then(data => { var packJson = JSON.parse(data);     assert.property(packJson.dependencies, 'mongodb'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "在 package.json 文件中应该有 \"mongoose\" 依赖",
          "testString": "getUserInput => $.get(getUserInput('url') + '/_api/file/package.json').then(data => { var packJson = JSON.parse(data);     assert.property(packJson.dependencies, 'mongoose'); }, xhr => { throw new Error(xhr.responseText); })"
        },
        {
          "text": "\"mongoose\" 应该已经连接数据库",
          "testString": "getUserInput => $.get(getUserInput('url') + '/_api/is-mongoose-ok').then(data => {assert.isTrue(data.isMongooseOk, 'mongoose is not connected')}, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "solutions": [],
      "hints": [],
      "challengeType": 2
    },
    {
      "id": "587d7fb6367417b2b2512c07",
      "title": "Create a Model",
      "description": [
        "First of all we need a Schema. Each schema maps to a MongoDB collection. It defines the shape of the documents within that collection.",
        "首先，我们需要一个 Schema，每一个 Schema 对应一个 MongoDB collection, 并且在那个 collection 里面定义 documents 的模型。",
        "Schemas 是 Models 的构建块。它们可以嵌套来创建复杂的模型，但是这里，我们只学习简单的用法。",
        "Model 可以被实例化，实例化后的对象称为 documents",
        "创建一个拥有以下 Prototype 的 Person 对象：",
        "<code>- Person Prototype -</code>",
        "<code>--------------------</code>",
        "<code>name : string [required]</code>",
        "<code>age :  number</code>",
        "<code>favoriteFoods : array of strings (*) </code>",
        "Use the mongoose basic schema types. If you want you can also add",
        "more fields, use simple validators like required or unique,",
        "and set default values. See the <a href='http://mongoosejs.com/docs/guide.html'>mongoose docs</a>.",
        "你可以使用 基础的 SchemaTypes 去添加更多的字段，比如使用 required 或者 unique 这样的简单验证去设置默认值. 参考 <a href='http://mongoosejs.com/docs/guide.html'>Mongoose 文档</a>.",
        "[C]RUD Part I - CREATE",
        "注意： Glitch 是一个真实的服务， 并且通过 handler 函数和 db 进行交互。 这些函数通过一些事件去触发(例如：有人从终端调用了你的 API)， 我们在这些练习中遵循同样的方法。 比如，我们在完成 nserting、 searching、 updating 或者 deleting 这样的异步操作后接着回调 <code>done()</code> 函数。 它遵循 Node 的惯例，需要在 success 时回调 <code>done(null, data)</code>， 在 error 时回调 <code>done(err)</code>。",
        "Warning - 当与远程服务器交互时可能发生错误！",
        "<code>/* Example */</code>",
        "<code>var someFunc = function(done) {</code>",
        "<code>  //... do something (risky) ...</code>",
        "<code>  if(error) return done(error);</code>",
        "<code>  done(null, result);</code>",
        "<code>};</code>"
      ],
      "tests": [
        {
          "text": "成功创建一个 Schema 实例",
          "testString": "getUserInput => $.post(getUserInput('url') + '/_api/mongoose-model', {name: 'Mike', age: 28, favoriteFoods: ['pizza', 'cheese']}).then(data => { assert.equal(data.name, 'Mike', '\"model.name\" is not what expected'); assert.equal(data.age, '28', '\"model.age\" is not what expected'); assert.isArray(data.favoriteFoods, '\"model.favoriteFoods\" is not an Array'); assert.include(data.favoriteFoods, 'pizza', '\"model.favoriteFoods\" does not include the expected items'); assert.include(data.favoriteFoods, 'cheese', '\"model.favoriteFoods\" does not include the expected items'); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "solutions": [],
      "hints": [],
      "challengeType": 2
    },
    {
      "id": "587d7fb6367417b2b2512c09",
      "title": "Create and Save a Record of a Model",
      "description": [
        "使用 Person 的 constructor(构造器) 函数可以创建一个 document 对象，该对象包含 <code>name</code>、 <code>age</code> 和 <code>favoriteFoods</code> 字段。 这些字段的类型必须符合 Person Schema 里面定义的类型。 然后调用 <code>document.save()</code>。 使用 Node 惯例传递 callback。通常情况下，所有的 CRUD(增查改删) 方法都会像下面一样作为最后一个参数去执行一个 <code>callback()</code>。",
        "<code>/* Example */</code>",
        "<code>// ...</code>",
        "<code>person.save(function(err, data) {</code>",
        "<code>//   ...do your stuff here...</code>",
        "<code>});</code>"
      ],
      "tests": [
        {
          "text": "成功创建一条 db 并保存",
          "testString": "getUserInput => $.get(getUserInput('url') + '/_api/create-and-save-person').then(data => { assert.isString(data.name, '\"item.name\" should be a String'); assert.isNumber(data.age, '28', '\"item.age\" should be a Number'); assert.isArray(data.favoriteFoods, '\"item.favoriteFoods\" should be an Array'); assert.equal(data.__v, 0, 'The db item should be not previously edited'); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "solutions": [],
      "hints": [],
      "challengeType": 2
    },
    {
      "id": "587d7fb7367417b2b2512c0a",
      "title": "Create Many Records with model.create()",
      "description": [
        "有时你需要创建很多的 model 实例。 例如：在使用初始数据为数据库初始化时， <code>Model.create()</code> 接受一组像 <code>[{name: 'John', ...}, {...}, ...]</code> 的数组作为第一个参数，并将其保存到数据库。使用 <code>arrayOfPeople</code> 作为 <code>Model.create()</code> 的参数创建很多个 people 实例。"
      ],
      "tests": [
        {
          "text": "Creating many db items at once should succeed",
          "testString": "getUserInput => $.ajax({url: getUserInput('url') + '/_api/create-many-people', type: 'POST', contentType:'application/json', data: JSON.stringify([{name: 'John', age: 24, favoriteFoods: ['pizza', 'salad']}, {name: 'Mary', age: 21, favoriteFoods: ['onions', 'chicken']}])}).then(data => { assert.isArray(data, 'the response should be an array'); assert.equal(data.length, 2, 'the response does not contain the expected number of items'); assert.equal(data[0].name, 'John', 'The first item is not correct'); assert.equal(data[0].__v, 0, 'The first item should be not previously edited'); assert.equal(data[1].name, 'Mary', 'The second item is not correct'); assert.equal(data[1].__v, 0, 'The second item should be not previously edited'); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "solutions": [],
      "hints": [],
      "challengeType": 2
    },
    {
      "id": "587d7fb7367417b2b2512c0b",
      "title": "Use model.find() to Search Your Database",
      "description": [
        "使用 <code>Model.find() -> [Person]</code> 来查询给定名称的所有的人。",
        "最简单的用法: <code>Model.find()</code> 接受一个查询的 document (一个 JSON 对象 ) 作为第一参数, 然后是回调。 它将返回匹配到的项目组成的数组。 这个支持极其广泛的搜索选项。 使用人名作为搜索的关键词， 来校验它。"
      ],
      "tests": [
        {
          "text": "成功找到所有符合条件的 item(项目)。",
          "testString": "getUserInput => $.post(getUserInput('url') + '/_api/find-all-by-name', {name: 'r@nd0mN4m3', age: 24, favoriteFoods: ['pizza']}).then(data => { assert.isArray(data, 'the response should be an Array');  assert.equal(data[0].name, 'r@nd0mN4m3', 'item.name is not what expected'); assert.equal(data[0].__v, 0, 'The item should be not previously edited'); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "solutions": [],
      "hints": [],
      "challengeType": 2
    },
    {
      "id": "587d7fb7367417b2b2512c0c",
      "title": "Use model.findOne() to Return a Single Matching Document from Your Database",
      "description": [
        "<code>Model.findOne()</code> 表现像 <code>Model.find()</code>， 但是它仅仅返回一个 document (而不是一个数组), 即使数据库里有很多条 item(项目)。 当你按声明成 <code>unique</code> 的属性进行搜索时，<code>Model.findOne()</code> 尤其有用。 把食物作为 <code>Model.findOne() -> Person</code> 的参数，来找到一个在她的爱好中有某一食物的人。"
      ],
      "tests": [
        {
          "text": "成功找到一个 item(项目)。",
          "testString": "getUserInput => $.post(getUserInput('url') + '/_api/find-one-by-food', {name: 'Gary', age: 46, favoriteFoods: ['chicken salad']}).then(data => { assert.equal(data.name, 'Gary', 'item.name is not what expected'); assert.deepEqual(data.favoriteFoods, ['chicken salad'], 'item.favoriteFoods is not what expected'); assert.equal(data.__v, 0, 'The item should be not previously edited'); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "solutions": [],
      "hints": [],
      "challengeType": 2
    },
    {
      "id": "587d7fb7367417b2b2512c0d",
      "title": "Use model.findById() to Search Your Database By _id",
      "description": [
        "当我们保存一个 document, MongoDB 自动添加 _id 字段， 并给该字段设置 unique(唯一) 属性。通过 _id 搜索是一个非常频繁的操作，所以 Mongose 为它提供了一个专门的方法。使用人物 Id 作为参数，执行 <code>Model.findById() -> Person</code>， 找到这个_id 对应的唯一的一个人。"
      ],
      "tests": [
        {
          "text": "通过 Id 成功找到对应的 item(项目)。",
          "testString": "getUserInput => $.get(getUserInput('url') + '/_api/find-by-id').then(data => { assert.equal(data.name, 'test', 'item.name is not what expected'); assert.equal(data.age, 0, 'item.age is not what expected'); assert.deepEqual(data.favoriteFoods, ['none'], 'item.favoriteFoods is not what expected'); assert.equal(data.__v, 0, 'The item should be not previously edited'); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "solutions": [],
      "hints": [],
      "challengeType": 2
    },
    {
      "id": "587d7fb8367417b2b2512c0e",
      "title": "Perform Classic Updates by Running Find, Edit, then Save",
      "description": [
        "In the good old days this was what you needed to do if you wanted to edit a document and be able to use it somehow e.g. sending it back in a server response. Mongoose has a dedicated updating method : Model.update(). It is binded to the low-level mongo driver. It can bulk edit many documents matching certain criteria, but it doesn’t send back the updated document, only a ‘status’ message. Furthermore it makes model validations difficult, because it just directly calls the mongo driver.",
        "Find a person by _id ( use any of the above methods ) with the parameter personId as search key. Add “hamburger” to the list of her favoriteFoods (you can use Array.push()). Then - inside the find callback - save() the updated Person.",
        "[*] Hint: This may be tricky if in your Schema you declared favoriteFoods as an Array, without specifying the type (i.e. [String]). In that casefavoriteFoods defaults to Mixed type, and you have to manually mark it as edited using document.markModified('edited-field'). (http://mongoosejs.com/docs/schematypes.html - #Mixed )"
      ],
      "tests": [
        {
          "text": "Find-edit-update an item should succeed",
          "testString": "getUserInput => $.post(getUserInput('url') + '/_api/find-edit-save', {name:'Poldo', age: 40, favoriteFoods:['spaghetti']}).then(data => { assert.equal(data.name, 'Poldo', 'item.name is not what expected'); assert.equal(data.age, 40, 'item.age is not what expected'); assert.deepEqual(data.favoriteFoods, ['spaghetti', 'hamburger'], 'item.favoriteFoods is not what expected'); assert.equal(data.__v, 1, 'The item should be previously edited'); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "solutions": [],
      "hints": [],
      "challengeType": 2
    },
    {
      "id": "587d7fb8367417b2b2512c0f",
      "title": "Perform New Updates on a Document Using model.findOneAndUpdate()",
      "description": [
        "Recent versions of mongoose have methods to simplify documents updating. Some more advanced features (i.e. pre/post hooks, validation) behave differently with this approach, so the Classic method is still useful in many situations. findByIdAndUpdate() can be used when searching by Id.",
        "Find a person by Name and set her age to 20. Use the function parameter personName as search key.",
        "Hint: We want you to return the updated document. To do that you need to pass the options document { new: true } as the 3rd argument to findOneAndUpdate(). By default these methods return the unmodified object."
      ],
      "tests": [
        {
          "text": "findOneAndUpdate an item should succeed",
          "testString": "getUserInput => $.post(getUserInput('url') + '/_api/find-one-update', {name:'Dorian Gray', age: 35, favoriteFoods:['unknown']}).then(data => { assert.equal(data.name, 'Dorian Gray', 'item.name is not what expected'); assert.equal(data.age, 20, 'item.age is not what expected'); assert.deepEqual(data.favoriteFoods, ['unknown'], 'item.favoriteFoods is not what expected'); assert.equal(data.__v, 0, 'findOneAndUpdate does not increment version by design !!!'); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "solutions": [],
      "hints": [],
      "challengeType": 2
    },
    {
      "id": "587d7fb8367417b2b2512c10",
      "title": "Delete One Document Using model.findByIdAndRemove",
      "description": [
        "Delete one person by her _id. You should use one of the methods findByIdAndRemove() or findOneAndRemove(). They are like the previous update methods. They pass the removed document to the cb. As usual, use the function argument personId as search key."
      ],
      "tests": [
        {
          "text": "Deleting an item should succeed",
          "testString": "getUserInput => $.post(getUserInput('url') + '/_api/remove-one-person', {name:'Jason Bourne', age: 36, favoriteFoods:['apples']}).then(data => { assert.equal(data.name, 'Jason Bourne', 'item.name is not what expected'); assert.equal(data.age, 36, 'item.age is not what expected'); assert.deepEqual(data.favoriteFoods, ['apples'], 'item.favoriteFoods is not what expected'); assert.equal(data.__v, 0); assert.equal(data.count, 0, 'the db items count is not what expected'); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "solutions": [],
      "hints": [],
      "challengeType": 2
    },
    {
      "id": "587d7fb8367417b2b2512c11",
      "title": "Delete Many Documents with model.remove()",
      "description": [
        "Model.remove() is useful to delete all the documents matching given criteria. Delete all the people whose name is “Mary”, using Model.remove(). Pass to it a query ducument with the “name” field set, and of course a callback.",
        "Note: Model.remove() doesn’t return the deleted document, but a JSON object containing the outcome of the operation, and the number of items affected. Don’t forget to pass it to the done() callback, since we use it in tests."
      ],
      "tests": [
        {
          "text": "Deleting many items at once should succeed",
          "testString": "getUserInput => $.ajax({url: getUserInput('url') + '/_api/remove-many-people', type: 'POST', contentType:'application/json', data: JSON.stringify([{name: 'Mary', age: 16, favoriteFoods: ['lollipop']}, {name: 'Mary', age: 21, favoriteFoods: ['steak']}])}).then(data => { assert.isTrue(!!data.ok, 'The mongo stats are not what expected'); assert.equal(data.n, 2, 'The number of items affected is not what expected'); assert.equal(data.count, 0, 'the db items count is not what expected'); }, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "solutions": [],
      "hints": [],
      "challengeType": 2
    },
    {
      "id": "587d7fb9367417b2b2512c12",
      "title": "Chain Search Query Helpers to Narrow Search Results",
      "description": [
        "If you don’t pass the callback as the last argument to Model.find() (or to the other search methods), the query is not executed. You can store the query in a variable for later use. This kind of object enables you to build up a query using chaining syntax. The actual db search is executed when you finally chain the method .exec(). Pass your callback to this last method. There are many query helpers, here we’ll use the most ‘famous’ ones.",
        "Find people who like \"burrito\". Sort them by name, limit the results to two documents, and hide their age. Chain .find(), .sort(), .limit(), .select(), and then .exec(). Pass the done(err, data) callback to exec()."
      ],
      "tests": [
        {
          "text": "Chaining query helpers should succeed",
          "testString": "getUserInput => $.ajax({url: getUserInput('url') + '/_api/query-tools', type: 'POST', contentType:'application/json', data: JSON.stringify([{name: 'Pablo', age: 26, favoriteFoods: ['burrito', 'hot-dog']}, {name: 'Ashley', age: 32, favoriteFoods: ['steak', 'burrito']}, {name: 'Mario', age: 51, favoriteFoods: ['burrito', 'prosciutto']} ]) }).then(data => { assert.isArray(data, 'the response should be an Array'); assert.equal(data.length, 2, 'the data array length is not what expected'); assert.notProperty(data[0], 'age', 'The returned first item has too many properties'); assert.equal(data[0].name, 'Ashley', 'The returned first item name is not what expected'); assert.notProperty(data[1], 'age', 'The returned second item has too many properties'); assert.equal(data[1].name, 'Mario', 'The returned second item name is not what expected');}, xhr => { throw new Error(xhr.responseText); })"
        }
      ],
      "solutions": [],
      "hints": [],
      "challengeType": 2
    }
  ]
}