{
    "name": "CSS Grid",
    "order": 6,
    "time": "5 hours",
    "helpRoom": "Help",
    "challenges": [
      {
        "id": "5a858944d96184f06fd60d61",
        "title": "Create Your First CSS Grid",
        "description": [
          "通过将属性<code>display</code>的值设为<code>grid</code>，使 HTML 元素变为网格容器。通过前面的操作，你可以对该容器使用与 CSS 网格（CSS Grid）相关的属性。",
          "<strong>注意：</strong><br>在 CSS 网格中，父元素称为<dfn>容器（container）</dfn>，它的子元素称为<dfn>项（items）</dfn>。",
          "<hr>",
          "将类为<code>container</code>的 div 的<code>display</code>属性改为<code>grid</code>。"
        ],
        "tests": [
          {
            "text": "<code>container</code>类应该有<code>display</code>属性且值为<code>grid</code>。",
            "testString": "assert(code.match(/.container\\s*?{[\\s\\S]*display\\s*?:\\s*?grid\\s*?;[\\s\\S]*}/gi), '<code>container</code>类应该有<code>display</code>属性且值为<code>grid</code>。');"
          }
        ],
        "solutions": [],
        "hints": [],
        "releasedOn": "Feb 15, 2018",
        "challengeType": 0,
        "files": {
          "indexhtml": {
            "key": "indexhtml",
            "ext": "html",
            "name": "index",
            "contents": [
              "<style>",
              "  .d1{background:LightSkyBlue;}",
              "  .d2{background:LightSalmon;}",
              "  .d3{background:PaleTurquoise;}",
              "  .d4{background:LightPink;}",
              "  .d5{background:PaleGreen;}",
              "  ",
              "  .container {",
              "    font-size: 40px;",
              "    width: 100%;",
              "    background: LightGray;",
              "    /* 请在本行以下添加你的代码 */",
              "    ",
              "    ",
              "    /* 请在本行以上添加你的代码 */",
              "  }",
              "</style>",
              "  ",
              "<div class=\"container\">",
              "  <div class=\"d1\">1</div>",
              "  <div class=\"d2\">2</div>",
              "  <div class=\"d3\">3</div>",
              "  <div class=\"d4\">4</div>",
              "  <div class=\"d5\">5</div>",
              "</div>"
            ],
            "head": [],
            "tail": []
          }
        }
      },
      {
        "id": "5a9036d038fddaf9a66b5d32",
        "title": "Add Columns with grid-template-columns",
        "description": [
          "简单地添加一个网格元素并不能取得很大的进展。你还需要明确网格的结构。在一个网格容器中使用<code>grid-template-columns</code>属性可以添加一些列，示例如下：",
          "<blockquote>.container {<br>&nbsp;&nbsp;display: grid;<br>&nbsp;&nbsp;grid-template-columns: 50px 50px;<br>}</blockquote>",
          "上面的代码可以在网格容器中添加两列，宽度均为 50px。",
          "<code>grid-template-columns</code>属性值的个数表示网格的列数，而每个值表示对应列的宽度。",
          "<hr>",
          "给网格容器放置三个列，每列宽度均为<code>100px</code>。"
        ],
        "tests": [
          {
            "text": "<code>container</code>类应该有<code>grid-template-columns</code>属性且有三个<code>100px</code>作为值。",
            "testString": "assert(code.match(/.container\\s*?{[\\s\\S]*grid-template-columns\\s*?:\\s*?100px\\s*?100px\\s*?100px\\s*?;[\\s\\S]*}/gi), '<code>container</code>类应该有<code>grid-template-columns</code>属性且有三个<code>100px</code>作为值。');"
          }
        ],
        "solutions": [],
        "hints": [],
        "releasedOn": "Feb 15, 2018",
        "challengeType": 0,
        "files": {
          "indexhtml": {
            "key": "indexhtml",
            "ext": "html",
            "name": "index",
            "contents": [
              "<style>",
              "  .d1{background:LightSkyBlue;}",
              "  .d2{background:LightSalmon;}",
              "  .d3{background:PaleTurquoise;}",
              "  .d4{background:LightPink;}",
              "  .d5{background:PaleGreen;}",
              "  ",
              "  .container {",
              "    font-size: 40px;",
              "    width: 100%;",
              "    background: LightGray;",
              "    display: grid;",
              "    /* 请在本行以下添加你的代码 */",
              "    ",
              "    ",
              "    /* 请在本行以上添加你的代码 */",
              "  }",
              "</style>",
              "  ",
              "<div class=\"container\">",
              "  <div class=\"d1\">1</div>",
              "  <div class=\"d2\">2</div>",
              "  <div class=\"d3\">3</div>",
              "  <div class=\"d4\">4</div>",
              "  <div class=\"d5\">5</div>",
              "</div>"
            ],
            "head": [],
            "tail": []
          }
        }
      },
      {
        "id": "5a9036e138fddaf9a66b5d33",
        "title": "Add Rows with grid-template-rows",
        "description": [
          "在上次挑战中，你创建的网格会自动设置行数。你可以像用<code>grid-template-columns</code>设置网格的列一样，用<code>grid-template-rows</code>为网格设置行数。",
          "<hr>",
          "给网格添加两行，使每行高度均为<code>50px</code>。"
        ],
        "tests": [
          {
            "text": "<code>container</code>类应该有<code>grid-template-rows</code>属性，且值为两个<code>50px</code>。",
            "testString": "assert(code.match(/.container\\s*?{[\\s\\S]*grid-template-rows\\s*?:\\s*?50px\\s*?50px\\s*?;[\\s\\S]*}/gi), '<code>container</code>类应该有<code>grid-template-rows</code>属性，且值为两个<code>50px</code>。');"
          }
        ],
        "solutions": [],
        "hints": [],
        "releasedOn": "",
        "challengeType": 0,
        "files": {
          "indexhtml": {
            "key": "indexhtml",
            "ext": "html",
            "name": "index",
            "contents": [
              "<style>",
              "  .d1{background:LightSkyBlue;}",
              "  .d2{background:LightSalmon;}",
              "  .d3{background:PaleTurquoise;}",
              "  .d4{background:LightPink;}",
              "  .d5{background:PaleGreen;}",
              "  ",
              "  .container {",
              "    font-size: 40px;",
              "    width: 100%;",
              "    background: LightGray;",
              "    display: grid;",
              "    grid-template-columns: 100px 100px 100px;",
              "    /* 请在本行以下添加你的代码 */",
              "    ",
              "    ",
              "    /* 请在本行以上添加你的代码 */",
              "  }",
              "</style>",
              "  ",
              "<div class=\"container\">",
              "  <div class=\"d1\">1</div>",
              "  <div class=\"d2\">2</div>",
              "  <div class=\"d3\">3</div>",
              "  <div class=\"d4\">4</div>",
              "  <div class=\"d5\">5</div>",
              "</div>"
            ],
            "head": [],
            "tail": []
          }
        }
      },
      {
        "id": "5a9036ee38fddaf9a66b5d34",
        "title": "Use CSS Grid units to Change the Size of Columns and Rows",
        "description": [
          "在 CSS 网格中，可以使用绝对定位和相对定位单位如<code>px</code>和<code>em</code>来确定行或列的大小。下面的单位也可以使用：",
          "<code>fr</code>：设置列或行占剩余空间的一个比例，",
          "<code>auto</code>：设置列宽或行高自动等于它的内容的宽度或高度，",
          "<code>%</code>：将列或行调整为它的容器宽度或高度的百分比，",
          "最右侧的预览区中的效果通过下面的代码实现：",
          "<blockquote>grid-template-columns: auto 50px 10% 2fr 1fr;</blockquote>",
          "这段代添加了五个列。第一列的宽与它的内容宽度相等；第二列宽 50px；第三列宽是它容器的 10%；最后两列，将剩余的宽度平均分成三份，第四列占两份，第五列占一份。",
          "<hr>",
          "生成一个包含三列的网格，每列宽度分别为：1fr，100px，和 2fr。"
        ],
        "tests": [
          {
            "text": "<code>container</code>类应该有<code>grid-template-columns</code>属性，且生成宽为<code>1fr, 100px</code>和<code>2fr</code>的三列。",
            "testString": "assert(code.match(/.container\\s*?{[\\s\\S]*grid-template-columns\\s*?:\\s*?1fr\\s*?100px\\s*?2fr\\s*?;[\\s\\S]*}/gi), '<code>container</code>类应该有<code>grid-template-columns</code>属性，且生成宽为<code>1fr, 100px</code>和<code>2fr</code>的三列。');"
          }
        ],
        "solutions": [],
        "hints": [],
        "releasedOn": "",
        "challengeType": 0,
        "files": {
          "indexhtml": {
            "key": "indexhtml",
            "ext": "html",
            "name": "index",
            "contents": [
              "<style>",
              "  .d1{background:LightSkyBlue;}",
              "  .d2{background:LightSalmon;}",
              "  .d3{background:PaleTurquoise;}",
              "  .d4{background:LightPink;}",
              "  .d5{background:PaleGreen;}",
              "  ",
              "  .container {",
              "    font-size: 40px;",
              "    width: 100%;",
              "    background: LightGray;",
              "    display: grid;",
              "    /* 请修改本行以下的代码 */",
              "    ",
              "    grid-template-columns: auto 50px 10% 2fr 1fr;",
              "    ",
              "    /* 请修改本行以上的代码 */",
              "    grid-template-rows: 50px 50px;",
              "  }",
              "</style>",
              "  ",
              "<div class=\"container\">",
              "  <div class=\"d1\">1</div>",
              "  <div class=\"d2\">2</div>",
              "  <div class=\"d3\">3</div>",
              "  <div class=\"d4\">4</div>",
              "  <div class=\"d5\">5</div>",
              "</div>"
            ],
            "head": [],
            "tail": []
          }
        }
      },
      {
        "id": "5a9036ee38fddaf9a66b5d35",
        "title": "Create a Column Gap Using grid-column-gap",
        "description": [
          "到目前为止，在你所建立的网格中列都相互紧挨着。如果需要在列与列之间添加一些间隙，我们可以使用<code>grid-column-gap</code>：",
          "<blockquote>grid-column-gap: 10px;</blockquote>",
          "这会在我们创建的所有列之间添加 10px 的空白间隙。",
          "<hr>",
          "为网格中的列添加宽度为<code>20px</code>的间隙。"
        ],
        "tests": [
          {
            "text": "<code>container</code>类应该有<code>grid-column-gap</code>属性且值为<code>20px</code>。",
            "testString": "assert(code.match(/.container\\s*?{[\\s\\S]*grid-column-gap\\s*?:\\s*?20px\\s*?;[\\s\\S]*}/gi), '<code>container</code>类应该有<code>grid-column-gap</code>属性且值为<code>20px</code>。');"
          }
        ],
        "solutions": [],
        "hints": [],
        "releasedOn": "",
        "challengeType": 0,
        "files": {
          "indexhtml": {
            "key": "indexhtml",
            "ext": "html",
            "name": "index",
            "contents": [
              "<style>",
              "  .d1{background:LightSkyBlue;}",
              "  .d2{background:LightSalmon;}",
              "  .d3{background:PaleTurquoise;}",
              "  .d4{background:LightPink;}",
              "  .d5{background:PaleGreen;}",
              "  ",
              "  .container {",
              "    font-size: 40px;",
              "    min-height: 300px;",
              "    width: 100%;",
              "    background: LightGray;",
              "    display: grid;",
              "    grid-template-columns: 1fr 1fr 1fr;",
              "    grid-template-rows: 1fr 1fr 1fr;",
              "    /* 请在本行以下添加你的代码 */",
              "    ",
              "    ",
              "    /* 请在本行以上添加你的代码 */",
              "  }",
              "</style>",
              "  ",
              "<div class=\"container\">",
              "  <div class=\"d1\">1</div>",
              "  <div class=\"d2\">2</div>",
              "  <div class=\"d3\">3</div>",
              "  <div class=\"d4\">4</div>",
              "  <div class=\"d5\">5</div>",
              "</div>"
            ],
            "head": [],
            "tail": []
          }
        }
      },
      {
        "id": "5a9036ee38fddaf9a66b5d36",
        "title": "Create a Row Gap using grid-row-gap",
        "description": [
          "和上个挑战在两列之间添加间隙一样，你可以用<code>grid-row-gap</code>在两行之间添加间隙。",
          "<hr>",
          "为网格中的行添加高度为<code>5px</code>的间隙。"
        ],
        "tests": [
          {
            "text": "<code>container</code>类应该有<code>grid-row-gap</code>属性且值为<code>5px</code>。",
            "testString": "assert(code.match(/.container\\s*?{[\\s\\S]*grid-row-gap\\s*?:\\s*?5px\\s*?;[\\s\\S]*}/gi), '<code>container</code>类应该有<code>grid-row-gap</code>属性且值为<code>5px</code>。');"
          }
        ],
        "solutions": [],
        "hints": [],
        "releasedOn": "",
        "challengeType": 0,
        "files": {
          "indexhtml": {
            "key": "indexhtml",
            "ext": "html",
            "name": "index",
            "contents": [
              "<style>",
              "  .d1{background:LightSkyBlue;}",
              "  .d2{background:LightSalmon;}",
              "  .d3{background:PaleTurquoise;}",
              "  .d4{background:LightPink;}",
              "  .d5{background:PaleGreen;}",
              "  ",
              "  .container {",
              "    font-size: 40px;",
              "    min-height: 300px;",
              "    width: 100%;",
              "    background: LightGray;",
              "    display: grid;",
              "    grid-template-columns: 1fr 1fr 1fr;",
              "    grid-template-rows: 1fr 1fr 1fr;",
              "    /* 请在本行以下添加你的代码 */",
              "    ",
              "    ",
              "    /* 请在本行以上添加你的代码 */",
              "  }",
              "</style>",
              "  ",
              "<div class=\"container\">",
              "  <div class=\"d1\">1</div>",
              "  <div class=\"d2\">2</div>",
              "  <div class=\"d3\">3</div>",
              "  <div class=\"d4\">4</div>",
              "  <div class=\"d5\">5</div>",
              "</div>"
            ],
            "head": [],
            "tail": []
          }
        }
      },
      {
        "id": "5a9036ee38fddaf9a66b5d37",
        "title": "Add Gaps Faster with grid-gap",
        "description": [
          "<code>grid-gap</code>是<code>grid-row-gap</code>和<code>grid-column-gap</code>的简写，它更方便使用。如果<code>grid-gap</code>有一个值，行与行之间和列与列之间将添加等于该值的间隙。但是，如果有两个值，第一个值将作为行间隙的高度值，第二个值是列间隙的宽度值。",
          "<hr>",
          "使用<code>grid-gap</code>在行之间添加<code>10px</code>的间隙，在列之间添加<code>20px</code>的间隙。"
        ],
        "tests": [
          {
            "text": "<code>container</code>类应该有<code>grid-gap</code>属性，在行之间引入<code>10px</code>的间隙，在列之间引入<code>20px</code>的间隙。",
            "testString": "assert(code.match(/.container\\s*?{[\\s\\S]*grid-gap\\s*?:\\s*?10px\\s*?20px\\s*?;[\\s\\S]*}/gi), '<code>container</code>类应该有<code>grid-gap</code>属性，在行之间引入<code>10px</code>的间隙，在列之间引入<code>20px</code>的间隙。');"
          }
        ],
        "solutions": [],
        "hints": [],
        "releasedOn": "",
        "challengeType": 0,
        "files": {
          "indexhtml": {
            "key": "indexhtml",
            "ext": "html",
            "name": "index",
            "contents": [
              "<style>",
              "  .d1{background:LightSkyBlue;}",
              "  .d2{background:LightSalmon;}",
              "  .d3{background:PaleTurquoise;}",
              "  .d4{background:LightPink;}",
              "  .d5{background:PaleGreen;}",
              "  ",
              "  .container {",
              "    font-size: 40px;",
              "    min-height: 300px;",
              "    width: 100%;",
              "    background: LightGray;",
              "    display: grid;",
              "    grid-template-columns: 1fr 1fr 1fr;",
              "    grid-template-rows: 1fr 1fr 1fr;",
              "    /* 请在本行以下添加你的代码 */",
              "    ",
              "    ",
              "    /* 请在本行以上添加你的代码 */",
              "  }",
              "</style>",
              "<div class=\"container\">",
              "  <div class=\"d1\">1</div>",
              "  <div class=\"d2\">2</div>",
              "  <div class=\"d3\">3</div>",
              "  <div class=\"d4\">4</div>",
              "  <div class=\"d5\">5</div>",
              "</div>"
            ],
            "head": [],
            "tail": []
          }
        }
      },
      {
        "id": "5a90372638fddaf9a66b5d38",
        "title": "Use grid-column to Control Spacing",
        "description": [
          "到目前为止，所有的讨论都是围绕网格容器的。<code>grid-column</code>属性是第一个用于网格项本身的属性。",
          "网格的假想水平线和垂直线被称为<dfn>线（lines）</dfn>。这些线在网格的左上角从 1 开始编号，垂直线向右、水平线向下累加计数。",
          "这是一个 3x3 网格的线条：",
          "<div style=\"position:relative;margin:auto;background:Gainsboro;display:block;margin-top:100px;margin-bottom:50px;width:200px;height:200px;\"><p style=\"left:25%;top:-30%;font-size:130%;position:absolute;color:RoyalBlue;\">column lines</p><p style=\"left:0%;top:-15%;font-size:130%;position:absolute;color:RoyalBlue;\">1</p><p style=\"left:30%;top:-15%;font-size:130%;position:absolute;color:RoyalBlue;\">2</p><p style=\"left:63%;top:-15%;font-size:130%;position:absolute;color:RoyalBlue;\">3</p><p style=\"left:95%;top:-15%;font-size:130%;position:absolute;color:RoyalBlue;\">4</p><p style=\"left:-40%;top:45%;font-size:130%;transform:rotateZ(-90deg);position:absolute;\">row lines</p><p style=\"left:-10%;top:-10%;font-size:130%;position:absolute;\">1</p><p style=\"left:-10%;top:21%;font-size:130%;position:absolute;\">2</p><p style=\"left:-10%;top:53%;font-size:130%;position:absolute;\">3</p><p style=\"left:-10%;top:85%;font-size:130%;position:absolute;\">4</p><div style=\"left:0%;top:0%;width:5%;height:100%;background:RoyalBlue;position:absolute;\"></div><div style=\"left:31%;top:0%;width:5%;height:100%;background:RoyalBlue;position:absolute;\"></div><div style=\"left:63%;top:0%;width:5%;height:100%;background:RoyalBlue;position:absolute;\"></div><div style=\"left:95%;top:0%;width:5%;height:100%;background:RoyalBlue;position:absolute;\"></div><div style=\"left:0%;top:0%;width:100%;height:5%;background:black;position:absolute;\"></div><div style=\"left:0%;top:31%;width:100%;height:5%;background:black;position:absolute;\"></div><div style=\"left:0%;top:63%;width:100%;height:5%;background:black;position:absolute;\"></div><div style=\"left:0%;top:95%;width:100%;height:5%;background:black;position:absolute;\"></div></div>",
          "你可以用<code>grid-column</code>属性定义网格项开始和结束的位置，进而控制每个网格项占用的列数。",
          "示例如下：",
          "<blockquote>grid-column: 1 / 3;</blockquote>",
          "这会让网格项从左侧第一条线开始到第三条线结束，占用两列。",
          "<hr>",
          "使类为<code>item5</code>的网格项占用网格的最后两列。"
        ],
        "tests": [
          {
            "text": "<code>item5</code>类应该有<code>grid-column</code>属性且其值为<code>2 / 4</code>。",
            "testString": "assert(code.match(/.item5\\s*?{[\\s\\S]*grid-column\\s*?:\\s*?2\\s*?\\/\\s*?4\\s*?;[\\s\\S]*}/gi), '<code>item5</code>类应该有<code>grid-column</code>属性且其值为<code>2 / 4</code>。');"
          }
        ],
        "solutions": [],
        "hints": [],
        "releasedOn": "",
        "challengeType": 0,
        "files": {
          "indexhtml": {
            "key": "indexhtml",
            "ext": "html",
            "name": "index",
            "contents": [
              "<style>",
              "  .item1{background:LightSkyBlue;}",
              "  .item2{background:LightSalmon;}",
              "  .item3{background:PaleTurquoise;}",
              "  .item4{background:LightPink;}",
              "  ",
              "  .item5 {",
              "    background: PaleGreen;",
              "    /* 请在本行以下添加你的代码 */",
              "    ",
              "    ",
              "    /* 请在本行以上添加你的代码 */",
              "  }",
              "  ",
              "  .container {",
              "    font-size: 40px;",
              "    min-height: 300px;",
              "    width: 100%;",
              "    background: LightGray;",
              "    display: grid;",
              "    grid-template-columns: 1fr 1fr 1fr;",
              "    grid-template-rows: 1fr 1fr 1fr;",
              "    grid-gap: 10px;",
              "  }",
              "</style>",
              "  ",
              "<div class=\"container\">",
              "  <div class=\"item1\">1</div>",
              "  <div class=\"item2\">2</div>",
              "  <div class=\"item3\">3</div>",
              "  <div class=\"item4\">4</div>",
              "  <div class=\"item5\">5</div>",
              "</div>"
            ],
            "head": [],
            "tail": []
          }
        }
      },
      {
        "id": "5a90373638fddaf9a66b5d39",
        "title": "Use grid-row to Control Spacing",
        "description": [
          "当然，你可以像列一样使网格项跨越多行。对于一个网格项，你可以用<code>grid-row</code>属性来确定开始和结束的水平线。",
          "<hr>",
          "使类为<code>item5</code>的元素占用最后两行。"
        ],
        "tests": [
          {
            "text": "<code>item5</code>类应该有<code>grid-row</code>属性且值为<code>2 / 4</code>。",
            "testString": "assert(code.match(/.item5\\s*?{[\\s\\S]*grid-row\\s*?:\\s*?2\\s*?\\/\\s*?4\\s*?;[\\s\\S]*}/gi), '<code>item5</code>类应该有<code>grid-row</code>属性且值为<code>2 / 4</code>。');"
          }
        ],
        "solutions": [],
        "hints": [],
        "releasedOn": "",
        "challengeType": 0,
        "files": {
          "indexhtml": {
            "key": "indexhtml",
            "ext": "html",
            "name": "index",
            "contents": [
              "<style>",
              "  .item1{background:LightSkyBlue;}",
              "  .item2{background:LightSalmon;}",
              "  .item3{background:PaleTurquoise;}",
              "  .item4{background:LightPink;}",
              "  ",
              "  .item5 {",
              "    background: PaleGreen;",
              "    grid-column: 2 / 4;",
              "    /* 请在本行以下添加你的代码 */",
              "    ",
              "    ",
              "    /* 请在本行以上添加你的代码 */",
              "  }",
              "  ",
              "  .container {",
              "    font-size: 40px;",
              "    min-height: 300px;",
              "    width: 100%;",
              "    background: LightGray;",
              "    display: grid;",
              "    grid-template-columns: 1fr 1fr 1fr;",
              "    grid-template-rows: 1fr 1fr 1fr;",
              "    grid-gap: 10px;",
              "  }",
              "</style>",
              "  ",
              "<div class=\"container\">",
              "  <div class=\"item1\">1</div>",
              "  <div class=\"item2\">2</div>",
              "  <div class=\"item3\">3</div>",
              "  <div class=\"item4\">4</div>",
              "  <div class=\"item5\">5</div>",
              "</div>"
            ],
            "head": [],
            "tail": []
          }
        }
      },
      {
        "id": "5a90374338fddaf9a66b5d3a",
        "title": "Align an Item Horizontally using justify-self",
        "description": [
          "在 CSS 网格中，每个网格项的内容分别位于被称为<dfn>单元格（cell）</dfn>的框内。你可以使用网格项的<code>justify-self</code>属性，设置其内容的位置在单元格内沿行轴对齐的方式。默认情况下，这个属性的值是<code>stretch</code>，这将使内容占满整个单元格的宽度。该 CSS 网格属性也可以使用其他的值：",
          "<code>start</code>：使内容在单元格左侧对齐，",
          "<code>center</code>：使内容在单元格居中对齐，",
          "<code>end</code>：使内容在单元格右侧对齐，",
          "<hr>",
          "使用<code>justify-self</code>属性让类为<code>item2</code>的网格项居中。"
        ],
        "tests": [
          {
            "text": "<code>item2</code>类应该有<code>justify-self</code>属性且值为<code>center</code>。",
            "testString": "assert(code.match(/.item2\\s*?{[\\s\\S]*justify-self\\s*?:\\s*?center\\s*?;[\\s\\S]*}/gi), '<code>item2</code>类应该有<code>justify-self</code>属性且值为<code>center</code>。');"
          }
        ],
        "solutions": [],
        "hints": [],
        "releasedOn": "",
        "challengeType": 0,
        "files": {
          "indexhtml": {
            "key": "indexhtml",
            "ext": "html",
            "name": "index",
            "contents": [
              "<style>",
              "  .item1{background: LightSkyBlue;}",
              "  ",
              "  .item2 {",
              "    background: LightSalmon;",
              "    /* 请在本行以下添加你的代码 */",
              "    ",
              "    ",
              "    /* 请在本行以上添加你的代码 */",
              "  }",
              "  ",
              "  .item3{background:PaleTurquoise;}",
              "  .item4{background:LightPink;}",
              "  .item5{background:PaleGreen;}",
              "  ",
              "  .container {",
              "    font-size: 40px;",
              "    min-height: 300px;",
              "    width: 100%;",
              "    background: LightGray;",
              "    display: grid;",
              "    grid-template-columns: 1fr 1fr 1fr;",
              "    grid-template-rows: 1fr 1fr 1fr;",
              "    grid-gap: 10px;",
              "  }",
              "</style>",
              "  ",
              "<div class=\"container\">",
              "  <div class=\"item1\">1</div>",
              "  <div class=\"item2\">2</div>",
              "  <div class=\"item3\">3</div>",
              "  <div class=\"item4\">4</div>",
              "  <div class=\"item5\">5</div>",
              "</div>"
            ],
            "head": [],
            "tail": []
          }
        }
      },
      {
        "id": "5a90375238fddaf9a66b5d3b",
        "title": "Align an Item Vertically using align-self",
        "description": [
          "正如能设置网格项沿行轴对齐方式一样，也可以设置网格项沿列轴对齐方式：你可以对网格项使用<code>align-self</code>属性。对于该属性，你能使用在上一个挑战中可用于<code>justify-self</code>属性的任一个值。",
          "<hr>",
          "用值<code>end</code>使类为<code>item3</code>的网格项底端对齐。"
        ],
        "tests": [
          {
            "text": "<code>item3</code>类应该有<code>align-self</code>属性且值为<code>end</code>。",
            "testString": "assert(code.match(/.item3\\s*?{[\\s\\S]*align-self\\s*?:\\s*?end\\s*?;[\\s\\S]*}/gi), '<code>item3</code>类应该有<code>align-self</code>属性且值为<code>end</code>。');"
          }
        ],
        "solutions": [],
        "hints": [],
        "releasedOn": "",
        "challengeType": 0,
        "files": {
          "indexhtml": {
            "key": "indexhtml",
            "ext": "html",
            "name": "index",
            "contents": [
              "<style>",
              "  .item1{background:LightSkyBlue;}",
              "  .item2{background:LightSalmon;}",
              "  ",
              "  .item3 {",
              "    background: PaleTurquoise;",
              "    /* 请在本行以下添加你的代码 */",
              "    ",
              "    ",
              "    /* 请在本行以上添加你的代码 */",
              "  }",
              "  ",
              "  .item4{background:LightPink;}",
              "  .item5{background:PaleGreen;}",
              "  ",
              "  .container {",
              "    font-size: 40px;",
              "    min-height: 300px;",
              "    width: 100%;",
              "    background: LightGray;",
              "    display: grid;",
              "    grid-template-columns: 1fr 1fr 1fr;",
              "    grid-template-rows: 1fr 1fr 1fr;",
              "    grid-gap: 10px;",
              "  }",
              "</style>",
              "  ",
              "<div class=\"container\">",
              "  <div class=\"item1\">1</div>",
              "  <div class=\"item2\">2</div>",
              "  <div class=\"item3\">3</div>",
              "  <div class=\"item4\">4</div>",
              "  <div class=\"item5\">5</div>",
              "</div>"
            ],
            "head": [],
            "tail": []
          }
        }
      },
      {
        "id": "5a90376038fddaf9a66b5d3c",
        "title": "Align All Items Horizontally using justify-items",
        "description": [
          "有时你想让在 CSS 网格中的网格项共享对齐方式。你可以像之前学习的那样单独使他们对齐，也可以对网格容器使用<code>justify-items</code>使它们一次性沿行轴对齐。对于这个属性你能使用在之前的两个挑战中学到的所有值，与之前不同的是，它将使网格中<b>所有</b>的网格项按所设置的方式对齐。",
          "<hr>",
          "使用本次挑战所学的属性设置所有网格项水平居中。"
        ],
        "tests": [
          {
            "text": "<code>container</code>类应该有<code>justify-items</code>属性且值为<code>center</code>。",
            "testString": "assert(code.match(/.container\\s*?{[\\s\\S]*justify-items\\s*?:\\s*?center\\s*?;[\\s\\S]*}/gi), '<code>container</code>类应该有<code>justify-items</code>属性且值为<code>center</code>。');"
          }
        ],
        "solutions": [],
        "hints": [],
        "releasedOn": "",
        "challengeType": 0,
        "files": {
          "indexhtml": {
            "key": "indexhtml",
            "ext": "html",
            "name": "index",
            "contents": [
              "<style>",
              "  .item1{background:LightSkyBlue;}",
              "  .item2{background:LightSalmon;}",
              "  .item3{background:PaleTurquoise;}",
              "  .item4{background:LightPink;}",
              "  .item5{background:PaleGreen;}",
              "  ",
              "  .container {",
              "    font-size: 40px;",
              "    min-height: 300px;",
              "    width: 100%;",
              "    background: LightGray;",
              "    display: grid;",
              "    grid-template-columns: 1fr 1fr 1fr;",
              "    grid-template-rows: 1fr 1fr 1fr;",
              "    grid-gap: 10px;",
              "    /* 请在本行以下添加你的代码 */",
              "    ",
              "    ",
              "    /* 请在本行以上添加你的代码 */",
              "  }",
              "</style>",
              "  ",
              "<div class=\"container\">",
              "  <div class=\"item1\">1</div>",
              "  <div class=\"item2\">2</div>",
              "  <div class=\"item3\">3</div>",
              "  <div class=\"item4\">4</div>",
              "  <div class=\"item5\">5</div>",
              "</div>"
            ],
            "head": [],
            "tail": []
          }
        }
      },
      {
        "id": "5a94fdf869fb03452672e45b",
        "title": "Align All Items Vertically using align-items",
        "description": [
          "对网格容器使用<code>align-items</code>属性可以给网格中所有的网格项设置沿列轴对齐的方式。",
          "<hr>",
          "请使用它让所有网格项移动到单元格的末尾。"
        ],
        "tests": [
          {
            "text": "<code>container</code>类应该有<code>align-items</code>属性且值为<code>end</code>。",
            "testString": "assert(code.match(/.container\\s*?{[\\s\\S]*align-items\\s*?:\\s*?end\\s*?;[\\s\\S]*}/gi), '<code>container</code>类应该有<code>align-items</code>属性且值为<code>end</code>。');"
          }
        ],
        "solutions": [],
        "hints": [],
        "releasedOn": "",
        "challengeType": 0,
        "files": {
          "indexhtml": {
            "key": "indexhtml",
            "ext": "html",
            "name": "index",
            "contents": [
              "<style>",
              "  .item1{background:LightSkyBlue;}",
              "  .item2{background:LightSalmon;}",
              "  .item3{background:PaleTurquoise;}",
              "  .item4{background:LightPink;}",
              "  .item5{background:PaleGreen;}",
              "  ",
              "  .container {",
              "    font-size: 40px;",
              "    min-height: 300px;",
              "    width: 100%;",
              "    background: LightGray;",
              "    display: grid;",
              "    grid-template-columns: 1fr 1fr 1fr;",
              "    grid-template-rows: 1fr 1fr 1fr;",
              "    grid-gap: 10px;",
              "    /* 请在本行以下添加你的代码 */",
              "    ",
              "    ",
              "    /* 请在本行以上添加你的代码 */",
              "  }",
              "</style>",
              "  ",
              "<div class=\"container\">",
              "  <div class=\"item1\">1</div>",
              "  <div class=\"item2\">2</div>",
              "  <div class=\"item3\">3</div>",
              "  <div class=\"item4\">4</div>",
              "  <div class=\"item5\">5</div>",
              "</div>"
            ],
            "head": [],
            "tail": []
          }
        }
      },
      {
        "id": "5a94fe0569fb03452672e45c",
        "title": "Divide the Grid Into an Area Template",
        "description": [
          "你可以将网格中的一些网格单元格组合成一个<dfn>区域（area）</dfn>，并为该区域指定一个自定义名称。你可以通过给容器加上<code>grid-template-areas</code>来实现：",
          "<blockquote>grid-template-areas:<br>&nbsp;&nbsp;\"header header header\"<br>&nbsp;&nbsp;\"advert content content\"<br>&nbsp;&nbsp;\"footer footer footer\";</blockquote>",
          "上面的代码将顶部三个单元格合并成一个名为<code>header</code>的区域，将底部三个单元格合并为一个名为<code>footer</code>的区域，并在中间行生成两个区域————<code>advert</code>和<code>content</code>。",
          "<strong>注意：</strong><br>在代码中，每个单词代表一个网格单元格，每对引号代表一行。",
          "除了自定义标签，你还能使用句点（<code>.</code>）来表示一个空单元格",
          "<hr>",
          "请放置区域模板，让名为<code>advert</code>的区域变成空单元格。"
        ],
        "tests": [
          {
            "text": "<code>container</code>类应该有类似于最右侧预览区的<code>grid-template-areas</code>属性且用<code>.</code>代替<code>advert</code>。",
            "testString": "assert(code.match(/.container\\s*?{[\\s\\S]*grid-template-areas\\s*?:\\s*?\"\\s*?header\\s*?header\\s*?header\\s*?\"\\s*?\"\\s*?.\\s*?content\\s*?content\\s*?\"\\s*?\"\\s*?footer\\s*?footer\\s*?footer\\s*?\"\\s*?;[\\s\\S]*}/gi), '<code>container</code>类应该有类似于最右侧预览区的<code>grid-template-areas</code>属性且用<code>.</code>代替<code>advert</code>。');"
          }
        ],
        "solutions": [],
        "hints": [],
        "releasedOn": "",
        "challengeType": 0,
        "files": {
          "indexhtml": {
            "key": "indexhtml",
            "ext": "html",
            "name": "index",
            "contents": [
              "<style>",
              "  .item1{background:LightSkyBlue;}",
              "  .item2{background:LightSalmon;}",
              "  .item3{background:PaleTurquoise;}",
              "  .item4{background:LightPink;}",
              "  .item5{background:PaleGreen;}",
              "  ",
              "  .container {",
              "    font-size: 40px;",
              "    min-height: 300px;",
              "    width: 100%;",
              "    background: LightGray;",
              "    display: grid;",
              "    grid-template-columns: 1fr 1fr 1fr;",
              "    grid-template-rows: 1fr 1fr 1fr;",
              "    grid-gap: 10px;",
              "    /* 请修改本行以下的代码 */",
              "    ",
              "    grid-template-areas:",
              "      \"header header header\"",
              "      \"advert content content\"",
              "      \"footer footer footer\";",
              "    /* 请修改本行以上的代码 */",
              "  }",
              "</style>",
              "  ",
              "<div class=\"container\">",
              "  <div class=\"item1\">1</div>",
              "  <div class=\"item2\">2</div>",
              "  <div class=\"item3\">3</div>",
              "  <div class=\"item4\">4</div>",
              "  <div class=\"item5\">5</div>",
              "</div>"
            ],
            "head": [],
            "tail": []
          }
        }
      },
      {
        "id": "5a94fe1369fb03452672e45d",
        "title": "Place Items in Grid Areas Using the grid-area Property",
        "description": [
          "像上一个挑战那样，在为网格容添加区域模板后，你可以通过添加你定义的名称将网格项放入自定义区域。为此，你需要对网格项使用<code>grid-area</code>：",
          "<blockquote>.item1 { grid-area: header; }</blockquote>",
          "这样，类名为<code>item1</code>的网格项就被放到了<code>header</code>区域里。这种情况下，网格项将使用整个顶行，因为这一行被名为 header 区域。",
          "<hr>",
          "请使用<code>grid-area</code>属性，把类为<code>item5</code>元素放到<code>footer</code>区域。"
        ],
        "tests": [
          {
            "text": "<code>item5</code>类应该有<code>grid-area</code>属性且值为<code>footer</code>。",
            "testString": "assert(code.match(/.item5\\s*?{[\\s\\S]*grid-area\\s*?:\\s*?footer\\s*?;[\\s\\S]*}/gi), '<code>item5</code>类应该有<code>grid-area</code>属性且值为<code>footer</code>。');"
          }
        ],
        "solutions": [],
        "hints": [],
        "releasedOn": "",
        "challengeType": 0,
        "files": {
          "indexhtml": {
            "key": "indexhtml",
            "ext": "html",
            "name": "index",
            "contents": [
              "<style>",
              "  .item1{background:LightSkyBlue;}",
              "  .item2{background:LightSalmon;}",
              "  .item3{background:PaleTurquoise;}",
              "  .item4{background:LightPink;}",
              "  ",
              "  .item5 {",
              "    background: PaleGreen;",
              "    /* 请在本行以下添加你的代码 */",
              "    ",
              "    ",
              "    /* 请在本行以上添加你的代码 */",
              "  }",
              "  ",
              "  .container {",
              "    font-size: 40px;",
              "    min-height: 300px;",
              "    width: 100%;",
              "    background: LightGray;",
              "    display: grid;",
              "    grid-template-columns: 1fr 1fr 1fr;",
              "    grid-template-rows: 1fr 1fr 1fr;",
              "    grid-gap: 10px;",
              "    grid-template-areas: ",
              "      \"header header header\"",
              "      \"advert content content\"",
              "      \"footer footer footer\";",
              "  }",
              "</style>",
              "  ",
              "<div class=\"container\">",
              "  <div class=\"item1\">1</div>",
              "  <div class=\"item2\">2</div>",
              "  <div class=\"item3\">3</div>",
              "  <div class=\"item4\">4</div>",
              "  <div class=\"item5\">5</div>",
              "</div>"
            ],
            "head": [],
            "tail": []
          }
        }
      },
      {
        "id": "5a94fe2669fb03452672e45e",
        "title": "Use grid-area Without Creating an Areas Template",
        "description": [
          "你在上一次挑战中学到的<code>grid-area</code>属性有另一种使用方式。如果网格中没有定义区域模板，你也可以像这样为它添加一个模板：",
          "<blockquote>item1 { grid-area: 1/1/2/4; }</blockquote>",
          "这里使用了你之前学习的线号来定义网格项的区域。上例中数字代表这些值：",
          "<blockquote>grid-area: 起始水平线 / 起始垂直线 / 末尾水平线 / 终止垂直线 ;</blockquote>",
          "因此，示例中的网格项将占用第 1 条和第 2 条水平线之间的行及第 1 条和第 4 条垂直线之间的列。",
          "<hr>",
          "请用<code>grid-area</code>属性将类为<code>item5</code>的元素放置在第 3 条和第 4 条水平线及第 1 条和第 4 条垂直线之间的区域内。"
        ],
        "tests": [
          {
            "text": "<code>item5</code>类应该有<code>grid-area</code>属性且值为<code>3/1/4/4</code>。",
            "testString": "assert(code.match(/.item5\\s*?{[\\s\\S]*grid-area\\s*?:\\s*?3\\s*?\\/\\s*?1\\s*?\\/\\s*?4\\s*?\\/\\s*?4\\s*?;[\\s\\S]*}/gi), '<code>item5</code>类应该有<code>grid-area</code>属性且值为<code>3/1/4/4</code>。');"
          }
        ],
        "solutions": [],
        "hints": [],
        "releasedOn": "",
        "challengeType": 0,
        "files": {
          "indexhtml": {
            "key": "indexhtml",
            "ext": "html",
            "name": "index",
            "contents": [
              "<style>",
              "  .item1{background:LightSkyBlue;}",
              "  .item2{background:LightSalmon;}",
              "  .item3{background:PaleTurquoise;}",
              "  .item4{background:LightPink;}",
              "  ",
              "  .item5 {",
              "    background: PaleGreen;",
              "    /* 请在本行以下添加你的代码 */",
              "    ",
              "    ",
              "    /* 请在本行以上添加你的代码 */",
              "  }",
              "  ",
              "  .container {",
              "    font-size: 40px;",
              "    min-height: 300px;",
              "    width: 100%;",
              "    background: LightGray;",
              "    display: grid;",
              "    grid-template-columns: 1fr 1fr 1fr;",
              "    grid-template-rows: 1fr 1fr 1fr;",
              "    grid-gap: 10px;",
              "  }",
              "</style>",
              "  ",
              "<div class=\"container\">",
              "  <div class=\"item1\">1</div>",
              "  <div class=\"item2\">2</div>",
              "  <div class=\"item3\">3</div>",
              "  <div class=\"item4\">4</div>",
              "  <div class=\"item5\">5</div>",
              "</div>"
            ],
            "head": [],
            "tail": []
          }
        }
      },
      {
        "id": "5a94fe3669fb03452672e45f",
        "title": "Reduce Repetition Using the repeat Function",
        "description": [
          "当使用<code>grid-template-columns</code>和<code>grid-template-rows</code>定义网格结构时，你需要为添加的每一行和每一列都输入一个值。",
          "如果要添加带 100 行高度相同的网格，单独放入 100 个值不太实际。幸运的是，有一种更好的方法——使用<code>repeat</code>方法指定行或列的重复次数，后面加上逗号以及需要重复的值。",
          "这里有一个添加 100 行网格的例子，使每行高度均为 50px：",
          "<blockquote>grid-template-rows: repeat(100, 50px);</blockquote>",
          "你还可以用 repeat 方法重复多个值，并在定义网格结构时与其他值一起使用。举个例子：",
          "<blockquote>grid-template-columns: repeat(2, 1fr 50px) 20px;</blockquote>",
          "效果相当于：",
          "<blockquote>grid-template-columns: 1fr 50px 1fr 50px 20px;</blockquote>",
          "<strong>注意：</strong><br><code>1fr 50px</code>重复了两次，后面跟着 20px。",
          "<hr>",
          "用<code>repeat</code>代替<code>grid-template-columns</code>属性的值中的重复代码。"
        ],
        "tests": [
          {
            "text": "<code>container</code>类应该有<code>grid-template-columns</code>属性且设置重复 3 列，宽为<code>1fr</code>。",
            "testString": "assert(code.match(/.container\\s*?{[\\s\\S]*grid-template-columns\\s*?:\\s*?repeat\\s*?\\(\\s*?3\\s*?,\\s*?1fr\\s*?\\)\\s*?;[\\s\\S]*}/gi), '<code>container</code>类应该有<code>grid-template-columns</code>属性且设置重复 3 列，宽为<code>1fr</code>。');"
          }
        ],
        "solutions": [],
        "hints": [],
        "releasedOn": "",
        "challengeType": 0,
        "files": {
          "indexhtml": {
            "key": "indexhtml",
            "ext": "html",
            "name": "index",
            "contents": [
              "<style>",
              "  .item1{background:LightSkyBlue;}",
              "  .item2{background:LightSalmon;}",
              "  .item3{background:PaleTurquoise;}",
              "  .item4{background:LightPink;}",
              "  .item5{background:PaleGreen;}",
              "  ",
              "  .container {",
              "    font-size: 40px;",
              "    min-height: 300px;",
              "    width: 100%;",
              "    background: LightGray;",
              "    display: grid;",
              "    /* 请修改本行以下的代码 */",
              "    ",
              "    grid-template-columns: 1fr 1fr 1fr;",
              "    ",
              "    /* 请修改本行以上的代码*/",
              "    grid-template-rows: 1fr 1fr 1fr;",
              "    grid-gap: 10px;",
              "  }",
              "</style>",
              "  ",
              "<div class=\"container\">",
              "  <div class=\"item1\">1</div>",
              "  <div class=\"item2\">2</div>",
              "  <div class=\"item3\">3</div>",
              "  <div class=\"item4\">4</div>",
              "  <div class=\"item5\">5</div>",
              "</div>"
            ],
            "head": [],
            "tail": []
          }
        }
      },
      {
        "id": "5a94fe4469fb03452672e460",
        "title": "Limit Item Size Using the minmax Function",
        "description": [
          "此外，内置函数<code>minmax</code>也可以可用于设置<code>grid-template-columns</code>和<code>grid-template-rows</code>的值。它的作用是在网格容器改变大小时限制网格项的大小。为此，你需要指定网格项允许的尺寸范围。例如：",
          "<blockquote>grid-template-columns: 100px minmax(50px, 200px);</blockquote>",
          "在上面的代码中，<code>grid-template-columns</code>被设置为添加两列，第一列 100px 宽，第二列宽度最小值是 50px，最大值是 200px。",
          "<hr>",
          "用<code>minmax</code>函数替换<code>repeat</code>函数中的<code>1fr</code>，限定其最小值为<code>90px</code>，最大值为<code>1fr</code>，你可以调整最右侧的预览面板查看效果。"
        ],
        "tests": [
          {
            "text": "<code>container</code>类应该有<code>grid-template-columns</code>属性且设置重复 3 列，每列宽度最小值为<code>90px</code>，最大值为<code>1fr</code>。",
            "testString": "assert(code.match(/.container\\s*?{[\\s\\S]*grid-template-columns\\s*?:\\s*?repeat\\s*?\\(\\s*?3\\s*?,\\s*?minmax\\s*?\\(\\s*?90px\\s*?,\\s*?1fr\\s*?\\)\\s*?\\)\\s*?;[\\s\\S]*}/gi), '<code>container</code>类应该有<code>grid-template-columns</code>属性且设置重复 3 列，每列宽度最小值<code>90px</code>，最大值<code>1fr</code>。');"
          }
        ],
        "solutions": [],
        "hints": [],
        "releasedOn": "",
        "challengeType": 0,
        "files": {
          "indexhtml": {
            "key": "indexhtml",
            "ext": "html",
            "name": "index",
            "contents": [
              "<style>",
              "  .item1{background:LightSkyBlue;}",
              "  .item2{background:LightSalmon;}",
              "  .item3{background:PaleTurquoise;}",
              "  .item4{background:LightPink;}",
              "  .item5{background:PaleGreen;}",
              "  ",
              "  .container {",
              "    font-size: 40px;",
              "    min-height: 300px;",
              "    width: 100%;",
              "    background: LightGray;",
              "    display: grid;",
              "    /* 请修改本行以下的代码 */",
              "    ",
              "    grid-template-columns: repeat(3, 1fr);",
              "    ",
              "    /* 请修改本行以上的代码*/",
              "    grid-template-rows: 1fr 1fr 1fr;",
              "    grid-gap: 10px;",
              "  }",
              "</style>",
              "  ",
              "<div class=\"container\">",
              "  <div class=\"item1\">1</div>",
              "  <div class=\"item2\">2</div>",
              "  <div class=\"item3\">3</div>",
              "  <div class=\"item4\">4</div>",
              "  <div class=\"item5\">5</div>",
              "</div>"
            ],
            "head": [],
            "tail": []
          }
        }
      },
      {
        "id": "5a94fe5469fb03452672e461",
        "title": "Create Flexible Layouts Using auto-fill",
        "description": [
          "重复方法带有一个名为<dfn>自动填充（auto-fill）</dfn>的功能。它的功能是根据容器的大小，尽可能多地放入指定大小的行或列。你可以通过结合<code>auto-fill</code>和<code>minmax</code>来更灵活地布局。",
          "在最右侧的预览区中，<code>grid-template-columns</code>被设置为：",
          "<blockquote>repeat(auto-fill, minmax(60px, 1fr));</blockquote>",
          "上面的代码效果：列的宽度会随容器大小改变，在可以插入一个 60px 宽的列之前，当前行的所有列会一直拉伸。（译者注：动手试试你将更明白。）",
          "<strong>注意：</strong><br>如果容器无法使所有网格项放在同一行，余下的网格项将移至新的一行。",
          "<hr>",
          "在第一个网格中，用<code>auto-fill</code>和<code>repeat</code>来填充网格，其中列宽的最小值为<code>60px</code>，最大值为<code>1fr</code>。你可以调整最右侧的预览区大小，查看自动填充效果。"
        ],
        "tests": [
          {
            "text": "<code>container</code>类应该有<code>grid-template-columns</code>属性且使用<code>repeat</code>和<code>auto-fill</code>，以便将最小宽度为<code>60px</code>，最大宽度为<code>1fr</code>的列填充至网格。",
            "testString": "assert(code.match(/.container\\s*?{[\\s\\S]*grid-template-columns\\s*?:\\s*?repeat\\s*?\\(\\s*?auto-fill\\s*?,\\s*?minmax\\s*?\\(\\s*?60px\\s*?,\\s*?1fr\\s*?\\)\\s*?\\)\\s*?;[\\s\\S]*}/gi), '<code>container</code>类应该有<code>grid-template-columns</code>属性且使用<code>repeat</code>和<code>auto-fill</code>，以便将最小宽度为<code>60px</code>，最大宽度为<code>1fr</code>的列填充至网格。');"
          }
        ],
        "solutions": [],
        "hints": [],
        "releasedOn": "",
        "challengeType": 0,
        "files": {
          "indexhtml": {
            "key": "indexhtml",
            "ext": "html",
            "name": "index",
            "contents": [
              "<style>",
              "  .item1{background:LightSkyBlue;}",
              "  .item2{background:LightSalmon;}",
              "  .item3{background:PaleTurquoise;}",
              "  .item4{background:LightPink;}",
              "  .item5{background:PaleGreen;}",
              "  ",
              "  .container {",
              "    font-size: 40px;",
              "    min-height: 100px;",
              "    width: 100%;",
              "    background: LightGray;",
              "    display: grid;",
              "    /* 请修改本行以下的代码 */",
              "    ",
              "    grid-template-columns: repeat(3, minmax(60px, 1fr));",
              "    ",
              "    /* 请修改本行以上的代码*/",
              "    grid-template-rows: 1fr 1fr 1fr;",
              "    grid-gap: 10px;",
              "  }",
              "  ",
              "  .container2 {",
              "    font-size: 40px;",
              "    min-height: 100px;",
              "    width: 100%;",
              "    background: Silver;",
              "    display: grid;",
              "    grid-template-columns: repeat(3, minmax(60px, 1fr));",
              "    grid-template-rows: 1fr 1fr 1fr;",
              "    grid-gap: 10px;",
              "  }",
              "</style>",
              "<div class=\"container\">",
              "  <div class=\"item1\">1</div>",
              "  <div class=\"item2\">2</div>",
              "  <div class=\"item3\">3</div>",
              "  <div class=\"item4\">4</div>",
              "  <div class=\"item5\">5</div>",
              "</div>",
              "<div class=\"container2\">",
              "  <div class=\"item1\">1</div>",
              "  <div class=\"item2\">2</div>",
              "  <div class=\"item3\">3</div>",
              "  <div class=\"item4\">4</div>",
              "  <div class=\"item5\">5</div>",
              "</div>"
            ],
            "head": [],
            "tail": []
          }
        }
      },
      {
        "id": "5a94fe6269fb03452672e462",
        "title": "Create Flexible Layouts Using auto-fit",
        "description": [
          "<code>auto-fit</code>效果几乎和<code>auto-fill</code>一样。不同点仅在于，当容器的大小大于各网格项之和时，<code>auto-fill</code>将会持续地在一端放入空行或空列，这样就会使所有网格项挤到另一边；而<code>auto-fit</code>则不会在一端放入空行或空列，而是会将所有网格项拉伸至合适的大小。",
          "<strong>注意：</strong><br>如果容器无法使所有网格项放在同一行，余下的网格项将移至新的一行。",
          "<hr>",
          "在第二个网格中，用<code>auto-fit</code>和<code>repeat</code>来填充网格，其中列宽的最小值为<code>60px</code>，最大值为<code>1fr</code>。你可以调整最右侧的预览区以查看差异。"
        ],
        "tests": [
          {
            "text": "<code>container2</code>类应该有<code>grid-template-columns</code>属性，且使用<code>repeat</code>和<code>auto-fit</code>以便将最小宽度为<code>60px</code>，最大宽度为<code>1fr</code>的列放入网格。",
            "testString": "assert(code.match(/.container\\s*?{[\\s\\S]*grid-template-columns\\s*?:\\s*?repeat\\s*?\\(\\s*?auto-fit\\s*?,\\s*?minmax\\s*?\\(\\s*?60px\\s*?,\\s*?1fr\\s*?\\)\\s*?\\)\\s*?;[\\s\\S]*}/gi), '<code>container2</code>类应该有<code>grid-template-columns</code>属性，且使用<code>repeat</code>和<code>auto-fit</code>以便将最小宽度为<code>60px</code>，最大宽度为<code>1fr</code>的列放入网格。');"
          }
        ],
        "solutions": [],
        "hints": [],
        "releasedOn": "",
        "challengeType": 0,
        "files": {
          "indexhtml": {
            "key": "indexhtml",
            "ext": "html",
            "name": "index",
            "contents": [
              "<style>",
              "  .item1{background:LightSkyBlue;}",
              "  .item2{background:LightSalmon;}",
              "  .item3{background:PaleTurquoise;}",
              "  .item4{background:LightPink;}",
              "  .item5{background:PaleGreen;}",
              "  ",
              "  .container {",
              "    font-size: 40px;",
              "    min-height: 100px;",
              "    width: 100%;",
              "    background: LightGray;",
              "    display: grid;",
              "    grid-template-columns: repeat( auto-fill, minmax(60px, 1fr));",
              "    grid-template-rows: 1fr 1fr 1fr;",
              "    grid-gap: 10px;",
              "  }",
              "  ",
              "  .container2 {",
              "    font-size: 40px;",
              "    min-height: 100px;",
              "    width: 100%;",
              "    background: Silver;",
              "    display: grid;",
              "    /* 请修改本行以下的代码 */",
              "    ",
              "    grid-template-columns: repeat(3, minmax(60px, 1fr));",
              "    ",
              "    /* 请修改本行以上的代码*/",
              "    grid-template-rows: 1fr 1fr 1fr;",
              "    grid-gap: 10px;",
              "  }",
              "</style>",
              "  ",
              "<div class=\"container\">",
              "  <div class=\"item1\">1</div>",
              "  <div class=\"item2\">2</div>",
              "  <div class=\"item3\">3</div>",
              "  <div class=\"item4\">4</div>",
              "  <div class=\"item5\">5</div>",
              "</div>",
              "<div class=\"container2\">",
              "  <div class=\"item1\">1</div>",
              "  <div class=\"item2\">2</div>",
              "  <div class=\"item3\">3</div>",
              "  <div class=\"item4\">4</div>",
              "  <div class=\"item5\">5</div>",
              "</div>"
            ],
            "head": [],
            "tail": []
          }
        }
      },
      {
        "id": "5a94fe7769fb03452672e463",
        "title": "Use Media Queries to Create Responsive Layouts",
        "description": [
          "通过使用媒体查询重新排列网格区域，更改网格尺寸以及重新排列网格项位置，CSS 网格能轻松地使网站更具响应性。",
          "在最右侧的预览区中，当网页可视区域的宽不小于 300px 时，列数从 1 变为 2。并且，广告（advertisement）区域完全占据左列。",
          "<hr>",
          "当网页可视区域的宽不小于<code>400px</code>时，使 header 区域完全占据最顶行，footer 区域完全占据最底行。"
        ],
        "tests": [
          {
            "text": "当网页可视区域的宽在<code>400px</code>及以上时，<code>container</code>类应该有<code>grid-template-areas</code>属性且使得 footer 和 header 区域分别占据顶行和底行，advert 和 content 区域分别占据中间行的左和右列。",
            "testString": "assert(code.match(/@media\\s*?\\(\\s*?min-width\\s*?:\\s*?400px\\s*?\\)[\\s\\S]*.container\\s*?{[\\s\\S]*grid-template-areas\\s*?:\\s*?\"\\s*?header\\s*?header\\s*?\"\\s*?\"\\s*?advert\\s*?content\\s*?\"\\s*?\"\\s*?footer\\s*?footer\\s*?\"\\s*?;[\\s\\S]*}/gi), '当网页可视区域的宽在<code>400px</code>及以上时，<code>container</code>类应该有<code>grid-template-areas</code>属性且使得 footer 和 header 区域分别占据顶行和底行，advert 和 content 区域分别占据中间行的左和右列。');"
          }
        ],
        "solutions": [],
        "hints": [],
        "releasedOn": "",
        "challengeType": 0,
        "files": {
          "indexhtml": {
            "key": "indexhtml",
            "ext": "html",
            "name": "index",
            "contents": [
              "<style>",
              "  .item1 {",
              "    background: LightSkyBlue;",
              "    grid-area: header;",
              "  }",
              "  ",
              "  .item2 {",
              "    background: LightSalmon;",
              "    grid-area: advert;",
              "  }",
              "  ",
              "  .item3 {",
              "    background: PaleTurquoise;",
              "    grid-area: content;",
              "  }",
              "  ",
              "  .item4 {",
              "    background: lightpink;",
              "    grid-area: footer;",
              "  }",
              "  ",
              "  .container {",
              "    font-size: 1.5em;",
              "    min-height: 300px;",
              "    width: 100%;",
              "    background: LightGray;",
              "    display: grid;",
              "    grid-template-columns: 1fr;",
              "    grid-template-rows: 50px auto 1fr auto;",
              "    grid-gap: 10px;",
              "    grid-template-areas:",
              "      \"header\"",
              "      \"advert\"",
              "      \"content\"",
              "      \"footer\";",
              "  }",
              "  ",
              "  @media (min-width: 300px){",
              "    .container{",
              "      grid-template-columns: auto 1fr;",
              "      grid-template-rows: auto 1fr auto;",
              "      grid-template-areas:",
              "        \"advert header\"",
              "        \"advert content\"",
              "        \"advert footer\";",
              "    }",
              "  }",
              "  ",
              "  @media (min-width: 400px){",
              "    .container{",
              "      /* 请修改本行以下的代码 */",
              "    ",
              "      grid-template-areas:",
              "        \"advert header\"",
              "        \"advert content\"",
              "        \"advert footer\";",
              "    ",
              "    /* 请修改本行以上的代码*/",
              "    }",
              "  }",
              "</style>",
              "  ",
              "<div class=\"container\">",
              "  <div class=\"item1\">header</div>",
              "  <div class=\"item2\">advert</div>",
              "  <div class=\"item3\">content</div>",
              "  <div class=\"item4\">footer</div>",
              "</div>"
            ],
            "head": [],
            "tail": []
          }
        }
      },
      {
        "id": "5a94fe8569fb03452672e464",
        "title": "Create Grids within Grids",
        "description": [
          "将元素转换为网格只会影响其子代元素。因此，在把某个子代元素设置为网格后，就会得到一个嵌套的网格。",
          "例如，设置类为<code>item3</code>的元素的<code>display</code>和<code>grid-template-columns</code>属性，就会得到一个嵌套的网格。",
          "<hr>",
          "用<code>display</code>和<code>grid-template-columns</code>，使类为<code>item3</code>元素转换为有两列且宽度为<code>auto</code>和<code>1fr</code>的网格。"
        ],
        "tests": [
          {
            "text": "<code>item3</code>类应该有<code>grid-template-columns</code>属性且值为<code>auto</code>和<code>1fr</code>。",
            "testString": "assert(code.match(/.item3\\s*?{[\\s\\S]*grid-template-columns\\s*?:\\s*?auto\\s*?1fr\\s*?;[\\s\\S]*}/gi), '<code>item3</code>类应该有<code>grid-template-columns</code>属性且将<code>auto</code>和<code>1fr</code>作为值。');"
          },
          {
            "text": "<code>item3</code>类有<code>display</code>属性且值为<code>grid</code>。",
            "testString": "assert(code.match(/.item3\\s*?{[\\s\\S]*display\\s*?:\\s*?grid\\s*?;[\\s\\S]*}/gi), '<code>item3</code>类有<code>display</code>属性且值为<code>grid</code>。');"
          }
        ],
        "solutions": [],
        "hints": [],
        "releasedOn": "",
        "challengeType": 0,
        "files": {
          "indexhtml": {
            "key": "indexhtml",
            "ext": "html",
            "name": "index",
            "contents": [
              "<style>",
              "  .item1 {",
              "    background: LightSkyBlue;",
              "    grid-area: header;",
              "  }",
              "  ",
              "  .item2 {",
              "    background: LightSalmon;",
              "    grid-area: advert;",
              "  }",
              "  ",
              "  .item3 {",
              "    background: PaleTurquoise;",
              "    grid-area: content;",
              "    /* 请在本行以下添加你的代码 */",
              "    ",
              "    ",
              "    /* 请在本行以上添加你的代码 */",
              "  }",
              "  ",
              "  .item4 {",
              "    background: lightpink;",
              "    grid-area: footer;",
              "  }",
              "  ",
              "  .itemOne {",
              "    background: PaleGreen;",
              "  }",
              "  ",
              "  .itemTwo {",
              "    background: BlanchedAlmond;",
              "  }",
              "  ",
              "  .container {",
              "    font-size: 1.5em;",
              "    min-height: 300px;",
              "    width: 100%;",
              "    background: LightGray;",
              "    display: grid;",
              "    grid-template-columns: auto 1fr;",
              "    grid-template-rows: auto 1fr auto;",
              "    grid-gap: 10px;",
              "    grid-template-areas:",
              "      \"advert header\"",
              "      \"advert content\"",
              "      \"advert footer\";",
              "  }",
              "</style>",
              "  ",
              "<div class=\"container\">",
              "  <div class=\"item1\">header</div>",
              "  <div class=\"item2\">advert</div>",
              "  <div class=\"item3\">",
              "    <div class=\"itemOne\">paragraph1</div>",
              "    <div class=\"itemTwo\">paragraph2</div>",
              "  </div>",
              "  <div class=\"item4\">footer</div>",
              "</div>"
            ],
            "head": [],
            "tail": []
          }
        }
      }
    ]
  }