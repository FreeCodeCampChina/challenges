{
  "name": "Responsive Web Design Principles",
  "order": 4,
  "time": "1 hour",
  "helpRoom": "Help",
  "challenges": [
    {
      "id": "587d78b0367417b2b2512b08",
      "title": "Create a Media Query",
      "description": [
        "媒体查询是 CSS3 中可以根据不同可视窗口大小设置不同样式的新技术，可视窗口是用户在网页上的可见区域，根据访问网站的设备不同而不同",
        "媒体查询由媒体类型组成，如果媒体类型与文档显示的设备类型匹配，则应用对应的样式。你可以在你的媒体查询中用上你想用的选择器和样式。",
        "下面是一个媒体查询的例子：当设备宽度小于等于 100px 时返回的内容",
        "<code>@media (max-width: 100px) { /* CSS Rules */ }</code>",
        "以下媒体查询当设备高度大于等于 350px 时返回内容:",
        "<code>@media (min-height: 350px) { /* CSS Rules */ }</code>",
        "只有当媒体类型与当前设备匹配时，才应用媒体查询中的 CSS 。",
        "<hr>",
        "增加一个媒体查询，当设备的高度小于或等于 800px 时，<code>p</code> 标签的 <code>font-size</code> 为 10px"
      ],
      "tests": [
        {
          "text": "当设备 <code>height</code> 小于或等于 800px 时，你的 <code>p</code> 元素 <code>font-size</code> 应为 10px。",
          "testString": "assert($('p').css('font-size') == '10px', '当设备 <code>height</code> 小于或等于 800px 时，你的 <code>p</code> 元素 <code>font-size</code> 应为 10px。');"
        },
        {
          "text": "给 <code>height</code> 小于或等于 800px 的设备声明一个 <code>@media</code> 查询",
          "testString": "assert(code.match(/@media\\s?\\(max-height:\\s*?800px\\)/g), '给 <code>height</code> 小于或等于 800px 的设备声明一个 <code>@media</code> 查询');"
        }
      ],
      "releasedOn": "Feb 17, 2017",
      "solutions": [],
      "hints": [],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  p {",
            "    font-size: 20px;",
            "  }",
            "  ",
            "  /* Add media query below */",
            "  ",
            "</style>",
            "  ",
            "<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus quis tempus massa. Aenean erat nisl, gravida vel vestibulum cursus, interdum sit amet lectus. Sed sit amet quam nibh. Suspendisse quis tincidunt nulla. In hac habitasse platea dictumst. Ut sit amet pretium nisl. Vivamus vel mi sem. Aenean sit amet consectetur sem. Suspendisse pretium, purus et gravida consequat, nunc ligula ultricies diam, at aliquet velit libero a dui.</p>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78b1367417b2b2512b09",
      "title": "Make an Image Responsive",
      "description": [
        "用 CSS 来做图片自适应其实很简单。取代使用绝对宽度应用于元素:",
        "<code>img { width: 720px; }</code>",
        "你可以这样:",
        "<blockquote>img {<br>&nbsp;&nbsp;max-width: 100%;<br>&nbsp;&nbsp;display: block;<br>&nbsp;&nbsp;height: auto;<br>}</blockquote>",
        "The <code>max-width</code> property of 100% scales the image to fit the width of its container, but the image won't stretch wider than its original width. Setting the <code>display</code> property to block changes the image from an inline element (its default), to a block element on its own line. The <code>height</code> property of auto keeps the original aspect ratio of the image.",
        "<hr>",
        "给 <code>img</code> 标签增加样式规则使它自适应容器尺寸。应该声明为块级元素，适应它容器的宽度并且保持原本的宽高比而不拉伸。"
      ],
      "tests": [
        {
          "text": "你的 <code>img</code> 标签应设置 <code>max-width</code> 为 100%。",
          "testString": "assert(code.match(/max-width:\\s*?100%;/g), '你的 <code>img</code> 标签应该包含 <code>max-width</code> 为 100% 的样式。');"
        },
        {
          "text": "你的 <code>img</code> 标签应设置 <code>display</code> 为 block。",
          "testString": "assert($('img').css('display') == 'block', '你的 <code>img</code> 标签应该设置 <code>display</code> 为 block。');"
        },
        {
          "text": "你的 <code>img</code> 标签应设置 <code>height</code> 为 auto。",
          "testString": "assert(code.match(/height:\\s*?auto;/g), '你的 <code>img</code> 标签应设置 <code>height</code> 为 auto。');"
        }
      ],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "solutions": [],
      "hints": [],
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  ",
            "</style>",
            "",
            "<img src=\"https://s3.amazonaws.com/freecodecamp/FCCStickerPack.jpg\" alt=\"freeCodeCamp stickers set\">"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78b1367417b2b2512b0a",
      "title": "Use a Retina Image for Higher Resolution Displays",
      "description": [
        "The simplest way to make your images appear \"retina\" (and optimize them for retina displays) is to define their <code>width</code> and <code>height</code> values as only half of what the original file is.",
        "Here is an example of an image that is only using half of the original height and width:",
        "<blockquote>&lt;style&gt;<br>&nbsp;&nbsp;img { height: 250px; width: 250px; }<br>&lt;/style&gt;<br>&lt;img src=&quot;coolPic500x500&quot; alt=&quot;A most excellent picture&quot;&gt;</blockquote>",
        "<hr>",
        "Set the <code>width</code> and <code>height</code> of the <code>img</code> tag to half of their original values. In this case, both the original <code>height</code> and the original <code>width</code> are 200px."
      ],
      "tests": [
        {
          "text": "Your <code>img</code> tag should have a <code>width</code> of 100 pixels.",
          "testString": "assert($('img').css('width') == '100px', 'Your <code>img</code> tag should have a <code>width</code> of 100 pixels.');"
        },
        {
          "text": "Your <code>img</code> tag should have a <code>height</code> of 100 pixels.",
          "testString": "assert($('img').css('height') == '100px', 'Your <code>img</code> tag should have a <code>height</code> of 100 pixels.');"
        }
      ],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "solutions": [],
      "hints": [],
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  ",
            "</style>",
            "",
            "<img src=\"https://s3.amazonaws.com/freecodecamp/FCCStickers-CamperBot200x200.jpg\" alt=\"freeCodeCamp sticker that says 'Because CamperBot Cares'\">"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78b1367417b2b2512b0c",
      "title": "Make Typography Responsive",
      "description": [
        "Instead of using <code>em</code> or <code>px</code> to size text, you can use viewport units for responsive typography. Viewport units, like percentages, are relative units, but they are based off different items. Viewport units are relative to the viewport dimensions (width or height) of a device, and percentages are relative to the size of the parent container element.",
        "The four different viewport units are:",
        "<ul><li><code>vw: 10vw</code> would be 10% of the viewport's width.</li><li><code>vh: 3vh</code> would be 3% of the viewport's height.</li><li><code>vmin: 70vmin</code> would be 70% of the viewport's smaller dimension (height vs. width).</li><li><code>vmax: 100vmax</code> would be 100% of the viewport's bigger dimension (height vs. width).</li></ul>",
        "<hr>",
        "Set the <code>width</code> of the <code>h2</code> tag to 80% of the viewport's width and the <code>width</code> of the paragraph as 75% of the viewport's smaller dimension."
      ],
      "tests": [
        {
          "text": "Your <code>h2</code> tag should have a <code>width</code> of 80vw.",
          "testString": "assert(code.match(/h2\\s*?{\\s*?width:\\s*?80vw;\\s*?}/g), 'Your <code>h2</code> tag should have a <code>width</code> of 80vw.');"
        },
        {
          "text": "Your <code>p</code> tag should have a <code>width</code> of 75vmin.",
          "testString": "assert(code.match(/p\\s*?{\\s*?width:\\s*?75vmin;\\s*?}/g), 'Your <code>p</code> tag should have a <code>width</code> of 75vmin.');"
        }
      ],
      "releasedOn": "Feb 17, 2017",
      "solutions": [],
      "hints": [],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  ",
            "</style>",
            "",
            "<h2>Importantus Ipsum</h2>",
            "<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus quis tempus massa. Aenean erat nisl, gravida vel vestibulum cursus, interdum sit amet lectus. Sed sit amet quam nibh. Suspendisse quis tincidunt nulla. In hac habitasse platea dictumst. Ut sit amet pretium nisl. Vivamus vel mi sem. Aenean sit amet consectetur sem. Suspendisse pretium, purus et gravida consequat, nunc ligula ultricies diam, at aliquet velit libero a dui.</p>"
          ],
          "head": [],
          "tail": []
        }
      }
    }
  ]
}