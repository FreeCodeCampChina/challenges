{
  "name": "Applied Visual Design",
  "order": 2,
  "time": "5 hours",
  "helpRoom": "Help",
  "challenges": [
    {
      "id": "587d7791367417b2b2512ab3",
      "title": "Create Visual Balance Using the text-align Property",
      "description": [
        "这部分课程主要关于应用视觉设计。开始的挑战展示了一些核心的原则，代码基于一个指定的卡片布局。",
        "web 内容大部分都是文本。CSS 里面的<code>text-align</code>属性可以控制文本的对齐方式。",
        "<code>text-align: justify;</code>文本两端对齐，忽略最后一行，其它行文字左右两端都靠近行边缘。",
        "<code>text-align: center;</code>文本居中对齐。",
        "<code>text-align: right;</code>可以让文本右对齐。",
        "<code>text-align: left;</code>是<code>text-align</code>的默认值，它可以让文本左对齐。",
        "<hr>",
        "居中对齐<code>h4</code>标签文本，文本内容为 “Google”。两端对齐段落标签文本，文本介绍了 Google 的创立。"
      ],
      "tests": [
        {
          "text": "你的代码应该在<code>h4</code>标签上使用 text-align 属性设置文本居中对齐。",
          "testString": "assert($('h4').css('text-align') == 'center', '你的代码应该在<code>h4</code>标签上使用 text-align 属性设置文本居中对齐。');"
        },
        {
          "text": "你的代码应该在<code>p</code>标签上使用 text-align 属性设置文本两端对齐。",
          "testString": "assert($('p').css('text-align') == 'justify', '你的代码应该在<code>p</code>标签上使用 text-align 属性设置文本两端对齐。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  h4 {",
            "    ",
            "  }",
            "  p {",
            "    ",
            "  }",
            "  .links {",
            "    margin-right: 20px;",
            "    ",
            "  }",
            "  .fullCard {",
            "    border: 1px solid #ccc;",
            "    border-radius: 5px;",
            "    margin: 10px 5px;",
            "    padding: 4px;",
            "  }",
            "  .cardContent {",
            "    padding: 10px;",
            "  }",
            "</style>",
            "<div class=\"fullCard\">",
            "  <div class=\"cardContent\">",
            "    <div class=\"cardText\">",
            "      <h4>Google</h4>",
            "      <p>Google 由在斯坦福大学攻读理工博士的拉里·佩奇和谢尔盖·布林共同创建。</p>",
            "    </div>",
            "    <div class=\"cardLinks\">",
            "      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">拉里·佩奇</a>",
            "      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">谢尔盖·布林</a>",
            "    </div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7791367417b2b2512ab4",
      "title": "Adjust the Width of an Element Using the width Property",
      "description": [
        "你可以使用 CSS 里面的<code>width</code>属性来指定元素的宽度。属性值可以是相对单位（比如 em），绝对单位（比如 px），或者包含块（父元素）宽度的百分比。下面这个例子把图片的宽度设置为 220px：",
        "<blockquote>img {<br>&nbsp;&nbsp;width: 220px;<br>}</blockquote>",
        "<hr>",
        "给卡片添加<code>width</code>属性，设置它的值为绝对单位 245px。使用<code>fullCark</code> class 来选择元素。"
      ],
      "tests": [
        {
          "text": "你的代码应该通过<code>fullCard</code> class 选择器改变卡片的<code>width</code>属性使其值为<code>245px</code>。",
          "testString": "assert(code.match(/.fullCard\\s*{[\\s\\S][^}]*\\n*^\\s*width\\s*:\\s*245px\\s*;/gm), '你的代码应该通过<code>fullCard</code> class 选择器改变卡片的<code>width</code>属性使其值为<code>245px</code>。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  h4 {",
            "    text-align: center;",
            "  }",
            "  p {",
            "    text-align: justify;",
            "  }",
            "  .links {",
            "    margin-right: 20px;",
            "    text-align: left;",
            "  }",
            "  .fullCard {",
            "    ",
            "    border: 1px solid #ccc;",
            "    border-radius: 5px;",
            "    margin: 10px 5px;",
            "    padding: 4px;",
            "  }",
            "  .cardContent {",
            "    padding: 10px;",
            "  }",
            "</style>",
            "<div class=\"fullCard\">",
            "  <div class=\"cardContent\">",
            "    <div class=\"cardText\">",
            "      <h4>Google</h4>",
            "      <p>Google 由在斯坦福大学攻读理工博士的拉里·佩奇和谢尔盖·布林共同创建。</p>",
            "    </div>",
            "    <div class=\"cardLinks\">",
            "      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">拉里·佩奇</a>",
            "      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">谢尔盖·布林</a>",
            "    </div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7791367417b2b2512ab5",
      "title": "Adjust the Height of an Element Using the height Property",
      "description": [
        "和<code>width</code>属性类似，你可以使用 CSS 里面的<code>height</code>属性来指定元素的高度。下面这个例子把图片的高度设置为 20px：",
        "<blockquote>img {<br>&nbsp;&nbsp;height: 20px;<br>}</blockquote>",
        "<hr>",
        "给<code>h4</code>标签添加<code>height</code>属性并设置值为 25px。"
      ],
      "tests": [
        {
          "text": "你的代码应该设置<code>h4</code>的<code>height</code>属性，使其值为<code>25px</code>。",
          "testString": "assert($('h4').css('height') == '25px', '你的代码应该设置<code>h4</code>的<code>height</code>属性，使其值为<code>25px</code>。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  h4 {",
            "    text-align: center;",
            "    ",
            "  }",
            "  p {",
            "    text-align: justify;",
            "  }",
            "  .links {",
            "    margin-right: 20px;",
            "    text-align: left;",
            "  }",
            "  .fullCard {",
            "    width: 245px;",
            "    border: 1px solid #ccc;",
            "    border-radius: 5px;",
            "    margin: 10px 5px;",
            "    padding: 4px;",
            "  }",
            "  .cardContent {",
            "    padding: 10px;",
            "  }",
            "</style>",
            "<div class=\"fullCard\">",
            "  <div class=\"cardContent\">",
            "    <div class=\"cardText\">",
            "      <h4>Google</h4>",
            "      <p>Google 由在斯坦福大学攻读理工博士的拉里·佩奇和谢尔盖·布林共同创建。</p>",
            "    </div>",
            "    <div class=\"cardLinks\">",
            "      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">拉里·佩奇</a>",
            "      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">谢尔盖·布林</a>",
            "    </div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d781a367417b2b2512ab7",
      "title": "Use the strong Tag to Make Text Bold",
      "description": [
        "你可以使用<code>strong</code>标签来加粗文字。这通常用来强调文字，表示它很重要。添加了<code>strong</code>标签后，浏览器会给元素应用<code>font-weight:bold;</code>的 CSS 属性。",
        "<hr>",
        "在<code>p</code>标签里的 “斯坦福大学” 外面添加<code>strong</code>标签。"
      ],
      "tests": [
        {
          "text": "你的代码里应该有一个<code>strong</code>标签。",
          "testString": "assert($('strong').length == 1, '你的代码里应该有一个<code>strong</code>标签。');"
        },
        {
          "text": "<code>strong</code>标签应该在<code>p</code>标签里。",
          "testString": "assert($('p').children('strong').length == 1, '<code>strong</code>标签应该在<code>p</code>标签里。');"
        },
        {
          "text": "<code>strong</code>标签应该包围 “斯坦福大学”。",
          "testString": "assert($('strong').text().match(/^斯坦福大学$/gi), '<code>strong</code>标签应该包围 “斯坦福大学”。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  h4 {",
            "    text-align: center;",
            "    height: 25px;",
            "  }",
            "  p {",
            "    text-align: justify;",
            "  }",
            "  .links {",
            "    text-align: left;",
            "    color: black;",
            "  }",
            "  .fullCard {",
            "    width: 245px;",
            "    border: 1px solid #ccc;",
            "    border-radius: 5px;",
            "    margin: 10px 5px;",
            "    padding: 4px;",
            "  }",
            "  .cardContent {",
            "    padding: 10px;",
            "  }",
            "  .cardText {",
            "    margin-bottom: 30px;",
            "  }",
            "</style>",
            "<div class=\"fullCard\">",
            "  <div class=\"cardContent\">",
            "    <div class=\"cardText\">",
            "      <h4>Google</h4>",
            "      <p>Google 由在斯坦福大学攻读理工博士的拉里·佩奇和谢尔盖·布林共同创建。</p>",
            "    </div>",
            "    <div class=\"cardLinks\">",
            "      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">拉里·佩奇</a><br><br>",
            "      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">谢尔盖·布林</a>",
            "    </div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d781a367417b2b2512ab8",
      "title": "Use the u Tag to Underline Text",
      "description": [
        "你可以使用<code>u</code>标签来给文字添加下划线。这通常用来表示这部分文字很重要，或者是一些值得注意的内容。添加了<code>u</code>标签后，浏览器会给元素应用<code>text-decoration: underline;</code>的 CSS 属性。",
        "<hr>",
        "在 “理工博士” 外面添加<code>u</code>标签。不要给整个 class 为<code>cardText</code>的父<code>div</code>添加。",
        "<strong>注意</strong>超链接标签默认给文本添加下划线，如果<code>u</code>标签的下滑线和页面的链接混淆，请避免使用它。"
      ],
      "tests": [
        {
          "text": "你的代码里应该有一个<code>u</code>标签。",
          "testString": "assert($('u').length === 1, '你的代码里应该有一个<code>u</code>标签。');"
        },
        {
          "text": "<code>u</code>标签应该包围 “理工博士”。",
          "testString": "assert($('u').text() === '理工博士', '<code>u</code>标签应该包围 “理工博士”。');"
        },
        {
          "text": "<code>u</code>标签内不应包含额外的<code>div</code>标签。",
          "testString": "assert($('u').children('div').length === 0, '<code>u</code>标签内不应包含额外的<code>div</code>标签。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  h4 {",
            "    text-align: center;",
            "    height: 25px;",
            "  }",
            "  p {",
            "    text-align: justify;",
            "  }",
            "  .links {",
            "    text-align: left;",
            "    color: black;",
            "  }",
            "  .fullCard {",
            "    width: 245px;",
            "    border: 1px solid #ccc;",
            "    border-radius: 5px;",
            "    margin: 10px 5px;",
            "    padding: 4px;",
            "  }",
            "  .cardContent {",
            "    padding: 10px;",
            "  }",
            "  .cardText {",
            "    margin-bottom: 30px;",
            "  }",
            "</style>",
            "<div class=\"fullCard\">",
            "  <div class=\"cardContent\">",
            "    <div class=\"cardText\">",
            "      <h4>Google</h4>",
            "      <p>Google 由在<strong>斯坦福大学</strong>攻读理工博士的拉里·佩奇和谢尔盖·布林共同创建。</p>",
            "    </div>",
            "    <div class=\"cardLinks\">",
            "      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">拉里·佩奇</a><br><br>",
            "      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">谢尔盖·布林</a>",
            "    </div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d781a367417b2b2512ab9",
      "title": "Use the em Tag to Italicize Text",
      "description": [
        "你可以使用 <code>em</code> 标签来强调文字。由于浏览器会给元素应用<code>font-style: italic;</code>CSS，这时文字会显示为斜体。",
        "<hr>",
        "在段落标签里的文字外面添加<code>em</code>标签来强调段落。"
      ],
      "tests": [
        {
          "text": "你的代码应该添加一个<code>em</code>标签。",
          "testString": "assert($('em').length == 1, '你的代码应该添加一个<code>em</code>标签。');"
        },
        {
          "text": "<code>em</code>标签应该包围<code>p</code>标签里的文本，而不是包围整个<code>p</code>标签。",
          "testString": "assert($('p').children().length == 1 && $('em').children().length == 2, '<code>em</code>标签应该包围<code>p</code>标签里的文本，而不是包围整个<code>p</code>标签。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  h4 {",
            "    text-align: center;",
            "    height: 25px;",
            "  }",
            "  p {",
            "    text-align: justify;",
            "  }",
            "  .links {",
            "    text-align: left;",
            "    color: black;",
            "  }",
            "  .fullCard {",
            "    width: 245px;",
            "    border: 1px solid #ccc;",
            "    border-radius: 5px;",
            "    margin: 10px 5px;",
            "    padding: 4px;",
            "  }",
            "  .cardContent {",
            "    padding: 10px;",
            "  }",
            "  .cardText {",
            "    margin-bottom: 30px;",
            "  }",
            "</style>",
            "<div class=\"fullCard\">",
            "  <div class=\"cardContent\">",
            "    <div class=\"cardText\">",
            "      <h4>Google</h4>",
            "      <p>Google 由在<strong>斯坦福大学</strong>攻读<u>理工博士</u>的拉里·佩奇和谢尔盖·布林共同创建。</p>",
            "    </div>",
            "    <div class=\"cardLinks\">",
            "      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">拉里·佩奇</a><br><br>",
            "      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">谢尔盖·布林</a>",
            "    </div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d781b367417b2b2512aba",
      "title": "Use the s Tag to Strikethrough Text",
      "description": [
        "你可以用<code>s</code>标签来给文字添加删除线，<s>他的效果是在文字正中间有一条细线</s>。它代表着这段文字不再有效。添加了<code>s</code>标签后，浏览器会给元素应用<code>text-decoration: line-through;</code>CSS 属性。",
        "<hr>",
        "在<code>h4</code>标签里的 “Google” 外添加<code>s</code>标签，然后在<code>s</code>标签外面添加单词 Alphabet，Alphabet 不要有删除线格式。"
      ],
      "tests": [
        {
          "text": "你的代码应该添加一个<code>s</code>标签。",
          "testString": "assert($('s').length == 1, '你的代码应该添加一个<code>s</code>标签。');"
        },
        {
          "text": "<code>s</code>标签应该在<code>h4</code>标签内的 Google 文字外面，它不应该包含单词 Alphabet。",
          "testString": "assert($('s').text().match(/Google/gi) && !$('s').text().match(/Alphabet/gi), '<code>s</code>标签应该在<code>h4</code>标签内的 Google 文字外面，它不应该包含单词 Alphabet。');"
        },
        {
          "text": "<code>h4</code>标签内应该有单词 Alphabet，Alphabet 应该没有删除线格式。",
          "testString": "assert($('h4').html().match(/Alphabet/gi), '<code>h4</code>标签内应该有单词 Alphabet，Alphabet 应该没有删除线格式。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  h4 {",
            "    text-align: center;",
            "    height: 25px;",
            "  }",
            "  p {",
            "    text-align: justify;",
            "  }",
            "  .links {",
            "    text-align: left;",
            "    color: black;",
            "  }",
            "  .fullCard {",
            "    width: 245px;",
            "    border: 1px solid #ccc;",
            "    border-radius: 5px;",
            "    margin: 10px 5px;",
            "    padding: 4px;",
            "  }",
            "  .cardContent {",
            "    padding: 10px;",
            "  }",
            "  .cardText {",
            "    margin-bottom: 30px;",
            "  }",
            "</style>",
            "<div class=\"fullCard\">",
            "  <div class=\"cardContent\">",
            "    <div class=\"cardText\">",
            "      <h4>Google</h4>",
            "      <p><em>Google 由在<strong>斯坦福大学</strong>攻读<u>理工博士</u>的拉里·佩奇和谢尔盖·布林共同创建。</em></p>",
            "    </div>",
            "    <div class=\"cardLinks\">",
            "      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">拉里·佩奇</a><br><br>",
            "      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">谢尔盖·布林</a>",
            "    </div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d781b367417b2b2512abb",
      "title": "Create a Horizontal Line Using the hr Element",
      "description": [
        "你可以用<code>hr</code>标签来添加一条宽度撑满父元素的横线。它可以用来表示文档主题的改变，或者用来在视觉上将文档分隔成几个部分。",
        "<hr>",
        "在包含卡片标题的<code>h4</code>下面添加一个<code>hr</code>标签。",
        "<strong>注意</strong><br>在 HTML 里，<code>hr</code>是自关闭标签，所以不需要一个单独的关闭标签。"
      ],
      "tests": [
        {
          "text": "你的代码里应该添加一个<code>hr</code>标签。",
          "testString": "assert($('hr').length == 1, '你的代码里应该添加一个<code>hr</code>标签。');"
        },
        {
          "text": "<code>hr</code>标签应该在标题和段落之间。",
          "testString": "assert(code.match(/<\\/h4>\\s*?<hr(>|\\s*?\\/>)\\s*?<p>/gi), '<code>hr</code>标签应该在标题和段落之间。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  h4 {",
            "    text-align: center;",
            "    height: 25px;",
            "  }",
            "  p {",
            "    text-align: justify;",
            "  }",
            "  .links {",
            "    text-align: left;",
            "    color: black;",
            "  }",
            "  .fullCard {",
            "    width: 245px;",
            "    border: 1px solid #ccc;",
            "    border-radius: 5px;",
            "    margin: 10px 5px;",
            "    padding: 4px;",
            "  }",
            "  .cardContent {",
            "    padding: 10px;",
            "  }",
            "  .cardText {",
            "    margin-bottom: 30px;",
            "  }",
            "</style>",
            "<div class=\"fullCard\">",
            "  <div class=\"cardContent\">",
            "    <div class=\"cardText\">",
            "      <h4><s>Google</s>Alphabet</h4>",
            "      <p><em>Google 由在<strong>斯坦福大学</strong>攻读<u>理工博士</u>的拉里·佩奇和谢尔盖·布林共同创建。</em></p>",
            "    </div>",
            "    <div class=\"cardLinks\">",
            "      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">拉里·佩奇</a><br><br>",
            "      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">谢尔盖·布林</a>",
            "    </div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d781b367417b2b2512abc",
      "title": "Adjust the background-color Property of Text",
      "description": [
        "为了让页面更美观，除了设置整个页面的背景色以及文字颜色外，你还可以单独设置文字的背景色，即在文字的父元素上添加<code>background-color</code>属性。在本挑战里我们将使用<code>rgba()</code>颜色，而不是之前学到的<code>hex</code>编码或者<code>rgb()</code>颜色。",
        "<blockquote>rgba 代表：<br>&nbsp;&nbsp;r = red 红色<br>&nbsp;&nbsp;g = green 绿色<br>&nbsp;&nbsp;b = blue 蓝色<br>&nbsp;&nbsp;a = alpha 透明度</blockquote>",
        "RGB 值可以在 0 到 255 之间。alpha 值可以在 0 到 1 之间，其中 0 代表完全透明，1 代表完全不透明。<code>rgba()</code>非常棒，因为你可以设置颜色的透明度，这意味着你可以做出一些很漂亮的半透明效果。",
        "在本挑战里你将会用到这个代码<code>background-color: rgba(45, 45, 45, 0.1)</code>。它表示背景是黑灰色，因为设置了透明度为 0.1，所以几乎是透明的。",
        "<hr>",
        "为了让文字更醒目，设置<code>h4</code>元素的<code>background-color</code>属性值为上面指定的<code>rgba()</code>。",
        "同时移除<code>h4</code>的<code>height</code>属性，并添加<code>padding</code>属性，值为 10px。"
      ],
      "tests": [
        {
          "text": "你的代码应该给<code>h4</code>元素添加一个<code>background-color</code>属性并且赋值<code>rgba(45, 45, 45, 0.1)</code>。",
          "testString": "assert(code.match(/background-color:\\s*?rgba\\(\\s*?45\\s*?,\\s*?45\\s*?,\\s*?45\\s*?,\\s*?0?\\.1\\s*?\\)/gi), '你的代码应该给<code>h4</code>元素添加一个<code>background-color</code>属性并且赋值<code>rgba(45, 45, 45, 0.1)</code>。');"
        },
        {
          "text": "你的代码应该给<code>h4</code>元素添加一个<code>padding</code>属性并且赋值<code>10px</code>。",
          "testString": "assert($('h4').css('padding-top') == '10px' && $('h4').css('padding-right') == '10px' && $('h4').css('padding-bottom') == '10px' && $('h4').css('padding-left') == '10px', '你的代码应该给<code>h4</code>元素添加一个<code>padding</code>属性并且赋值<code>10px</code>。');"
        },
        {
          "text": "<code>h4</code>元素的<code>height</code>属性应该被移除。",
          "testString": "assert(!($('h4').css('height') == '25px'), '<code>h4</code>元素的<code>height</code>属性应该被移除。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  h4 {",
            "    text-align: center;",
            "    height: 25px;",
            "    ",
            "    ",
            "  }",
            "  p {",
            "    text-align: justify;",
            "  }",
            "  .links {",
            "    text-align: left;",
            "    color: black;",
            "  }",
            "  .fullCard {",
            "    width: 245px;",
            "    border: 1px solid #ccc;",
            "    border-radius: 5px;",
            "    margin: 10px 5px;",
            "    padding: 4px;",
            "  }",
            "  .cardContent {",
            "    padding: 10px;",
            "  }",
            "  .cardText {",
            "    margin-bottom: 30px;",
            "  }",
            "</style>",
            "<div class=\"fullCard\">",
            "  <div class=\"cardContent\">",
            "    <div class=\"cardText\">",
            "      <h4>Alphabet</h4>",
            "      <hr>",
            "      <p><em>Google 由在<strong>斯坦福大学</strong>攻读<u>理工博士</u>的拉里·佩奇和谢尔盖·布林共同创建。</em></p>",
            "    </div>",
            "    <div class=\"cardLinks\">",
            "      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">拉里·佩奇</a><br><br>",
            "      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">谢尔盖·布林</a>",
            "    </div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d781b367417b2b2512abd",
      "title": "Adjust the Size of a Header Versus a Paragraph Tag",
      "description": [
        "标题（<code>h1</code>到<code>h6</code>）的文字应该比的段落的文字大，这样可以让用户更直观的看到页面的布局，同时能区别出不同元素的重要程度，更方便用户捕捉关键的信息。你可以使用<code>font-size</code>属性来设置元素内文字的大小。",
        "<hr>",
        "把<code>h4</code>标签的<code>font-size</code>改成 27 像素，让标题更醒目。"
      ],
      "tests": [
        {
          "text": "你的代码应该给<code>h4</code>元素添加一个<code>font-size</code>属性并且赋值<code>27px</code>。",
          "testString": "assert($('h4').css('font-size') == '27px', '你的代码应该给<code>h4</code>元素添加一个<code>font-size</code>属性并且赋值<code>27px</code>。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  h4 {",
            "    text-align: center;",
            "    background-color: rgba(45, 45, 45, 0.1);",
            "    padding: 10px;",
            "    ",
            "  }",
            "  p {",
            "    text-align: justify;",
            "  }",
            "  .links {",
            "    text-align: left;",
            "    color: black;",
            "  }",
            "  .fullCard {",
            "    width: 245px;",
            "    border: 1px solid #ccc;",
            "    border-radius: 5px;",
            "    margin: 10px 5px;",
            "    padding: 4px;",
            "  }",
            "  .cardContent {",
            "    padding: 10px;",
            "  }",
            "  .cardText {",
            "    margin-bottom: 30px;",
            "  }",
            "</style>",
            "<div class=\"fullCard\">",
            "  <div class=\"cardContent\">",
            "    <div class=\"cardText\">",
            "      <h4>Alphabet</h4>",
            "      <hr>",
            "      <p><em>Google 由在<strong>斯坦福大学</strong>攻读<u>理工博士</u>的拉里·佩奇和谢尔盖·布林共同创建。</em></p>",
            "    </div>",
            "    <div class=\"cardLinks\">",
            "      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">拉里·佩奇</a><br><br>",
            "      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">谢尔盖·布林</a>",
            "    </div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d781b367417b2b2512abe",
      "title": "Add a box-shadow to a Card-like Element",
      "description": [
        "<code>box-shadow</code>属性用来给元素添加阴影，该属性值是由逗号分隔的一个或多个阴影列表。",
        "<code>box-shadow</code>属性的每个阴影依次由下面这些值描述：<ul><li><code>offset-x</code>阴影的水平偏移量；</li><li><code>offset-y</code>阴影的垂直偏移量;</li><li><code>blur-radius</code>模糊距离；</li><li><code>spread-radius</code>阴影尺寸；</li><li>颜色。</li></ul>其中<code>blur-raduis</code>和<code>spread-raduis</code>是可选的。",
        "下面是创建了多个阴影的 CSS 例子，阴影加了模糊效果，颜色是透明度很高的黑色:",
        "<blockquote>box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);</blockquote>",
        "<hr>",
        "现在卡片已经添加了 id<code>thumbnail</code>。把上面的<code>box-shadow</code>值赋给卡片。"
      ],
      "tests": [
        {
          "text": "你的代码应该给 id 为<code>thumbnail</code>的元素添加<code>box-shadow</code>属性。",
          "testString": "assert(code.match(/#thumbnail\\s*?{\\s*?box-shadow/g), '你的代码应该给 id 为<code>thumbnail</code>的元素添加<code>box-shadow</code>属性。');"
        },
        {
          "text": "<code>box-shadow</code>值应该是指定的 CSS 值。",
          "testString": "assert(code.match(/box-shadow:\\s*?0\\s+?10px\\s+?20px\\s+?rgba\\(\\s*?0\\s*?,\\s*?0\\s*?,\\s*?0\\s*?,\\s*?0?\\.19\\),\\s*?0\\s+?6px\\s+?6px\\s+?rgba\\(\\s*?0\\s*?,\\s*?0\\s*?,\\s*?0\\s*?,\\s*?0?\\.23\\)/gi), '<code>box-shadow</code>值应该是指定的 CSS 值。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  h4 {",
            "    text-align: center;",
            "    background-color: rgba(45, 45, 45, 0.1);",
            "    padding: 10px;",
            "    font-size: 27px;",
            "  }",
            "  p {",
            "    text-align: justify;",
            "  }",
            "  .links {",
            "    text-align: left;",
            "    color: black;",
            "  }",
            "  ",
            "  ",
            "  ",
            "  .fullCard {",
            "    width: 245px;",
            "    border: 1px solid #ccc;",
            "    border-radius: 5px;",
            "    margin: 10px 5px;",
            "    padding: 4px;",
            "  }",
            "  .cardContent {",
            "    padding: 10px;",
            "  }",
            "  .cardText {",
            "    margin-bottom: 30px;",
            "  }",
            "</style>",
            "<div class=\"fullCard\" id=\"thumbnail\">",
            "  <div class=\"cardContent\">",
            "    <div class=\"cardText\">",
            "      <h4>Alphabet</h4>",
            "      <hr>",
            "      <p><em>Google 由在<strong>斯坦福大学</strong>攻读<u>理工博士</u>的拉里·佩奇和谢尔盖·布林共同创建。</em></p>",
            "    </div>",
            "    <div class=\"cardLinks\">",
            "      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">拉里·佩奇</a><br><br>",
            "      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">谢尔盖·布林</a>",
            "    </div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d781c367417b2b2512abf",
      "title": "Decrease the Opacity of an Element",
      "description": [
        "CSS 里的<code>opacity</code>属性用来设置元素的透明度。",
        "<blockquote>值 1 代表完全不透明。<br>值 0.5 代表半透明。<br>值 0 代表完全透明。</blockquote>",
        "透明度会应用到元素内的所有内容，不论是图片，还是文本，或是背景色。",
        "<hr>",
        "使用<code>links</code>class 选择所有的超链接并设置其<code>opacity</code>值为 0.7。"
      ],
      "tests": [
        {
          "text": "你的代码应该使用<code>links</code>class 选择所有的超链接并设置其<code>opacity</code>值为 0.7。",
          "testString": "assert.approximately(parseFloat($('.links').css('opacity')), 0.7, 0.1, '你的代码应该使用<code>links</code>class 选择所有的超链接并设置其<code>opacity</code>值为 0.7。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  h4 {",
            "    text-align: center;",
            "    background-color: rgba(45, 45, 45, 0.1);",
            "    padding: 10px;",
            "    font-size: 27px;",
            "  }",
            "  p {",
            "    text-align: justify;",
            "  }",
            "  .links {",
            "    text-align: left;",
            "    color: black;",
            "    ",
            "  }",
            "  #thumbnail {",
            "    box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);",
            "  }",
            "  .fullCard {",
            "    width: 245px;",
            "    border: 1px solid #ccc;",
            "    border-radius: 5px;",
            "    margin: 10px 5px;",
            "    padding: 4px;",
            "  }",
            "  .cardContent {",
            "    padding: 10px;",
            "  }",
            "  .cardText {",
            "    margin-bottom: 30px;",
            "  }",
            "</style>",
            "<div class=\"fullCard\" id=\"thumbnail\">",
            "  <div class=\"cardContent\">",
            "    <div class=\"cardText\">",
            "      <h4>Alphabet</h4>",
            "      <hr>",
            "      <p><em>Google 由在<strong>斯坦福大学</strong>攻读<u>理工博士</u>的拉里·佩奇和谢尔盖·布林共同创建。</em></p>",
            "    </div>",
            "    <div class=\"cardLinks\">",
            "      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">拉里·佩奇</a><br><br>",
            "      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">谢尔盖·布林</a>",
            "    </div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d781c367417b2b2512ac0",
      "title": "Use the text-transform Property to Make Text Uppercase",
      "description": [
        "CSS 里面的<code>text-transform</code>属性来改变英文中字母的大小写。它通常用来统一页面里英文的显示，且无需直接改变 HTML 元素中的文本。",
        "下面的表格展示了<code>text-transform</code>的不同值对文字 “Transform me” 的影响。",
        "<table class=\"table table-striped\"><thead><th>Value<th>Result<tbody><tr><td><code>lowercase</code><td>\"transform me\"<tr><td><code>uppercase</code><td>\"TRANSFORM ME\"<tr><td><code>capitalize</code><td>\"Transform Me\"<tr><td><code>initial</code><td>使用默认值<tr><td><code>inherit</code><td>使用父元素的<code>text-transform</code>值。<tr><td><code>none</code><td><strong>Default:</strong>不改变文字。</td></table>",
        "<hr>",
        "使用<code>text-transform</code>属性把<code>h4</code>内的英文的所有字母变成大写。"
      ],
      "tests": [
        {
          "text": "<code>h4</code>内的英文的所有字母应该为大写。",
          "testString": "assert($('h4').css('text-transform') === 'uppercase', '<code>h4</code>内的英文的所有字母应该为大写。');"
        },
        {
          "text": "<code>h4</code>内的原文不能被改变。",
          "testString": "assert(($('h4').text() !== $('h4').text().toUpperCase()), '<code>h4</code>内的原文不能被改变。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  h4 {",
            "    text-align: center;",
            "    background-color: rgba(45, 45, 45, 0.1);",
            "    padding: 10px;",
            "    font-size: 27px;",
            "    ",
            "  }",
            "  p {",
            "    text-align: justify;",
            "  }",
            "  .links {",
            "    text-align: left;",
            "    color: black;",
            "    opacity: 0.7;",
            "  }",
            "  #thumbnail {",
            "    box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);",
            "  }",
            "  .fullCard {",
            "    width: 245px;",
            "    border: 1px solid #ccc;",
            "    border-radius: 5px;",
            "    margin: 10px 5px;",
            "    padding: 4px;",
            "  }",
            "  .cardContent {",
            "    padding: 10px;",
            "  }",
            "  .cardText {",
            "    margin-bottom: 30px;",
            "  }",
            "</style>",
            "<div class=\"fullCard\" id=\"thumbnail\">",
            "  <div class=\"cardContent\">",
            "    <div class=\"cardText\">",
            "      <h4>Alphabet</h4>",
            "      <hr>",
            "      <p><em>Google 由在<strong>斯坦福大学</strong>攻读<u>理工博士</u>的拉里·佩奇和谢尔盖·布林共同创建。</em></p>",
            "    </div>",
            "    <div class=\"cardLinks\">",
            "      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">拉里·佩奇</a><br><br>",
            "      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">谢尔盖·布林</a>",
            "    </div>",
            "  </div>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d781c367417b2b2512ac2",
      "title": "Set the font-size for Multiple Heading Elements",
      "description": [
        "<code>font-size</code>属性用来指定元素内文字的大小。这个规则可以应用到多个元素上，合理的使用，能让页面的文字显示的错落有致。在本挑战里，你将要设置<code>h1</code>到<code>h6</code>的每个标题文字的大小。",
        "<hr>",
        "<ul><li>设置<code>h1</code>标签的<code>font-size</code>为 68px。</li><li>设置<code>h2</code>标签的<code>font-size</code>为 52px。</li><li>设置<code>h3</code>标签的<code>font-size</code>为 40px。</li><li>设置<code>h4</code>标签的<code>font-size</code>为 32px。</li><li>设置<code>h5</code>标签的<code>font-size</code>为 21px。</li><li>设置<code>h6</code>标签的<code>font-size</code>为 14px。</li></ul>"
      ],
      "tests": [
        {
          "text": "你的代码应该设置<code>h1</code>标签的<code>font-size</code>为<code>68px</code>。",
          "testString": "assert($('h1').css('font-size') == '68px', '你的代码应该设置<code>h1</code>标签的<code>font-size</code>为<code>68px</code>。');"
        },
        {
          "text": "你的代码应该设置<code>h2</code>标签的<code>font-size</code>为<code>52px</code>。",
          "testString": "assert($('h2').css('font-size') == '52px', '你的代码应该设置<code>h2</code>标签的<code>font-size</code>为<code>52px</code>。');"
        },
        {
          "text": "你的代码应该设置<code>h3</code>标签的<code>font-size</code>为<code>40px</code>。",
          "testString": "assert($('h3').css('font-size') == '40px', '你的代码应该设置<code>h3</code>标签的<code>font-size</code>为<code>40px</code>。');"
        },
        {
          "text": "你的代码应该设置<code>h4</code>标签的<code>font-size</code>为<code>32px</code>。",
          "testString": "assert($('h4').css('font-size') == '32px', '你的代码应该设置<code>h4</code>标签的<code>font-size</code>为<code>32px</code>。');"
        },
        {
          "text": "你的代码应该设置<code>h5</code>标签的<code>font-size</code>为<code>21px</code>。",
          "testString": "assert($('h5').css('font-size') == '21px', '你的代码应该设置<code>h6</code>标签的<code>font-size</code>为<code>21px</code>。');"
        },
        {
          "text": "你的代码应该设置<code>h6</code>标签的<code>font-size</code>为<code>14px</code>。",
          "testString": "assert($('h6').css('font-size') == '14px', '你的代码应该设置<code>h6</code>标签的<code>font-size</code>为<code>14px</code>。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  ",
            "  ",
            "  ",
            "  ",
            "  ",
            "  ",
            "</style>",
            "<h1>我是 h1 文字</h1>",
            "<h2>我是 h2 文字</h2>",
            "<h3>我是 h3 文字</h3>",
            "<h4>我是 h4 文字</h4>",
            "<h5>我是 h5 文字</h5>",
            "<h6>我是 h6 文字</h6>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d781c367417b2b2512ac3",
      "title": "Set the font-weight for Multiple Heading Elements",
      "description": [
        "在上一个挑战里你已经设置了每个标题的<code>font-size</code>，接下来你将设置<code>font-weight</code>。",
        "<code>font-weight</code>属性用于设置文本中所用的字体的粗细。",
        "<hr>",
        "<ul><li>设置<code>h1</code>标签的<code>font-weight</code>为 800。</li><li>设置<code>h2</code>标签的<code>font-weight</code>为 600。</li><li>设置<code>h3</code>标签的<code>font-weight</code>为 500。</li><li>设置<code>h4</code>标签的<code>font-weight</code>为 400。</li><li>设置<code>h5</code>标签的<code>font-weight</code>为 300。</li><li>设置<code>h6</code>标签的<code>font-weight</code>为 200。</li></ul>"
      ],
      "tests": [
        {
          "text": "你的代码应该设置<code>h1</code>标签的<code>font-weight</code>为 800。",
          "testString": "assert($('h1').css('font-weight') == '800', '你的代码应该设置<code>h1</code>标签的<code>font-weight</code>为 800。');"
        },
        {
          "text": "你的代码应该设置<code>h2</code>标签的<code>font-weight</code>为 600。",
          "testString": "assert($('h2').css('font-weight') == '600', '你的代码应该设置<code>h2</code>标签的<code>font-weight</code>为 600。');"
        },
        {
          "text": "你的代码应该设置<code>h3</code>标签的<code>font-weight</code>为 500。",
          "testString": "assert($('h3').css('font-weight') == '500', '你的代码应该设置<code>h3</code>标签的<code>font-weight</code>为 500。');"
        },
        {
          "text": "你的代码应该设置<code>h4</code>标签的<code>font-weight</code>为 400。",
          "testString": "assert($('h4').css('font-weight') == '400', '你的代码应该设置<code>h4</code>标签的<code>font-weight</code>为 400。');"
        },
        {
          "text": "你的代码应该设置<code>h5</code>标签的<code>font-weight</code>为 300。",
          "testString": "assert($('h5').css('font-weight') == '300', '你的代码应该设置<code>h5</code>标签的<code>font-weight</code>为 300。');"
        },
        {
          "text": "你的代码应该设置<code>h6</code>标签的<code>font-weight</code>为 200。",
          "testString": "assert($('h6').css('font-weight') == '200', '你的代码应该设置<code>h6</code>标签的<code>font-weight</code>为 200。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  h1 {",
            "    font-size: 68px;",
            "    ",
            "  }",
            "  h2 {",
            "    font-size: 52px;",
            "    ",
            "  }",
            "  h3 {",
            "    font-size: 40px;",
            "    ",
            "  }",
            "  h4 {",
            "    font-size: 32px;",
            "    ",
            "  }",
            "  h5 {",
            "    font-size: 21px;",
            "    ",
            "  }",
            "  h6 {",
            "    font-size: 14px;",
            "    ",
            "  }",
            "</style>",
            "<h1>我是 h1 文字</h1>",
            "<h2>我是 h2 文字</h2>",
            "<h3>我是 h3 文字</h3>",
            "<h4>我是 h4 文字</h4>",
            "<h5>我是 h5 文字</h5>",
            "<h6>我是 h6 文字</h6>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d781c367417b2b2512ac4",
      "title": "Set the font-size of Paragraph Text",
      "description": [
        "CSS 里面的<code>font-size</code>属性不只限于标题，它可以应用于任何包含文字的元素内。",
        "<hr>",
        "把段落的<code>font-size</code>设置为 16px 让它看起来更清晰。"
      ],
      "tests": [
        {
          "text": "你的<code>p</code>标签应该包含一个<code>font-size</code>属性并且值为<code>16px</code>。",
          "testString": "assert($('p').css('font-size') == '16px', '你的<code>p</code>标签应该包含一个<code>font-size</code>属性并且值为<code>16px</code>。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  p {",
            "    font-size: 10px;",
            "  }",
            "</style>",
            "<p>",
            "  天地玄黄　宇宙洪荒　日月盈昃　辰宿列张　寒来暑往　秋收冬藏　闰余成岁　律召调阳　云腾致雨　露结为霜　金生丽水　玉出昆冈　剑号巨阙　珠称夜光　果珍李柰　菜重芥姜　海咸河淡　鳞潜羽翔　龙师火帝　鸟官人皇　始制文字　乃服衣裳　推位让国　有虞陶唐　吊民伐罪　周发殷汤　坐朝问道　垂拱平章　爱育黎首　臣伏戎羌　遐迩壹体　率宾归王　鸣凤在树　白驹食场　化被草木　赖及万方　盖此身发　四大五常　恭惟鞠养　岂敢毁伤　女慕贞絜　男效才良　知过必改　得能莫忘　罔谈彼短　靡恃己长　信使可覆　器欲难量　墨悲丝染　诗讃羔羊",
            "</p>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d781d367417b2b2512ac5",
      "title": "Set the line-height of Paragraphs",
      "description": [
        "CSS 提供<code>line-height</code>属性来设置行间的距离。行高，顾名思义，用来设置每行文字所占据的垂直空间。",
        "<hr>",
        "给<code>p</code>标签添加<code>line-height</code>属性并赋值 25px。"
      ],
      "tests": [
        {
          "text": "你的代码应该给<code>p</code>标签添加<code>line-height</code>属性并赋值<code>25px</code>。",
          "testString": "assert($('p').css('line-height') == '25px', '你的代码应该给<code>p</code>标签添加<code>line-height</code>属性并赋值<code>25px</code>。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  p {",
            "    font-size: 16px;",
            "    ",
            "  }",
            "</style>",
            "<p>",
            "  天地玄黄　宇宙洪荒　日月盈昃　辰宿列张　寒来暑往　秋收冬藏　闰余成岁　律召调阳　云腾致雨　露结为霜　金生丽水　玉出昆冈　剑号巨阙　珠称夜光　果珍李柰　菜重芥姜　海咸河淡　鳞潜羽翔　龙师火帝　鸟官人皇　始制文字　乃服衣裳　推位让国　有虞陶唐　吊民伐罪　周发殷汤　坐朝问道　垂拱平章　爱育黎首　臣伏戎羌　遐迩壹体　率宾归王　鸣凤在树　白驹食场　化被草木　赖及万方　盖此身发　四大五常　恭惟鞠养　岂敢毁伤　女慕贞絜　男效才良　知过必改　得能莫忘　罔谈彼短　靡恃己长　信使可覆　器欲难量　墨悲丝染　诗讃羔羊",
            "</p>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d781d367417b2b2512ac8",
      "title": "Adjust the Hover State of an Anchor Tag",
      "description": [
        "本挑战将要涉及到伪类。伪类是可以添加到选择器上的关键字，用来选择元素的指定状态。",
        "比如，超链接可以使用<code>:hover</code>伪类选择器定义它的悬停状态样式。下面是悬停超链接时改变超链接颜色的 CSS：",
        "<blockquote>a:hover {<br>&nbsp;&nbsp;color: red;<br>}</blockquote>",
        "<hr>",
        "代码编辑器里面已经有了一个 CSS 规则把所有的<code>a</code>标签定义成了黑色。添加一个规则，满足如下，当用户悬停<code>a</code>标签时，把<code>color</code>变成蓝色。"
      ],
      "tests": [
        {
          "text": "超链接的<code>color</code>应该保持黑色，只添加<code>:hover</code> CSS 规则。",
          "testString": "assert($('a').css('color') == 'rgb(0, 0, 0)', '超链接的<code>color</code>应该保持黑色，只添加<code>:hover</code> CSS 规则。');"
        },
        {
          "text": "悬停超链接时超链接<code>color</code>应该变成蓝色。",
          "testString": "assert(code.match(/a:hover\\s*?{\\s*?color:\\s*?blue;\\s*?}/gi), '悬停超链接时超链接<code>color</code>应该变成蓝色。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  a {",
            "    color: #000;",
            "  }",
            "  ",
            "  ",
            "  ",
            "</style>",
            "<a href=\"http://freecatphotoapp.com/\" target=\"_blank\">猫咪相册 App</a>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d781e367417b2b2512ac9",
      "title": "改变元素的相对位置（Relative Position）",
      "description": [
        "在 CSS 里一切 HTML 元素皆为盒子，也就是通常所说的<code>盒模型</code>。块级元素自动从新的一行开始（比如标题、段落以及 div），行内元素排列在上一个元素后（比如图片以及 span）。元素默认按照这种方式布局称为文档的<code>普通流</code>，同时 CSS 提供了 position 属性来覆盖它。",
        "当元素的 position 设置为<code>relative</code>时，它允许你通过 CSS 指定该元素在当前普通流页面下的相对偏移量。 CSS 里控制各个方向偏移量的对应的属性是<code>left</code>、<code>right</code>、<code>top</code>和<code>bottom</code>。它们代表着从原来的位置向对应的方向偏移指定的像素、百分比或者 ems。下面的例子展示了段落向上偏移 10 像素：",
        "<blockquote>p {<br>&nbsp;&nbsp;position: relative;<br>&nbsp;&nbsp;bottom: 10px;<br>}</blockquote>",
        "把元素的 position 设置成 relative 并不会改变该元素在普通流布局所占的位置，也不会对其它元素的位置产生影响。",
        "<strong>注意</strong><br>定位可以让你在页面布局上更灵活、高效。注意不管元素的定位是怎样，内部的 HTML 代码阅读起来应该是整洁、有意义的。这样也可以让视障人员（他们重度依赖辅助设备比如屏幕阅读软件）能够浏览你的网页。",
        "<hr>",
        "把<code>h2</code>的<code>position</code>设置成<code>relative</code>，使用相应的 CSS 属性调整<code>h2</code>的位置，使其向上偏移 15 像素，同时还在普通流中占据原来的位置。注意不要对 h1 和 p 元素的位置产生影响。"
      ],
      "tests": [
        {
          "text": "<code>h2</code>元素应该添加<code>position</code>属性并赋值<code>relative</code>。",
          "testString": "assert($('h2').css('position') == 'relative', '<code>h2</code>元素应该添加<code>position</code>属性并赋值<code>relative</code>。');"
        },
        {
          "text": "你的代码应该使用 CSS 属性调整<code>h2</code>的位置使其从原来的位置向上偏移<code>15px</code>。",
          "testString": "assert($('h2').css('top') == '15px', '你的代码应该使用 CSS 属性调整<code>h2</code>的位置使其从原来的位置向上偏移<code>15px</code>。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  h2 {",
            "    ",
            "    ",
            "  }",
            "</style>",
            "<body>",
            "  <h1>论如何优雅定位</h1>",
            "  <h2>我要离 h1 近一点！</h2>",
            "  <p>我觉得 h2 没变，还是在它原来的位置，相离莫相忘，且行且珍惜。</p>",
            "</body>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d781e367417b2b2512aca",
      "title": "Move a Relatively Positioned Element with CSS Offsets",
      "description": [
        "The CSS offsets of <code>top</code> or <code>bottom</code>, and <code>left</code> or <code>right</code> tell the browser how far to offset an item relative to where it would sit in the normal flow of the document. You're offsetting an element away from a given spot, which moves the element away from the referenced side (effectively, the opposite direction). As you saw in the last challenge, using the top offset moved the <code>h2</code> downwards. Likewise, using a left offset moves an item to the right.",
        "<img src='https://i.imgur.com/eWWi3gZ.gif' alt='' />",
        "<hr>",
        "Use CSS offsets to move the <code>h2</code> 15 pixels to the right and 10 pixels up."
      ],
      "tests": [
        {
          "text": "Your code should use a CSS offset to relatively position the <code>h2</code> 10px upwards. In other words, move it 10px away from the <code>bottom</code> of where it normally sits.",
          "testString": "assert($('h2').css('bottom') == '10px', 'Your code should use a CSS offset to relatively position the <code>h2</code> 10px upwards. In other words, move it 10px away from the <code>bottom</code> of where it normally sits.');"
        },
        {
          "text": "Your code should use a CSS offset to relatively position the <code>h2</code> 15px towards the right. In other words, move it 15px away from the <code>left</code> of where it normally sits.",
          "testString": "assert($('h2').css('left') == '15px', 'Your code should use a CSS offset to relatively position the <code>h2</code> 15px towards the right. In other words, move it 15px away from the <code>left</code> of where it normally sits.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<head>",
            "<style>",
            "  h2 {",
            "    position: relative;",
            "    ",
            "    ",
            "  }",
            "</style>",
            "</head>",
            "<body>",
            "  <h1>On Being Well-Positioned</h1>",
            "  <h2>Move me!</h2>",
            "  <p>I still think the h2 is where it normally sits.</p>",
            "</body>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d781e367417b2b2512acb",
      "title": "Lock an Element to its Parent with Absolute Positioning",
      "description": [
        "The next option for the CSS <code>position</code> property is <code>absolute</code>, which locks the element in place relative to its parent container. Unlike the <code>relative</code> position, this removes the element from the normal flow of the document, so surrounding items ignore it. The CSS offset properties (top or bottom and left or right) are used to adjust the position.",
        "One nuance with absolute positioning is that it will be locked relative to its closest <em>positioned</em> ancestor. If you forget to add a position rule to the parent item, (this is typically done using <code>position: relative;</code>), the browser will keep looking up the chain and ultimately default to the body tag.",
        "<hr>",
        "Lock the <code>#searchbar</code> element to the top-right of its <code>section</code> parent by declaring its <code>position</code> as <code>absolute</code>. Give it <code>top</code> and <code>right</code> offsets of 50 pixels each."
      ],
      "tests": [
        {
          "text": "The <code>#searchbar</code> element should have a <code>position</code> set to <code>absolute</code>.",
          "testString": "assert($('#searchbar').css('position') == 'absolute', 'The <code>#searchbar</code> element should have a <code>position</code> set to <code>absolute</code>.');"
        },
        {
          "text": "Your code should use the <code>top</code> CSS offset of 50 pixels on the <code>#searchbar</code> element.",
          "testString": "assert($('#searchbar').css('top') == '50px', 'Your code should use the <code>top</code> CSS offset of 50 pixels on the <code>#searchbar</code> element.');"
        },
        {
          "text": "Your code should use the <code>right</code> CSS offset of 50 pixels on the <code>#searchbar</code> element.",
          "testString": "assert($('#searchbar').css('right') == '50px', 'Your code should use the <code>right</code> CSS offset of 50 pixels on the <code>#searchbar</code> element.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  #searchbar {",
            "    ",
            "    ",
            "    ",
            "  }",
            "  section {",
            "    position: relative;",
            "  }",
            "</style>",
            "<body>",
            "  <h1>Welcome!</h1>",
            "  <section>",
            "    <form id=\"searchbar\">",
            "      <label for=\"search\">Search:</label>",
            "      <input type=\"search\" id=\"search\" name=\"search\">",
            "      <input type=\"submit\" name=\"submit\" value=\"Go!\">",
            "    </form>",
            "  </section>",
            "</body>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d781e367417b2b2512acc",
      "title": "Lock an Element to the Browser Window with Fixed Positioning",
      "description": [
        "The next layout scheme that CSS offers is the <code>fixed</code> position, which is a type of absolute positioning that locks an element relative to the browser window. Similar to absolute positioning, it's used with the CSS offset properties and also removes the element from the normal flow of the document. Other items no longer \"realize\" where it is positioned, which may require some layout adjustments elsewhere.",
        "One key difference from the <code>absolute</code> position is that the element won't move when the user scrolls.",
        "<hr>",
        "The navigation bar in the code is labeled with an id of <code>navbar</code>. Change its <code>position</code> to <code>fixed</code>, and offset it 0 pixels from the <code>top</code> and 0 pixels from the <code>left</code>. Notice the (lack of) impact to the <code>h1</code> position, it hasn't been pushed down to accommodate the navigation bar and would need to be adjusted separately."
      ],
      "tests": [
        {
          "text": "The <code>#navbar</code> element should have a <code>position</code> set to <code>fixed</code>.",
          "testString": "assert($('#navbar').css('position') == 'fixed', 'The <code>#navbar</code> element should have a <code>position</code> set to <code>fixed</code>.');"
        },
        {
          "text": "Your code should use the <code>top</code> CSS offset of 0 pixels on the <code>#navbar</code> element.",
          "testString": "assert($('#navbar').css('top') == '0px', 'Your code should use the <code>top</code> CSS offset of 0 pixels on the <code>#navbar</code> element.');"
        },
        {
          "text": "Your code should use the <code>left</code> CSS offset of 0 pixels on the <code>#navbar</code> element.",
          "testString": "assert($('#navbar').css('left') == '0px', 'Your code should use the <code>left</code> CSS offset of 0 pixels on the <code>#navbar</code> element.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  #navbar {",
            "    ",
            "    ",
            "    ",
            "    width: 100%;",
            "    background-color: #767676;",
            "  }",
            "  nav ul {",
            "    margin: 0px;",
            "    padding: 5px 0px 5px 30px;",
            "  }",
            "  nav li {",
            "    display: inline;",
            "    margin-right: 20px;",
            "  }",
            "  a {",
            "    text-decoration: none;",
            "  }",
            "</style>",
            "<body>",
            "  <header>",
            "    <h1>Welcome!</h1>",
            "    <nav id=\"navbar\">",
            "      <ul>",
            "        <li><a href=\"\">Home</a></li>",
            "        <li><a href=\"\">Contact</a></li>",
            "      </ul>",
            "    </nav>",
            "  </header>",
            "  <p>I shift up when the #navbar is fixed to the browser window.</p>",
            "</body>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a3367417b2b2512ace",
      "title": "Push Elements Left or Right with the float Property",
      "description": [
        "The next positioning tool does not actually use <code>position</code>, but sets the <code>float</code> property of an element. Floating elements are removed from the normal flow of a document and pushed to either the <code>left</code> or <code>right</code> of their containing parent element. It's commonly used with the <code>width</code> property to specify how much horizontal space the floated element requires.",
        "<hr>",
        "The given markup would work well as a two-column layout, with the <code>section</code> and <code>aside</code> elements next to each other. Give the <code>#left</code> item a <code>float</code> of <code>left</code> and the <code>#right</code> item a <code>float</code> of <code>right</code>."
      ],
      "tests": [
        {
          "text": "The element with id <code>left</code> should have a <code>float</code> value of <code>left</code>.",
          "testString": "assert($('#left').css('float') == 'left', 'The element with id <code>left</code> should have a <code>float</code> value of <code>left</code>.');"
        },
        {
          "text": "The element with id <code>right</code> should have a <code>float</code> value of <code>right</code>.",
          "testString": "assert($('#right').css('float') == 'right', 'The element with id <code>right</code> should have a <code>float</code> value of <code>right</code>.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<head>",
            "  <style>",
            "  #left {",
            "    ",
            "    width: 50%;",
            "  }",
            "  #right {",
            "    ",
            "    width: 40%;",
            "  }",
            "  aside, section {",
            "    padding: 2px;",
            "    background-color: #ccc;",
            "  }",
            "  </style>",
            "</head>",
            "<body>",
            "  <header>",
            "    <h1>Welcome!</h1>",
            "  </header>",
            "  <section id=\"left\">",
            "    <h2>Content</h2>",
            "    <p>Good stuff</p>",
            "  </section>",
            "  <aside id=\"right\">",
            "    <h2>Sidebar</h2>",
            "    <p>Links</p>",
            "  </aside>",
            "</body>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a3367417b2b2512acf",
      "title": "Change the Position of Overlapping Elements with the z-index Property",
      "description": [
        "When elements are positioned to overlap, the element coming later in the HTML markup will, by default, appear on the top of the other elements. However, the <code>z-index</code> property can specify the order of how elements are stacked on top of one another. It must be an integer (i.e. a whole number and not a decimal), and higher values for the <code>z-index</code> property of an element move it higher in the stack than those with lower values.",
        "<hr>",
        "Add a <code>z-index</code> property to the element with the class name of <code>first</code> (the red rectangle) and set it to a value of 2 so it covers the other element (blue rectangle)."
      ],
      "tests": [
        {
          "text": "The element with class <code>first</code> should have a <code>z-index</code> value of 2.",
          "testString": "assert($('.first').css('z-index') == '2', 'The element with class <code>first</code> should have a <code>z-index</code> value of 2.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  div {",
            "    width: 60%;",
            "    height: 200px;",
            "    margin-top: 20px;",
            "  }",
            "  ",
            "  .first {",
            "    background-color: red;",
            "    position: absolute;",
            "    ",
            "  }",
            "  .second {",
            "    background-color: blue;",
            "    position: absolute;",
            "    left: 40px;",
            "    top: 50px;",
            "    z-index: 1;",
            "  }",
            "</style>",
            "",
            "<div class=\"first\"></div>",
            "<div class=\"second\"></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a3367417b2b2512ad0",
      "title": "Center an Element Horizontally Using the margin Property",
      "description": [
        "Another positioning technique is to center a block element horizontally. One way to do this is to set its <code>margin</code> to a value of auto.",
        "This method works for images, too. Images are inline elements by default, but can be changed to block elements when you set the <code>display</code> property to block.",
        "<hr>",
        "Center the <code>div</code> on the page by adding a <code>margin</code> property with a value of auto."
      ],
      "tests": [
        {
          "text": "The <code>div</code> should have a <code>margin</code> set to auto.",
          "testString": "assert(code.match(/margin:\\s*?auto;/g), 'The <code>div</code> should have a <code>margin</code> set to auto.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  div {",
            "    background-color: blue;",
            "    height: 100px;",
            "    width: 100px;",
            "    ",
            "  }",
            "</style>",
            "<div></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a3367417b2b2512ad1",
      "title": "Learn about Complementary Colors",
      "description": [
        "Color theory and its impact on design is a deep topic and only the basics are covered in the following challenges. On a website, color can draw attention to content, evoke emotions, or create visual harmony. Using different combinations of colors can really change the look of a website, and a lot of thought can go into picking a color palette that works with your content.",
        "The color wheel is a useful tool to visualize how colors relate to each other - it's a circle where similar hues are neighbors and different hues are farther apart. When two colors are opposite each other on the wheel, they are called complementary colors. They have the characteristic that if they are combined, they \"cancel\" each other out and create a gray color. However, when placed side-by-side, these colors appear more vibrant and produce a strong visual contrast.",
        "Some examples of complementary colors with their hex codes are:",
        "<blockquote>red (#FF0000) and cyan (#00FFFF)<br>green (#00FF00) and magenta (#FF00FF)<br>blue (#0000FF) and yellow (#FFFF00)</blockquote>",
        "There are many color picking tools available online that have an option to find the complement of a color.",
        "<strong>Note</strong><br>For all color challenges: Using color can be a powerful way to add visual interest to a page. However, color alone should not be used as the only way to convey important information because users with visual impairments may not understand that content. This issue will be covered in more detail in the Applied Accessibility challenges.",
        "<hr>",
        "Change the <code>background-color</code> property of the <code>blue</code> and <code>yellow</code> classes to their respective colors. Notice how the colors look different next to each other than they do compared against the white background."
      ],
      "tests": [
        {
          "text": "The <code>div</code> element with class <code>blue</code> should have a <code>background-color</code> of blue.",
          "testString": "assert($('.blue').css('background-color') == 'rgb(0, 0, 255)', 'The <code>div</code> element with class <code>blue</code> should have a <code>background-color</code> of blue.');"
        },
        {
          "text": "The <code>div</code> element with class <code>yellow</code> should have a <code>background-color</code> of yellow.",
          "testString": "assert($('.yellow').css('background-color') == 'rgb(255, 255, 0)', 'The <code>div</code> element with class <code>yellow</code> should have a <code>background-color</code> of yellow.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  body {",
            "    background-color: #FFFFFF;",
            "  }",
            "  .blue {",
            "    background-color: #000000;",
            "  }",
            "  .yellow {",
            "    background-color: #000000;",
            "  }",
            "  div {",
            "    display: inline-block;",
            "    height: 100px;",
            "    width: 100px;",
            "  }",
            "</style>",
            "<div class=\"blue\"></div>",
            "<div class=\"yellow\"></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a4367417b2b2512ad2",
      "title": "Learn about Tertiary Colors",
      "description": [
        "Computer monitors and device screens create different colors by combining amounts of red, green, and blue light. This is known as the RGB additive color model in modern color theory. Red (R), green (G), and blue (B) are called primary colors. Mixing two primary colors creates the secondary colors cyan (G + B), magenta (R + B) and yellow (R + G). You saw these colors in the Complementary Colors challenge. These secondary colors happen to be the complement to the primary color not used in their creation, and are opposite to that primary color on the color wheel. For example, magenta is made with red and blue, and is the complement to green.",
        "Tertiary colors are the result of combining a primary color with one of its secondary color neighbors. For example, red (primary) and yellow (secondary) make orange. This adds six more colors to a simple color wheel for a total of twelve.",
        "There are various methods of selecting different colors that result in a harmonious combination in design. One example that can use tertiary colors is called the split-complementary color scheme. This scheme starts with a base color, then pairs it with the two colors that are adjacent to its complement. The three colors provide strong visual contrast in a design, but are more subtle than using two complementary colors.",
        "Here are three colors created using the split-complement scheme:",
        "<table class=\"table table-striped\"><thead><tr><th>Color</th><th>Hex Code</th></tr><thead><tbody><tr><td>orange</td><td>#FF7D00</td></tr><tr><td>cyan</td><td>#00FFFF</td></tr><tr><td>raspberry</td><td>#FF007D</td></tr></tbody></table>",
        "<hr>",
        "Change the <code>background-color</code> property of the <code>orange</code>, <code>cyan</code>, and <code>raspberry</code> classes to their respective colors. Make sure to use the hex codes as orange and raspberry are not browser-recognized color names."
      ],
      "tests": [
        {
          "text": "The <code>div</code> element with class <code>orange</code> should have a <code>background-color</code> of orange.",
          "testString": "assert($('.orange').css('background-color') == 'rgb(255, 125, 0)', 'The <code>div</code> element with class <code>orange</code> should have a <code>background-color</code> of orange.');"
        },
        {
          "text": "The <code>div</code> element with class <code>cyan</code> should have a <code>background-color</code> of cyan.",
          "testString": "assert($('.cyan').css('background-color') == 'rgb(0, 255, 255)', 'The <code>div</code> element with class <code>cyan</code> should have a <code>background-color</code> of cyan.');"
        },
        {
          "text": "The <code>div</code> element with class <code>raspberry</code> should have a <code>background-color</code> of raspberry.",
          "testString": "assert($('.raspberry').css('background-color') == 'rgb(255, 0, 125)', 'The <code>div</code> element with class <code>raspberry</code> should have a <code>background-color</code> of raspberry.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  body {",
            "    background-color: #FFFFFF;",
            "  }",
            "  ",
            "  .orange {",
            "    background-color: #000000;",
            "  }",
            "  ",
            "  .cyan {",
            "    background-color: #000000;",
            "  }",
            "  ",
            "  .raspberry {",
            "    background-color: #000000;",
            "  }",
            "  ",
            "  div {",
            "    height: 100px;",
            "    width: 100px;",
            "    margin-bottom: 5px;",
            "  }",
            "</style>",
            "  ",
            "<div class=\"orange\"></div>",
            "<div class=\"cyan\"></div>",
            "<div class=\"raspberry\"></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a4367417b2b2512ad3",
      "title": "Adjust the Color of Various Elements to Complementary Colors",
      "description": [
        "The Complementary Colors challenge showed that opposite colors on the color wheel can make each other appear more vibrant when placed side-by-side. However, the strong visual contrast can be jarring if it's overused on a website, and can sometimes make text harder to read if it's placed on a complementary-colored background. In practice, one of the colors is usually dominant and the complement is used to bring visual attention to certain content on the page.",
        "<hr>",
        "This page will use a shade of teal (<code>#09A7A1</code>) as the dominant color, and its orange (<code>#FF790E</code>) complement to visually highlight the sign-up buttons. Change the <code>background-color</code> of both the <code>header</code> and <code>footer</code> from black to the teal color. Then change the <code>h2</code> text <code>color</code> to teal as well. Finally, change the <code>background-color</code> of the <code>button</code> to the orange color."
      ],
      "tests": [
        {
          "text": "The <code>header</code> element should have a <code>background-color</code> of #09A7A1.",
          "testString": "assert($('header').css('background-color') == 'rgb(9, 167, 161)', 'The <code>header</code> element should have a <code>background-color</code> of #09A7A1.');"
        },
        {
          "text": "The <code>footer</code> element should have a <code>background-color</code> of #09A7A1.",
          "testString": "assert($('footer').css('background-color') == 'rgb(9, 167, 161)', 'The <code>footer</code> element should have a <code>background-color</code> of #09A7A1.');"
        },
        {
          "text": "The <code>h2</code> element should have a <code>color</code> of #09A7A1.",
          "testString": "assert($('h2').css('color') == 'rgb(9, 167, 161)', 'The <code>h2</code> element should have a <code>color</code> of #09A7A1.');"
        },
        {
          "text": "The <code>button</code> element should have a <code>background-color</code> of #FF790E.",
          "testString": "assert($('button').css('background-color') == 'rgb(255, 121, 14)', 'The <code>button</code> element should have a <code>background-color</code> of #FF790E.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  body {",
            "    background-color: white;",
            "  }",
            "  header {",
            "    background-color: black;",
            "    color: white;",
            "    padding: 0.25em;",
            "  }",
            "  h2 {",
            "    color: black;",
            "  }  ",
            "  button {",
            "    background-color: white;",
            "  }",
            "  footer {",
            "    background-color: black;",
            "    color: white;",
            "    padding: 0.5em;",
            "  }",
            "</style>",
            "<header>",
            "  <h1>Cooking with FCC!</h1>",
            "</header>",
            "<main>",
            "  <article>",
            "    <h2>Machine Learning in the Kitchen</h2>",
            "    <p>Join this two day workshop that walks through how to implement cutting-edge snack-getting algorithms with a command line interface. Coding usually involves writing exact instructions, but sometimes you need your computer to execute flexible commands, like <code>fetch Pringles</code>.</p>",
            "    <button>Sign Up</button>",
            "  </article>",
            "  <article>",
            "    <h2>Bisection Vegetable Chopping</h2>",
            "    <p>This week-long retreat will level-up your coding ninja skills to actual ninja skills. No longer is the humble bisection search limited to sorted arrays or coding interview questions, applying its concepts in the kitchen will have you chopping carrots in O(log n) time before you know it.</p>",
            "    <button>Sign Up</button>",
            "  </article>",
            "</main>",
            "<br>",
            "<footer>&copy;2016 FCC Kitchen</footer>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a4367417b2b2512ad4",
      "title": "Adjust the Hue of a Color",
      "description": [
        "Colors have several characteristics including hue, saturation, and lightness. CSS3 introduced the <code>hsl()</code> property as an alternative way to pick a color by directly stating these characteristics.",
        "<b>Hue</b> is what people generally think of as 'color'. If you picture a spectrum of colors starting with red on the left, moving through green in the middle, and blue on right, the hue is where a color fits along this line. In <code>hsl()</code>, hue uses a color wheel concept instead of the spectrum, where the angle of the color on the circle is given as a value between 0 and 360.",
        "<b>Saturation</b> is the amount of gray in a color. A fully saturated color has no gray in it, and a minimally saturated color is almost completely gray. This is given as a percentage with 100% being fully saturated.",
        "<b>Lightness</b> is the amount of white or black in a color. A percentage is given ranging from 0% (black) to 100% (white), where 50% is the normal color.",
        "Here are a few examples of using <code>hsl()</code> with fully-saturated, normal lightness colors:",
        "<table class=\"table table-striped\"><thead><tr><th>Color</th><th>HSL</th></tr></thead><tbody><tr><td>red</td><td>hsl(0, 100%, 50%)</td></tr><tr><td>yellow</td><td>hsl(60, 100%, 50%)</td></tr><tr><td>green</td><td>hsl(120, 100%, 50%)</td></tr><tr><td>cyan</td><td>hsl(180, 100%, 50%)</td></tr><tr><td>blue</td><td>hsl(240, 100%, 50%)</td></tr><tr><td>magenta</td><td>hsl(300, 100%, 50%)</td></tr></tbody></table>",
        "<hr>",
        "Change the <code>background-color</code> of each <code>div</code> element based on the class names (<code>green</code>, <code>cyan</code>, or <code>blue</code>) using <code>hsl()</code>. All three should have full saturation and normal lightness."
      ],
      "tests": [
        {
          "text": "Your code should use the <code>hsl()</code> property to declare the color green.",
          "testString": "assert(code.match(/\\.green\\s*?{\\s*?background-color:\\s*?hsl/gi), 'Your code should use the <code>hsl()</code> property to declare the color green.');"
        },
        {
          "text": "Your code should use the <code>hsl()</code> property to declare the color cyan.",
          "testString": "assert(code.match(/\\.cyan\\s*?{\\s*?background-color:\\s*?hsl/gi), 'Your code should use the <code>hsl()</code> property to declare the color cyan.');"
        },
        {
          "text": "Your code should use the <code>hsl()</code> property to declare the color blue.",
          "testString": "assert(code.match(/\\.blue\\s*?{\\s*?background-color:\\s*?hsl/gi), 'Your code should use the <code>hsl()</code> property to declare the color blue.');"
        },
        {
          "text": "The <code>div</code> element with class <code>green</code> should have a <code>background-color</code> of green.",
          "testString": "assert($('.green').css('background-color') == 'rgb(0, 255, 0)', 'The <code>div</code> element with class <code>green</code> should have a <code>background-color</code> of green.');"
        },
        {
          "text": "The <code>div</code> element with class <code>cyan</code> should have a <code>background-color</code> of cyan.",
          "testString": "assert($('.cyan').css('background-color') == 'rgb(0, 255, 255)', 'The <code>div</code> element with class <code>cyan</code> should have a <code>background-color</code> of cyan.');"
        },
        {
          "text": "The <code>div</code> element with class <code>blue</code> should have a <code>background-color</code> of blue.",
          "testString": "assert($('.blue').css('background-color') == 'rgb(0, 0, 255)', 'The <code>div</code> element with class <code>blue</code> should have a <code>background-color</code> of blue.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  body {",
            "    background-color: #FFFFFF;",
            "  }",
            "  ",
            "  .green {",
            "    background-color: #000000;",
            "  }",
            "  ",
            "  .cyan {",
            "    background-color: #000000;",
            "  }",
            "  ",
            "  .blue {",
            "    background-color: #000000;",
            "  }",
            "  ",
            "  div {",
            "    display: inline-block;",
            "    height: 100px;",
            "    width: 100px;",
            "  }",
            "</style>",
            "  ",
            "<div class=\"green\"></div>",
            "<div class=\"cyan\"></div>",
            "<div class=\"blue\"></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a4367417b2b2512ad5",
      "title": "Adjust the Tone of a Color",
      "description": [
        "The <code>hsl()</code> option in CSS also makes it easy to adjust the tone of a color. Mixing white with a pure hue creates a tint of that color, and adding black will make a shade. Alternatively, a tone is produced by adding gray or by both tinting and shading. Recall that the 's' and 'l' of <code>hsl()</code> stand for saturation and lightness, respectively. The saturation percent changes the amount of gray and the lightness percent determines how much white or black is in the color. This is useful when you have a base hue you like, but need different variations of it.",
        "<hr>",
        "The navigation bar on this site currently inherits its <code>background-color</code> from the <code>header</code> element. Starting with that color as a base, add a <code>background-color</code> to the <code>nav</code> element so it uses the same cyan hue, but has 80% saturation and 25% lightness values to change its tone and shade."
      ],
      "tests": [
        {
          "text": "The <code>nav</code> element should have a <code>background-color</code> of the adjusted cyan tone using the <code>hsl()</code> property.",
          "testString": "assert(code.match(/nav\\s*?{\\s*?background-color:\\s*?hsl\\(180,\\s*?80%,\\s*?25%\\)/gi), 'The <code>nav</code> element should have a <code>background-color</code> of the adjusted cyan tone using the <code>hsl()</code> property.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  header {",
            "    background-color: hsl(180, 90%, 35%);",
            "    color: #FFFFFF;",
            "  }",
            "  ",
            "  nav {",
            "  ",
            "  }",
            "  ",
            "  h1 {",
            "    text-indent: 10px;",
            "    padding-top: 10px;",
            "  }",
            "  ",
            "  nav ul {",
            "    margin: 0px;",
            "    padding: 5px 0px 5px 30px;",
            "  }",
            "  ",
            "  nav li {",
            "    display: inline;",
            "    margin-right: 20px;",
            "  }",
            "  ",
            "  a {",
            "    text-decoration: none;",
            "    color: inherit;",
            "  }",
            "</style>",
            "  ",
            "<header>",
            "  <h1>Cooking with FCC!</h1>",
            "  <nav>",
            "    <ul>",
            "      <li><a href=\"\">Home</a></li>",
            "      <li><a href=\"\">Classes</a></li>",
            "      <li><a href=\"\">Contact</a></li>",
            "    </ul>",
            "  </nav>",
            "</header>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a5367417b2b2512ad6",
      "title": "Create a Gradual CSS Linear Gradient",
      "description": [
        "Applying a color on HTML elements is not limited to one flat hue. CSS provides the ability to use color transitions, otherwise known as gradients, on elements. This is accessed through the <code>background</code> property's <code>linear-gradient()</code> function. Here is the general syntax:",
        "<code>background: linear-gradient(gradient_direction, color 1, color 2, color 3, ...);</code>",
        "The first argument specifies the direction from which color transition starts - it can be stated as a degree, where 90deg makes a vertical gradient and 45deg is angled like a backslash. The following arguments specify the order of colors used in the gradient.",
        "Example:",
        "<code>background: linear-gradient(90deg, red, yellow, rgb(204, 204, 255));</code>",
        "<hr>",
        "Use a <code>linear-gradient()</code> for the <code>div</code> element's <code>background</code>, and set it from a direction of 35 degrees to change the color from <code>#CCFFFF</code> to <code>#FFCCCC</code>.",
        "<strong>Note</strong><br>While there are other ways to specify a color value, like <code>rgb()</code> or <code>hsl()</code>, use hex values for this challenge."
      ],
      "tests": [
        {
          "text": "The <code>div</code> element should have a <code>linear-gradient</code> <code>background</code> with the specified direction and colors.",
          "testString": "assert(code.match(/background:\\s*?linear-gradient\\(35deg,\\s*?(#CCFFFF|#CFF),\\s*?(#FFCCCC|#FCC)\\);/gi), 'The <code>div</code> element should have a <code>linear-gradient</code> <code>background</code> with the specified direction and colors.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "",
            "  div{ ",
            "    border-radius: 20px;",
            "    width: 70%;",
            "    height: 400px;",
            "    margin: 50px auto;",
            "    ",
            "  }",
            "",
            "</style>",
            "",
            "<div></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a5367417b2b2512ad7",
      "title": "Use a CSS Linear Gradient to Create a Striped Element",
      "description": [
        "The <code>repeating-linear-gradient()</code> function is very similar to <code>linear-gradient()</code> with the major difference that it repeats the specified gradient pattern. <code>repeating-linear-gradient()</code> accepts a variety of values, but for simplicity, you'll work with an angle value and color stop values in this challenge.",
        "The angle value is the direction of the gradient. Color stops are like width values that mark where a transition takes place, and are given with a percentage or a number of pixels.",
        "In the example demonstrated in the code editor, the gradient starts with the color <code>yellow</code> at 0 pixels which blends into the second color <code>blue</code> at 40 pixels away from the start. Since the next color stop is also at 40 pixels, the gradient immediately changes to the third color <code>green</code>, which itself blends into the fourth color value <code>red</code> as that is 80 pixels away from the beginning of the gradient.",
        "For this example, it helps to think about the color stops as pairs where every two colors blend together.",
        "<code>0px [yellow -- blend -- blue] 40px [green -- blend -- red] 80px</code>",
        "If every two color stop values are the same color, the blending isn't noticeable because it's between the same color, followed by a hard transition to the next color, so you end up with stripes.",
        "<hr>",
        "Make stripes by changing the <code>repeating-linear-gradient()</code> to use a gradient angle of <code>45deg</code>, then set the first two color stops to <code>yellow</code>, and finally the second two color stops to <code>black</code>."
      ],
      "tests": [
        {
          "text": "The angle of the <code>repeating-linear-gradient()</code> should be 45deg.",
          "testString": "assert(code.match(/background:\\s*?repeating-linear-gradient\\(\\s*?45deg/gi), 'The angle of the <code>repeating-linear-gradient()</code> should be 45deg.');"
        },
        {
          "text": "The angle of the <code>repeating-linear-gradient()</code> should no longer be 90deg",
          "testString": "assert(!code.match(/90deg/gi), 'The angle of the <code>repeating-linear-gradient()</code> should no longer be 90deg');"
        },
        {
          "text": "The color stop at 0 pixels should be <code>yellow</code>.",
          "testString": "assert(code.match(/yellow\\s+?0px/gi), 'The color stop at 0 pixels should be <code>yellow</code>.');"
        },
        {
          "text": "One color stop at 40 pixels should be <code>yellow</code>.",
          "testString": "assert(code.match(/yellow\\s+?40px/gi), 'One color stop at 40 pixels should be <code>yellow</code>.');"
        },
        {
          "text": "The second color stop at 40 pixels should be <code>black</code>.",
          "testString": "assert(code.match(/yellow\\s+?40px,\\s*?black\\s+?40px/gi), 'The second color stop at 40 pixels should be <code>black</code>.');"
        },
        {
          "text": "The last color stop at 80 pixels should be <code>black</code>.",
          "testString": "assert(code.match(/black\\s+?80px/gi), 'The last color stop at 80 pixels should be <code>black</code>.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "",
            "  div{ ",
            "    border-radius: 20px;",
            "    width: 70%;",
            "    height: 400px;",
            "    margin:  50 auto;",
            "    background: repeating-linear-gradient(",
            "      90deg,",
            "      yellow 0px,",
            "      blue 40px,",
            "      green 40px,",
            "      red 80px",
            "    );",
            "  }",
            "",
            "</style>",
            "",
            "<div></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a5367417b2b2512ad8",
      "title": "Create Texture by Adding a Subtle Pattern as a Background Image",
      "description": [
        "One way to add texture and interest to a background and have it stand out more is to add a subtle pattern. The key is balance, as you don't want the background to stand out too much, and take away from the foreground. The <code>background</code> property supports the <code>url()</code> function in order to link to an image of the chosen texture or pattern. The link address is wrapped in quotes inside the parentheses.",
        "<hr>",
        "Using the url of <code>https://i.imgur.com/MJAkxbh.png</code>, set the <code>background</code> of the whole page with the <code>body</code> selector."
      ],
      "tests": [
        {
          "text": "Your <code>body</code> element should have a <code>background</code> property set to a <code>url()</code> with the given link.",
          "testString": "assert(code.match(/background:\\s*?url\\((\"|')https:\\/\\/i\\.imgur\\.com\\/MJAkxbh\\.png(\"|')\\)/gi), 'Your <code>body</code> element should have a <code>background</code> property set to a <code>url()</code> with the given link.');"
        }
      ],
      "solutions": [],
      "hints": [
        "Remember to wrap the address in quotes within the url() function."
      ],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  body {",
            "    ",
            "  }",
            "</style>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a5367417b2b2512ad9",
      "title": "Use the CSS Transform scale Property to Change the Size of an Element",
      "description": [
        "To change the scale of an element, CSS has the <code>transform</code> property, along with its <code>scale()</code> function. The following code example doubles the size of all the paragraph elements on the page:",
        "<blockquote>p {<br>&nbsp;&nbsp;transform:scale(2);<br>}</blockquote>",
        "<hr>",
        "Increase the size of the element with the id of <code>ball2</code> to 1.5 times its original size."
      ],
      "tests": [
        {
          "text": "Set the <code>transform</code> property for <code>#ball2</code> to scale it 1.5 times its size.",
          "testString": "assert(code.match(/#ball2\\s*?{\\s*?left:\\s*?65%;\\s*?transform:\\s*?scale\\(1\\.5\\);\\s*?}|#ball2\\s*?{\\s*?transform:\\s*?scale\\(1\\.5\\);\\s*?left:\\s*?65%;\\s*?}/gi), 'Set the <code>transform</code> property for <code>#ball2</code> to scale it 1.5 times its size.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  .ball { ",
            "    width: 40px;",
            "    height: 40px;",
            "    margin: 50 auto;",
            "    position: fixed;",
            "    background: linear-gradient(",
            "      35deg,",
            "      #ccffff,",
            "      #ffcccc",
            "    );",
            "    border-radius: 50%;",
            "  }",
            "  #ball1 {",
            "    left: 20%;",
            "  }",
            "  #ball2 {",
            "    left: 65%;",
            "    ",
            "  }",
            "",
            "",
            "</style>",
            "",
            "<div class=\"ball\" id= \"ball1\"></div>",
            "<div class=\"ball\" id= \"ball2\"></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a5367417b2b2512ada",
      "title": "Use the CSS Transform scale Property to Scale an Element on Hover",
      "description": [
        "The <code>transform</code> property has a variety of functions that lets you scale, move, rotate, skew, etc., your elements. When used with pseudo-classes such as <code>:hover</code> that specify a certain state of an element, the <code>transform</code> property can easily add interactivity to your elements.",
        "Here's an example to scale the paragraph elements to 2.1 times their original size when a user hovers over them:",
        "<blockquote>p:hover {<br>&nbsp;&nbsp;transform: scale(2.1);<br>}</blockquote>",
        "<hr>",
        "Add a CSS rule for the <code>hover</code> state of the <code>div</code> and use the <code>transform</code> property to scale the <code>div</code> element to 1.1 times its original size when a user hovers over it."
      ],
      "tests": [
        {
          "text": "The size of the <code>div</code> element should scale 1.1 times when the user hovers over it.",
          "testString": "assert(code.match(/div:hover\\s*?{\\s*?transform:\\s*?scale\\(1\\.1\\);/gi), 'The size of the <code>div</code> element should scale 1.1 times when the user hovers over it.');"
        }
      ],
      "solutions": [],
      "hints": [
        "Make sure to apply the CSS rule to the hover state of the div, using div:hover"
      ],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  div { ",
            "    width: 70%;",
            "    height: 100px;",
            "    margin:  50px auto;",
            "    background: linear-gradient(",
            "      53deg,",
            "      #ccfffc,",
            "      #ffcccf",
            "    );",
            "  }",
            "  ",
            "  ",
            "  ",
            "</style>",
            "",
            "<div></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a6367417b2b2512adb",
      "title": "Use the CSS Transform Property skewX to Skew an Element Along the X-Axis",
      "description": [
        "The next function of the <code>transform</code> property is <code>skewX()</code>, which skews the selected element along its X (horizontal) axis by a given degree.",
        "The following code skews the paragraph element by -32 degrees along the X-axis.",
        "<blockquote>p {<br>&nbsp;&nbsp;transform: skewX(-32deg);<br>}</blockquote>",
        "<hr>",
        "Skew the element with the id of <code>bottom</code> by 24 degrees along the X-axis by using the <code>transform</code> property."
      ],
      "tests": [
        {
          "text": "The element with id <code>bottom</code> should be skewed by 24 degrees along its X-axis.",
          "testString": "assert(code.match(/#bottom\\s*?{\\s*?.*?\\s*?transform:\\s*?skewX\\(24deg\\);/g), 'The element with id <code>bottom</code> should be skewed by 24 degrees along its X-axis.');"
        }
      ],
      "solutions": [],
      "hints": [
        "Notice that there is no space between the number and \"deg\" (-32deg) when declaring the degrees value."
      ],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  div { ",
            "    width: 70%;",
            "    height: 100px;",
            "    margin:  50px auto;",
            "  }",
            "  #top {",
            "    background-color: red;",
            "  }",
            "  #bottom {",
            "    background-color: blue;",
            "    ",
            "  }",
            "</style>",
            "",
            "<div id=\"top\"></div>",
            "<div id=\"bottom\"></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a6367417b2b2512adc",
      "title": "Use the CSS Transform Property skewY to Skew an Element Along the Y-Axis",
      "description": [
        "Given that the <code>skewX()</code> function skews the selected element along the X-axis by a given degree, it is no surprise that the <code>skewY()</code> property skews an element along the Y (vertical) axis.",
        "<hr>",
        "Skew the element with the id of <code>top</code> -10 degrees along the Y-axis by using the <code>transform</code> property."
      ],
      "tests": [
        {
          "text": "The element with id <code>top</code> should be skewed by -10 degrees along its Y-axis.",
          "testString": "assert(code.match(/#top\\s*?{\\s*?.*?\\s*?transform:\\s*?skewY\\(-10deg\\);/g), 'The element with id <code>top</code> should be skewed by -10 degrees along its Y-axis.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  div { ",
            "    width: 70%;",
            "    height: 100px;",
            "    margin: 50px auto;",
            "  }",
            "  #top {",
            "    background-color: red;",
            "    ",
            "  }",
            "  #bottom {",
            "    background-color: blue;",
            "    transform: skewX(24deg);",
            "  }",
            "</style>",
            "",
            "<div id=\"top\"></div>",
            "<div id=\"bottom\"></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a6367417b2b2512add",
      "title": "Create a Graphic Using CSS",
      "description": [
        "By manipulating different selectors and properties, you can make interesting shapes. One of the easier ones to try is a crescent moon shape. For this challenge you need to work with the <code>box-shadow</code> property that sets the shadow of an element, along with the <code>border-radius</code> property that controls the roundness of the element's corners.",
        "You will create a round, transparent object with a crisp shadow that is slightly offset to the side - the shadow is actually going to be the moon shape you see.",
        "In order to create a round object, the <code>border-radius</code> property should be set to a value of 50%.",
        "You may recall from an earlier challenge that the <code>box-shadow</code> property takes values for <code>offset-x</code>, <code>offset-y</code>, <code>blur-radius</code>, <code>spread-radius</code> and a color value in that order. The <code>blur-radius</code> and <code>spread-radius</code> values are optional.",
        "<hr>",
        "Manipulate the square element in the editor to create the moon shape. First, change the <code>background-color</code> to transparent, then set the <code>border-radius</code> property to 50% to make the circular shape. Finally, change the <code>box-shadow</code> property to set the <code>offset-x</code> to 25px, the <code>offset-y</code> to 10px, <code>blur-radius</code> to 0, <code>spread-radius</code> to 0, and color to blue."
      ],
      "tests": [
        {
          "text": "The value of the <code>background-color</code> property should be set to <code>transparent</code>.",
          "testString": "assert(code.match(/background-color:\\s*?transparent;/gi), 'The value of the <code>background-color</code> property should be set to <code>transparent</code>.');"
        },
        {
          "text": "The value of the <code>border-radius</code> property should be set to <code>50%</code>.",
          "testString": "assert(code.match(/border-radius:\\s*?50%;/gi), 'The value of the <code>border-radius</code> property should be set to <code>50%</code>.');"
        },
        {
          "text": "The value of the <code>box-shadow</code> property should be set to 25px for <code>offset-x</code>, 10px for <code>offset-y</code>, 0 for <code>blur-radius</code>, 0 for <code>spread-radius</code>, and finally blue for the color.",
          "testString": "assert(code.match(/box-shadow:\\s*?25px\\s+?10px\\s+?0(px)?\\s+?0(px)?\\s+?blue\\s*?;/gi), 'The value of the <code>box-shadow</code> property should be set to 25px for <code>offset-x</code>, 10px for <code>offset-y</code>, 0 for <code>blur-radius</code>, 0 for <code>spread-radius</code>, and finally blue for the color.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            ".center",
            "{",
            "  position: absolute;",
            "  margin: auto;",
            "  top: 0;",
            "  right: 0;",
            "  bottom: 0;",
            "  left: 0;",
            "  width: 100px;",
            "  height: 100px;",
            "  ",
            "  background-color: blue;",
            "  border-radius: 0px;",
            "  box-shadow: 25px 10px 10px 10px green; ",
            "}",
            "",
            "</style>",
            "<div class=\"center\"></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a6367417b2b2512ade",
      "title": "Create a More Complex Shape Using CSS and HTML",
      "description": [
        "One of the most popular shapes in the world is the heart shape, and in this challenge you'll create one using pure CSS. But first, you need to understand the <code>::before</code> and <code>::after</code> pseudo-elements. These pseudo-elements are used to add something before or after a selected element. In the following example, a <code>::before</code> pseudo-element is used to add a rectangle to an element with the class <code>heart</code>:",
        "<blockquote>.heart::before {<br>&nbsp;&nbsp;content: \"\";<br>&nbsp;&nbsp;background-color: yellow;<br>&nbsp;&nbsp;border-radius: 25%;<br>&nbsp;&nbsp;position: absolute;<br>&nbsp;&nbsp;height: 50px;<br>&nbsp;&nbsp;width: 70px;<br>&nbsp;&nbsp;top: -50px;<br>&nbsp;&nbsp;left: 5px;<br>}</blockquote>",
        "For the <code>::before</code> and <code>::after</code> pseudo-elements to function properly, they must have a defined <code>content</code> property. This property is usually used to add things like a photo or text to the selected element. When the <code>::before</code> and <code>::after</code> pseudo-elements are used to make shapes, the <code>content</code> property is still required, but it's set to an empty string.",
        "In the above example, the element with the class of <code>heart</code> has a <code>::before</code> pseudo-element that produces a yellow rectangle with <code>height</code> and <code>width</code> of 50px and 70px, respectively. This rectangle has round corners due to its 25% border radius and is positioned absolutely at 5px from the <code>left</code> and 50px above the <code>top</code> of the element.",
        "<hr>",
        "Transform the element on the screen to a heart. In the <code>heart::after</code> selector, change the <code>background-color</code> to pink and the <code>border-radius</code> to 50%.",
        "Next, target the element with the class <code>heart</code> (just <code>heart</code>) and fill in the <code>transform</code> property. Use the <code>rotate()</code> function with -45 degrees. (<code>rotate()</code> works the same way that <code>skewX()</code> and <code>skewY()</code> do).",
        "Finally, in the <code>heart::before</code> selector, set its <code>content</code> property to an empty string."
      ],
      "tests": [
        {
          "text": "The <code>background-color</code> property of the <code>heart::after</code> selector should be pink.",
          "testString": "assert(code.match(/\\.heart::after\\s*?{\\s*?background-color\\s*?:\\s*?pink\\s*?;/gi), 'The <code>background-color</code> property of the <code>heart::after</code> selector should be pink.');"
        },
        {
          "text": "The <code>border-radius</code> of the <code>heart::after</code> selector should be 50%.",
          "testString": "assert(code.match(/border-radius\\s*?:\\s*?50%/gi).length == 2, 'The <code>border-radius</code> of the <code>heart::after</code> selector should be 50%.');"
        },
        {
          "text": "The <code>transform</code> property for the <code>heart</code> class should use a <code>rotate()</code> function set to -45 degrees.",
          "testString": "assert(code.match(/transform\\s*?:\\s*?rotate\\(\\s*?-45deg\\s*?\\)/gi), 'The <code>transform</code> property for the <code>heart</code> class should use a <code>rotate()</code> function set to -45 degrees.');"
        },
        {
          "text": "The <code>content</code> of the <code>heart::before</code> selector should be an empty string.",
          "testString": "assert(code.match(/\\.heart::before\\s*?{\\s*?content\\s*?:\\s*?(\"|')\\1\\s*?;/gi), 'The <code>content</code> of the <code>heart::before</code> selector should be an empty string.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            ".heart {",
            "  position: absolute;",
            "  margin: auto;",
            "  top: 0;",
            "  right: 0;",
            "  bottom: 0;",
            "  left: 0;",
            "  background-color: pink;",
            "  height: 50px;",
            "  width: 50px;",
            "  transform: ;",
            "}",
            ".heart::after {",
            "  background-color: blue;",
            "  content: \"\";",
            "  border-radius: 25%;",
            "  position: absolute;",
            "  width: 50px;",
            "  height: 50px;",
            "  top: 0px;",
            "  left: 25px;",
            "}",
            ".heart::before {",
            "  content: ;",
            "  background-color: pink;",
            "  border-radius: 50%;",
            "  position: absolute;",
            "  width: 50px;",
            "  height: 50px;",
            "  top: -25px;",
            "  left: 0px;",
            "}",
            "</style>",
            "<div class = \"heart\"></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a7367417b2b2512adf",
      "title": "Learn How the CSS @keyframes and animation Properties Work",
      "description": [
        "To animate an element, you need to know about the animation properties and the <code>@keyframes</code> rule. The animation properties control how the animation should behave and the <code>@keyframes</code> rule controls what happens during that animation. There are eight animation properties in total. This challenge will keep it simple and cover the two most important ones first:",
        "<code>animation-name</code> sets the name of the animation, which is later used by <code>@keyframes</code> to tell CSS which rules go with which animations.",
        "<code>animation-duration</code> sets the length of time for the animation.",
        "<code>@keyframes</code> is how to specify exactly what happens within the animation over the duration. This is done by giving CSS properties for specific \"frames\" during the animation, with percentages ranging from 0% to 100%. If you compare this to a movie, the CSS properties for 0% is how the element displays in the opening scene. The CSS properties for 100% is how the element appears at the end, right before the credits roll. Then CSS applies the magic to transition the element over the given duration to act out the scene. Here's an example to illustrate the usage of <code>@keyframes</code> and the animation properties:",
        "<blockquote>#anim {<br>&nbsp;&nbsp;animation-name: colorful;<br>&nbsp;&nbsp;animation-duration: 3s;<br>}<br>@keyframes colorful {<br>&nbsp;&nbsp;0% {<br>&nbsp;&nbsp;&nbsp;&nbsp;background-color: blue;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;100% {<br>&nbsp;&nbsp;&nbsp;&nbsp;background-color: yellow;<br>&nbsp;&nbsp;}<br>}</blockquote>",
        "For the element with the <code>anim</code> id, the code snippet above sets the <code>animation-name</code> to <code>colorful</code> and sets the <code>animation-duration</code> to 3 seconds. Then the <code>@keyframes</code> rule links to the animation properties with the name <code>colorful</code>. It sets the color to blue at the beginning of the animation (0%) which will transition to yellow by the end of the animation (100%). You aren't limited to only beginning-end transitions, you can set properties for the element for any percentage between 0% and 100%.",
        "<hr>",
        "Create an animation for the element with the id <code>rect</code>, by setting the <code>animation-name</code> to rainbow and the <code>animation-duration</code> to 4 seconds. Next, declare a <code>@keyframes</code> rule, and set the <code>background-color</code> at the beginning of the animation (<code>0%</code>) to blue, the middle of the animation (<code>50%</code>) to green, and the end of the animation (<code>100%</code>) to yellow."
      ],
      "tests": [
        {
          "text": "The element with id of <code>rect</code> should have an <code>animation-name</code> property with a value of rainbow.",
          "testString": "assert($('#rect').css('animation-name') == 'rainbow', 'The element with id of <code>rect</code> should have an <code>animation-name</code> property with a value of rainbow.');"
        },
        {
          "text": "The element with id of <code>rect</code> should have an <code>animation-duration</code> property with a value of 4s.",
          "testString": "assert($('#rect').css('animation-duration') == '4s', 'The element with id of <code>rect</code> should have an <code>animation-duration</code> property with a value of 4s.');"
        },
        {
          "text": "The <code>@keyframes</code> rule should use the <code>animation-name</code> of rainbow.",
          "testString": "assert(code.match(/@keyframes\\s+?rainbow\\s*?{/g), 'The <code>@keyframes</code> rule should use the <code>animation-name</code> of rainbow.');"
        },
        {
          "text": "The <code>@keyframes</code> rule for rainbow should use a <code>background-color</code> of blue at 0%.",
          "testString": "assert(code.match(/0%\\s*?{\\s*?background-color:\\s*?blue;\\s*?}/gi), 'The <code>@keyframes</code> rule for rainbow should use a <code>background-color</code> of blue at 0%.');"
        },
        {
          "text": "The <code>@keyframes</code> rule for rainbow should use a <code>background-color</code> of green at 50%.",
          "testString": "assert(code.match(/50%\\s*?{\\s*?background-color:\\s*?green;\\s*?}/gi), 'The <code>@keyframes</code> rule for rainbow should use a <code>background-color</code> of green at 50%.');"
        },
        {
          "text": "The <code>@keyframes</code> rule for rainbow should use a <code>background-color</code> of yellow at 100%.",
          "testString": "assert(code.match(/100%\\s*?{\\s*?background-color:\\s*?yellow;\\s*?}/gi), 'The <code>@keyframes</code> rule for rainbow should use a <code>background-color</code> of yellow at 100%.');"
        }
      ],
      "solutions": [],
      "hints": [
        "Make sure the @keyframes rule links to the animation-name."
      ],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  div {",
            "    height: 40px;",
            "    width: 70%;",
            "    background: black;",
            "    margin: 50px auto;",
            "    border-radius: 5px;",
            "  }",
            "",
            "  #rect {",
            "    ",
            "    ",
            "  }",
            "  ",
            "  ",
            "  ",
            "  ",
            "</style>",
            "<div id=\"rect\"></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a7367417b2b2512ae0",
      "title": "Use CSS Animation to Change the Hover State of a Button",
      "description": [
        "You can use CSS <code>@keyframes</code> to change the color of a button in its hover state.",
        "Here's an example of changing the width of an image on hover:",
        "<blockquote>&lt;style&gt;<br>&nbsp;&nbsp;img:hover {<br>&nbsp;&nbsp;&nbsp;&nbsp;animation-name: width;<br>&nbsp;&nbsp;&nbsp;&nbsp;animation-duration: 500ms;<br>&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;@keyframes width {<br>&nbsp;&nbsp;&nbsp;&nbsp;100% {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width: 40px;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>&lt;/style&gt;<br><br>&lt;img src=&quot;https://bit.ly/smallgooglelogo&quot; alt=&quot;Google's Logo&quot; /&gt;</blockquote>",
        "<hr>",
        "Note that <code>ms</code> stands for milliseconds, where 1000ms is equal to 1s.",
        "Use CSS <code>@keyframes</code> to change the <code>background-color</code> of the <code>button</code> element so it becomes <code>#4791d0</code> when a user hovers over it. The <code>@keyframes</code> rule should only have an entry for <code>100%</code>."
      ],
      "tests": [
        {
          "text": "The @keyframes rule should use the <code>animation-name</code> background-color.",
          "testString": "assert(code.match(/@keyframes\\s+?background-color\\s*?{/g), 'The @keyframes rule should use the <code>animation-name</code> background-color.');"
        },
        {
          "text": "There should be one rule under <code>@keyframes</code> that changes the <code>background-color</code> to <code>#4791d0</code> at 100%.",
          "testString": "assert(code.match(/100%\\s*?{\\s*?background-color:\\s*?#4791d0;\\s*?}/gi), 'There should be one rule under <code>@keyframes</code> that changes the <code>background-color</code> to <code>#4791d0</code> at 100%.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  button {",
            "    border-radius: 5px;",
            "    color: white;",
            "    background-color: #0F5897;",
            "    padding: 5px 10px 8px 10px;",
            "  }",
            "  ",
            "  button:hover {",
            "    animation-name: background-color;",
            "    animation-duration: 500ms;",
            "  }",
            "  ",
            "  ",
            "</style>",
            "  ",
            "<button>Register</button>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "58a7a6ebf9a6318348e2d5aa",
      "title": "Modify Fill Mode of an Animation",
      "description": [
        "That's great, but it doesn't work right yet. Notice how the animation resets after <code>500ms</code> has passed, causing the button to revert back to the original color. You want the button to stay highlighted.",
        "This can be done by setting the <code>animation-fill-mode</code> property to <code>forwards</code>. The <code>animation-fill-mode</code> specifies the style applied to an element when the animation has finished. You can set it like so:",
        "<code>animation-fill-mode: forwards;</code>",
        "<hr>",
        "Set the <code>animation-fill-mode</code> property of <code>button:hover</code> to <code>forwards</code> so the button stays highlighted when a user hovers over it."
      ],
      "tests": [
        {
          "text": "<code>button:hover</code> should have a <code>animation-fill-mode</code> property with a value of <code>forwards</code>.",
          "testString": "assert(code.match(/button\\s*?:\\s*?hover\\s*?{[\\s\\S]*animation-fill-mode\\s*?:\\s*?forwards\\s*?;[\\s\\S]*}/gi) && code.match(/button\\s*?:\\s*?hover\\s*?{[\\s\\S]*animation-name\\s*?:\\s*?background-color\\s*?;[\\s\\S]*}/gi) && code.match(/button\\s*?:\\s*?hover\\s*?{[\\s\\S]*animation-duration\\s*?:\\s*?500ms\\s*?;[\\s\\S]*}/gi), '<code>button:hover</code> should have a <code>animation-fill-mode</code> property with a value of <code>forwards</code>.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  button {",
            "    border-radius: 5px;",
            "    color: white;",
            "    background-color: #0F5897;",
            "    padding: 5px 10px 8px 10px;",
            "  }",
            "  button:hover {",
            "    animation-name: background-color;",
            "    animation-duration: 500ms;",
            "    /* add your code below this line */",
            "    ",
            "    /* add your code above this line */",
            "  }",
            "  @keyframes background-color {",
            "    100% {",
            "      background-color: #4791d0;",
            "    }",
            "  }",
            "</style>",
            "<button>Register</button>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a7367417b2b2512ae1",
      "title": "Create Movement Using CSS Animation",
      "description": [
        "When elements have a specified <code>position</code>, such as <code>fixed</code> or <code>relative</code>, the CSS offset properties <code>right</code>, <code>left</code>, <code>top</code>, and <code>bottom</code> can be used in animation rules to create movement.",
        "As shown in the example below, you can push the item downwards then upwards by setting the <code>top</code> property of the <code>50%</code> keyframe to 50px, but having it set to 0px for the first (<code>0%</code>) and the last (<code>100%</code>) keyframe.",
        "<blockquote>@keyframes rainbow {<br>&nbsp;&nbsp;0% {<br>&nbsp;&nbsp;&nbsp;&nbsp;background-color: blue;<br>&nbsp;&nbsp;&nbsp;&nbsp;top: 0px;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;50% {<br>&nbsp;&nbsp;&nbsp;&nbsp;background-color: green;<br>&nbsp;&nbsp;&nbsp;&nbsp;top: 50px;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;100% {<br>&nbsp;&nbsp;&nbsp;&nbsp;background-color: yellow;<br>&nbsp;&nbsp;&nbsp;&nbsp;top: 0px;<br>&nbsp;&nbsp;}<br>}</blockquote>",
        "<hr>",
        "Add a horizontal motion to the <code>div</code> animation. Using the <code>left</code> offset property, add to the <code>@keyframes</code> rule so rainbow starts at 0 pixels at <code>0%</code>, moves to 25 pixels at <code>50%</code>, and ends at -25 pixels at <code>100%</code>. Don't replace the <code>top</code> property in the editor - the animation should have both vertical and horizontal motion."
      ],
      "tests": [
        {
          "text": "The <code>@keyframes</code> rule for <code>0%</code> should use the <code>left</code> offset of 0px.",
          "testString": "assert(code.match(/0%\\s*?{\\s*?background-color:\\s*?blue;\\s*?top:\\s*?0px;\\s*?left:\\s*?0px;\\s*?}/gi), 'The <code>@keyframes</code> rule for <code>0%</code> should use the <code>left</code> offset of 0px.');"
        },
        {
          "text": "The <code>@keyframes</code> rule for <code>50%</code> should use the <code>left</code> offset of 25px.",
          "testString": "assert(code.match(/50%\\s*?{\\s*?background-color:\\s*?green;\\s*?top:\\s*?50px;\\s*?left:\\s*?25px;\\s*?}/gi), 'The <code>@keyframes</code> rule for <code>50%</code> should use the <code>left</code> offset of 25px.');"
        },
        {
          "text": "The <code>@keyframes</code> rule for <code>100%</code> should use the <code>left</code> offset of -25px.",
          "testString": "assert(code.match(/100%\\s*?{\\s*?background-color:\\s*?yellow;\\s*?top:\\s*?0px;\\s*?left:\\s*?-25px;\\s*?}/gi), 'The <code>@keyframes</code> rule for <code>100%</code> should use the <code>left</code> offset of -25px.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  div {",
            "    height: 40px;",
            "    width: 70%;",
            "    background: black;",
            "    margin: 50px auto;",
            "    border-radius: 5px;",
            "    position: relative;",
            "  }",
            "",
            "#rect {",
            "  animation-name: rainbow;",
            "  animation-duration: 4s;",
            "}",
            "",
            "@keyframes rainbow {",
            "  0% {",
            "    background-color: blue;",
            "    top: 0px;",
            "    ",
            "  }",
            "  50% {",
            "    background-color: green;",
            "    top: 50px;",
            "    ",
            "  }",
            "  100% {",
            "    background-color: yellow;",
            "    top: 0px;",
            "    ",
            "  }",
            "}",
            "</style>",
            "",
            "<div id=\"rect\"></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a7367417b2b2512ae2",
      "title": "Create Visual Direction by Fading an Element from Left to Right",
      "description": [
        "For this challenge, you'll change the <code>opacity</code> of an animated element so it gradually fades as it reaches the right side of the screen.",
        "In the displayed animation, the round element with the gradient background moves to the right by the 50% mark of the animation per the <code>@keyframes</code> rule.",
        "<hr>",
        "Target the element with the id of <code>ball</code> and add the <code>opacity</code> property set to 0.1 at <code>50%</code>, so the element fades as it moves to the right."
      ],
      "tests": [
        {
          "text": "The <code>keyframes</code> rule for fade should set the <code>opacity</code> property to 0.1 at 50%.",
          "testString": "assert(code.match(/@keyframes fade\\s*?{\\s*?50%\\s*?{\\s*?(?:left:\\s*?60%;\\s*?opacity:\\s*?0?\\.1;|opacity:\\s*?0?\\.1;\\s*?left:\\s*?60%;)/gi), 'The <code>keyframes</code> rule for fade should set the <code>opacity</code> property to 0.1 at 50%.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "",
            "  #ball {",
            "    width: 70px;",
            "    height: 70px;",
            "    margin: 50px auto;",
            "    position: fixed;",
            "    left: 20%;",
            "    border-radius: 50%;",
            "    background: linear-gradient(",
            "      35deg,",
            "      #ccffff,",
            "      #ffcccc",
            "    );",
            "    animation-name: fade;",
            "    animation-duration: 3s;",
            "  }",
            "",
            "  @keyframes fade {",
            "    50% {",
            "      left: 60%;",
            "      ",
            "    }",
            "  }",
            "",
            "</style>",
            "",
            "<div id=\"ball\"></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a8367417b2b2512ae3",
      "title": "Animate Elements Continually Using an Infinite Animation Count",
      "description": [
        "The previous challenges covered how to use some of the animation properties and the <code>@keyframes</code> rule. Another animation property is the <code>animation-iteration-count</code>, which allows you to control how many times you would like to loop through the animation. Here's an example:",
        "<code>animation-iteration-count: 3;</code>",
        "In this case the animation will stop after running 3 times, but it's possible to make the animation run continuously by setting that value to infinite.",
        "<hr>",
        "To keep the ball bouncing on the right on a continuous loop, change the <code>animation-iteration-count</code> property to infinite."
      ],
      "tests": [
        {
          "text": "The <code>animation-iteration-count</code> property should have a value of infinite.",
          "testString": "assert($('#ball').css('animation-iteration-count') == 'infinite', 'The <code>animation-iteration-count</code> property should have a value of infinite.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "",
            "  #ball {",
            "    width: 100px;",
            "    height: 100px;",
            "    margin: 50px auto;",
            "    position: relative;",
            "    border-radius: 50%;",
            "    background: linear-gradient(",
            "      35deg,",
            "      #ccffff,",
            "      #ffcccc",
            "    );",
            "    animation-name: bounce;",
            "    animation-duration: 1s;",
            "    animation-iteration-count: 3;",
            "  }",
            "",
            "  @keyframes bounce{",
            "    0% {",
            "      top: 0px;",
            "    }",
            "    50% {",
            "      top: 249px;",
            "      width: 130px;",
            "      height: 70px;",
            "    }",
            "    100% {",
            "      top: 0px;",
            "    }",
            "  }",
            "</style>",
            "<div id=\"ball\"></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a8367417b2b2512ae4",
      "title": "Make a CSS Heartbeat using an Infinite Animation Count",
      "description": [
        "Here's one more continuous animation example with the <code>animation-iteration-count</code> property that uses the heart you designed in a previous challenge.",
        "The one-second long heartbeat animation consists of two animated pieces. The <code>heart</code> elements (including the <code>:before</code> and <code>:after</code> pieces) are animated to change size using the <code>transform</code> property, and the background <code>div</code> is animated to change its color using the <code>background</code> property.",
        "<hr>",
        "Keep the heart beating by adding the <code>animation-iteration-count</code> property for both the <code>back</code> class and the <code>heart</code> class and setting the value to infinite. The <code>heart:before</code> and <code>heart:after</code> selectors do not need any animation properties."
      ],
      "tests": [
        {
          "text": "The <code>animation-iteration-count</code> property for the <code>heart</code> class should have a value of infinite.",
          "testString": "assert($('.heart').css('animation-iteration-count') == 'infinite', 'The <code>animation-iteration-count</code> property for the <code>heart</code> class should have a value of infinite.');"
        },
        {
          "text": "The <code>animation-iteration-count</code> property for the <code>back</code> class should have a value of infinite.",
          "testString": "assert($('.back').css('animation-iteration-count') == 'infinite', 'The <code>animation-iteration-count</code> property for the <code>back</code> class should have a value of infinite.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  .back {",
            "    position: fixed;",
            "    padding: 0;",
            "    margin: 0;",
            "    top: 0;",
            "    left: 0;",
            "    width: 100%;",
            "    height: 100%;",
            "    background: white;",
            "    animation-name: backdiv;",
            "    animation-duration: 1s; ",
            "    ",
            "  }",
            "",
            "  .heart {",
            "    position: absolute;",
            "    margin: auto;",
            "    top: 0;",
            "    right: 0;",
            "    bottom: 0;",
            "    left: 0;",
            "    background-color: pink;",
            "    height: 50px;",
            "    width: 50px;",
            "    transform: rotate(-45deg);",
            "    animation-name: beat;",
            "    animation-duration: 1s;",
            "    ",
            "  }",
            "  .heart:after {",
            "    background-color: pink;",
            "    content: \"\";",
            "    border-radius: 50%;",
            "    position: absolute;",
            "    width: 50px;",
            "    height: 50px;",
            "    top: 0px;",
            "    left: 25px;",
            "  }",
            "  .heart:before {",
            "    background-color: pink;",
            "    content: \"\";",
            "    border-radius: 50%;",
            "    position: absolute;",
            "    width: 50px;",
            "    height: 50px;",
            "    top: -25px;",
            "    left: 0px;",
            "  }",
            "",
            "  @keyframes backdiv {",
            "    50% {",
            "      background: #ffe6f2;",
            "    }",
            "  }",
            "",
            "  @keyframes beat {",
            "    0% {",
            "      transform: scale(1) rotate(-45deg);",
            "    }",
            "    50% {",
            "      transform: scale(0.6) rotate(-45deg);",
            "    }",
            "  }",
            "",
            "</style>",
            "<div class=\"back\"></div>",
            "<div class=\"heart\"></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a8367417b2b2512ae5",
      "title": "Animate Elements at Variable Rates",
      "description": [
        "There are a variety of ways to alter the animation rates of similarly animated elements. So far, this has been achieved by applying an <code>animation-iteration-count</code> property and setting <code>@keyframes</code> rules.",
        "To illustrate, the animation on the right consists of two \"stars\" that each decrease in size and opacity at the 20% mark in the <code>@keyframes</code> rule, which creates the twinkle animation. You can change the <code>@keyframes</code> rule for one of the elements so the stars twinkle at different rates.",
        "<hr>",
        "Alter the animation rate for the element with the class name of <code>star-1</code> by changing its <code>@keyframes</code> rule to 50%."
      ],
      "tests": [
        {
          "text": "The <code>@keyframes</code> rule for the <code>star-1</code> class should be 50%.",
          "testString": "assert(code.match(/twinkle-1\\s*?{\\s*?50%/g), 'The <code>@keyframes</code> rule for the <code>star-1</code> class should be 50%.');"
        }
      ],
      "solutions": [],
      "hints": [
        "Check the animation-name declared in the star-1 class to find the right @keyframes rule to change."
      ],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  .stars {",
            "    background-color: white;",
            "    height: 30px;",
            "    width: 30px;",
            "    border-radius: 50%;",
            "    animation-iteration-count: infinite;",
            "  }",
            "",
            "  .star-1 {",
            "    margin-top: 15%; ",
            "    margin-left: 60%;",
            "    animation-name: twinkle-1;",
            "    animation-duration: 1s;",
            "  }",
            "",
            "  .star-2 {",
            "    margin-top: 25%;",
            "    margin-left: 25%;",
            "    animation-name: twinkle-2;",
            "    animation-duration: 1s;",
            "  }",
            "",
            "  @keyframes twinkle-1 {",
            "    20% {",
            "      transform: scale(0.5);",
            "      opacity: 0.5;",
            "    }",
            "  }",
            "",
            "  @keyframes twinkle-2 {",
            "    20% {",
            "      transform: scale(0.5);",
            "      opacity: 0.5;",
            "    }",
            "  }",
            "",
            "  #back {",
            "    position: fixed;",
            "    padding: 0;",
            "    margin: 0;",
            "    top: 0;",
            "    left: 0;",
            "    width: 100%;",
            "    height: 100%;",
            "    background: linear-gradient(black, #000099, #66c2ff, #ffcccc, #ffeee6);",
            "  }",
            "</style>",
            "",
            "<div id=\"back\"></div>",
            "<div class=\"star-1 stars\"></div>",
            "<div class=\"star-2 stars\"></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a8367417b2b2512ae6",
      "title": "Animate Multiple Elements at Variable Rates",
      "description": [
        "In the previous challenge, you changed the animation rates for two similarly animated elements by altering their <code>@keyframes</code> rules. You can achieve the same goal by manipulating the <code>animation-duration</code> of multiple elements.",
        "In the animation running in the code editor, there are three \"stars\" in the sky that twinkle at the same rate on a continuous loop. To make them twinkle at different rates, you can set the <code>animation-duration</code> property to different values for each element.",
        "<hr>",
        "Set the <code>animation-duration</code> of the elements with the classes <code>star-1</code>, <code>star-2</code>, and <code>star-3</code> to 1s, 0.9s, and 1.1s, respectively."
      ],
      "tests": [
        {
          "text": "The <code>animation-duration</code> property for the star with class <code>star-1</code> should remain at 1s.",
          "testString": "assert($('.star-1').css('animation-duration') == '1s', 'The <code>animation-duration</code> property for the star with class <code>star-1</code> should remain at 1s.');"
        },
        {
          "text": "The <code>animation-duration</code> property for the star with class <code>star-2</code> should be 0.9s.",
          "testString": "assert($('.star-2').css('animation-duration') == '0.9s', 'The <code>animation-duration</code> property for the star with class <code>star-2</code> should be 0.9s.');"
        },
        {
          "text": "The <code>animation-duration</code> property for the star with class <code>star-3</code> should be 1.1s.",
          "testString": "assert($('.star-3').css('animation-duration') == '1.1s', 'The <code>animation-duration</code> property for the star with class <code>star-3</code> should be 1.1s.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  .stars {",
            "    background-color: white;",
            "    height: 30px;",
            "    width: 30px;",
            "    border-radius: 50%;",
            "    animation-iteration-count: infinite;",
            "  }",
            "",
            "  .star-1 {",
            "    margin-top: 15%; ",
            "    margin-left: 60%;",
            "    animation-duration: 1s;",
            "    animation-name: twinkle;",
            "  }",
            "",
            "  .star-2 {",
            "    margin-top: 25%;",
            "    margin-left: 25%;",
            "    animation-duration: 1s;",
            "    animation-name: twinkle;",
            "  }",
            "",
            "  .star-3 {",
            "    margin-top: 10%;",
            "    margin-left: 50%;",
            "    animation-duration: 1s;",
            "    animation-name: twinkle;",
            "  }",
            "",
            "  @keyframes twinkle {",
            "    20% {",
            "      transform: scale(0.5);",
            "      opacity: 0.5;",
            "    }",
            "  }",
            "",
            "  #back {",
            "    position: fixed;",
            "    padding: 0;",
            "    margin: 0;",
            "    top: 0;",
            "    left: 0;",
            "    width: 100%;",
            "    height: 100%;",
            "    background: linear-gradient(black, #000099, #66c2ff, #ffcccc, #ffeee6);",
            "  }",
            "</style>",
            "",
            "<div id=\"back\"></div>",
            "<div class=\"star-1 stars\"></div>",
            "<div class=\"star-2 stars\"></div>",
            "<div class=\"star-3 stars\"></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a8367417b2b2512ae7",
      "title": "Change Animation Timing with Keywords",
      "description": [
        "In CSS animations, the <code>animation-timing-function</code> property controls how quickly an animated element changes over the duration of the animation. If the animation is a car moving from point A to point B in a given time (your <code>animation-duration</code>), the <code>animation-timing-function</code> says how the car accelerates and decelerates over the course of the drive.",
        "There are a number of predefined keywords available for popular options. For example, the default value is <code>ease</code>, which starts slow, speeds up in the middle, and then slows down again in the end. Other options include <code>ease-out</code>, which is quick in the beginning then slows down, <code>ease-in</code>, which is slow in the beginning, then speeds up at the end, or <code>linear</code>, which applies a constant animation speed throughout.",
        "<hr>",
        "For the elements with id of <code>ball1</code> and <code>ball2</code>, add an <code>animation-timing-function</code> property to each, and set <code>#ball1</code> to <code>linear</code>, and <code>#ball2</code> to <code>ease-out</code>. Notice the difference between how the elements move during the animation but end together, since they share the same <code>animation-duration</code> of 2 seconds."
      ],
      "tests": [
        {
          "text": "The value of the <code>animation-timing-function</code> property for the element with the id <code>ball1</code> should be linear.",
          "testString": "assert($('#ball1').css('animation-timing-function') == 'linear', 'The value of the <code>animation-timing-function</code> property for the element with the id <code>ball1</code> should be linear.');"
        },
        {
          "text": "The value of the <code>animation-timing-function</code> property for the element with the id <code>ball2</code> should be ease-out.",
          "testString": "assert($('#ball2').css('animation-timing-function') == 'ease-out', 'The value of the <code>animation-timing-function</code> property for the element with the id <code>ball2</code> should be ease-out.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "",
            "  .balls {",
            "    border-radius: 50%;",
            "    background: linear-gradient(",
            "      35deg,",
            "      #ccffff,",
            "      #ffcccc",
            "    );",
            "    position: fixed;  ",
            "    width: 50px;",
            "    height: 50px;",
            "    margin-top: 50px;",
            "    animation-name: bounce;",
            "    animation-duration: 2s;",
            "    animation-iteration-count: infinite;",
            "  }",
            "  #ball1 { ",
            "    left:27%;",
            "    ",
            "  }",
            "  #ball2 { ",
            "    left:56%;",
            "    ",
            "  }",
            "",
            "@keyframes bounce {",
            "  0% {",
            "    top: 0px;",
            "  } ",
            "  100% {",
            "    top: 249px;",
            "  }",
            "} ",
            "",
            "</style>",
            "",
            "<div class=\"balls\" id=\"ball1\"></div>",
            "<div class=\"balls\" id=\"ball2\"></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a9367417b2b2512ae8",
      "title": "Learn How Bezier Curves Work",
      "description": [
        "The last challenge introduced the <code>animation-timing-function</code> property and a few keywords that change the speed of an animation over its duration. CSS offers an option other than keywords that provides even finer control over how the animation plays out, through the use of Bezier curves.",
        "In CSS animations, Bezier curves are used with the <code>cubic-bezier</code> function. The shape of the curve represents how the animation plays out. The curve lives on a 1 by 1 coordinate system. The X-axis of this coordinate system is the duration of the animation (think of it as a time scale), and the Y-axis is the change in the animation.",
        "The <code>cubic-bezier</code> function consists of four main points that sit on this 1 by 1 grid: <code>p0</code>, <code>p1</code>, <code>p2</code>, and <code>p3</code>. <code>p0</code> and <code>p3</code> are set for you - they are the beginning and end points which are always located respectively at the origin (0, 0) and (1, 1). You set the x and y values for the other two points, and where you place them in the grid dictates the shape of the curve for the animation to follow. This is done in CSS by declaring the x and y values of the <code>p1</code> and <code>p2</code> \"anchor\" points in the form: <code>(x1, y1, x2, y2)</code>. Pulling it all together, here's an example of a Bezier curve in CSS code:",
        "<code>animation-timing-function: cubic-bezier(0.25, 0.25, 0.75, 0.75);</code>",
        "In the example above, the x and y values are equivalent for each point (x1 = 0.25 = y1 and x2 = 0.75 = y2), which if you remember from geometry class, results in a line that extends from the origin to point (1, 1). This animation is a linear change of an element during the length of an animation, and is the same as using the <code>linear</code> keyword. In other words, it changes at a constant speed.",
        "<hr>",
        "For the element with the id of <code>ball1</code>, change the value of the <code>animation-timing-function</code> property from <code>linear</code> to its equivalent <code>cubic-bezier</code> function value. Use the point values given in the example above."
      ],
      "tests": [
        {
          "text": "The value of the <code>animation-timing-function</code> property for the element with the id <code>ball1</code> should be the linear-equivalent cubic-bezier function.",
          "testString": "assert($('#ball1').css('animation-timing-function') == 'cubic-bezier(0.25, 0.25, 0.75, 0.75)', 'The value of the <code>animation-timing-function</code> property for the element with the id <code>ball1</code> should be the linear-equivalent cubic-bezier function.');"
        },
        {
          "text": "The value of the <code>animation-timing-function</code> property for the element with the id <code>ball2</code> should not change.",
          "testString": "assert($('#ball2').css('animation-timing-function') == 'ease-out', 'The value of the <code>animation-timing-function</code> property for the element with the id <code>ball2</code> should not change.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "",
            "  .balls{",
            "    border-radius: 50%;",
            "    background: linear-gradient(",
            "      35deg,",
            "      #ccffff,",
            "      #ffcccc",
            "    );",
            "    position: fixed;  ",
            "    width: 50px;",
            "    height: 50px;",
            "    margin-top: 50px;",
            "    animation-name: bounce;",
            "    animation-duration: 2s;",
            "    animation-iteration-count: infinite;",
            "  }",
            "  #ball1 { ",
            "    left: 27%;",
            "    animation-timing-function: linear;",
            "  }",
            "  #ball2 { ",
            "    left: 56%;",
            "    animation-timing-function: ease-out;",
            "  }",
            "",
            "@keyframes bounce {",
            "  0% {",
            "    top: 0px;",
            "  } ",
            "  100% {",
            "    top: 249px;",
            "  }",
            "} ",
            "",
            "</style>",
            "",
            "<div class=\"balls\" id=\"ball1\"></div>",
            "<div class=\"balls\" id=\"ball2\"></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a9367417b2b2512ae9",
      "title": "Use a Bezier Curve to Move a Graphic",
      "description": [
        "A previous challenge discussed the <code>ease-out</code> keyword that describes an animation change that speeds up first and then slows down at the end of the animation. On the right, the difference between the <code>ease-out</code> keyword (for the blue element) and <code>linear</code> keyword (for the red element) is demonstrated. Similar animation progressions to the <code>ease-out</code> keyword can be achieved by using a custom cubic Bezier curve function.",
        "In general, changing the <code>p1</code> and <code>p2</code> anchor points drives the creation of different Bezier curves, which controls how the animation progresses through time. Here's an example of a Bezier curve using values to mimic the ease-out style:",
        "<code>animation-timing-function: cubic-bezier(0, 0, 0.58, 1);</code>",
        "Remember that all <code>cubic-bezier</code> functions start with <code>p0</code> at (0, 0) and end with <code>p3</code> at (1, 1). In this example, the curve moves faster through the Y-axis (starts at 0, goes to <code>p1</code> y value of 0, then goes to <code>p2</code> y value of 1) than it moves through the X-axis (0 to start, then 0 for <code>p1</code>, up to 0.58 for <code>p2</code>). As a result, the change in the animated element progresses faster than the time of the animation for that segment. Towards the end of the curve, the relationship between the change in x and y values reverses - the y value moves from 1 to 1 (no change), and the x values move from 0.58 to 1, making the animation changes progress slower compared to the animation duration.",
        "<hr>",
        "To see the effect of this Bezier curve in action, change the <code>animation-timing-function</code> of the element with id of <code>red</code> to a <code>cubic-bezier</code> function with x1, y1, x2, y2 values set respectively to 0, 0, 0.58, 1. This will make both elements progress through the animation similarly."
      ],
      "tests": [
        {
          "text": "The value of the <code>animation-timing-function</code> property of the element with the id <code>red</code> should be a <code>cubic-bezier</code> function with x1, y1, x2, y2 values set respectively to 0, 0, 0.58, 1 .",
          "testString": "assert($('#red').css('animation-timing-function') == 'cubic-bezier(0, 0, 0.58, 1)', 'The value of the <code>animation-timing-function</code> property of the element with the id <code>red</code> should be a <code>cubic-bezier</code> function with x1, y1, x2, y2 values set respectively to 0, 0, 0.58, 1 .');"
        },
        {
          "text": "The element with the id <code>red</code> should no longer have the <code>animation-timing-function</code> property of linear.",
          "testString": "assert($('#red').css('animation-timing-function') !== 'linear', 'The element with the id <code>red</code> should no longer have the <code>animation-timing-function</code> property of linear.');"
        },
        {
          "text": "The value of the <code>animation-timing-function</code> property for the element with the id <code>blue</code> should not change.",
          "testString": "assert($('#blue').css('animation-timing-function') == 'ease-out', 'The value of the <code>animation-timing-function</code> property for the element with the id <code>blue</code> should not change.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  .balls{",
            "    border-radius: 50%;",
            "    position: fixed;",
            "    width: 50px;",
            "    height: 50px;",
            "    margin-top: 50px;",
            "    animation-name: bounce;",
            "    animation-duration: 2s;",
            "    animation-iteration-count: infinite;",
            "  }",
            "  #red {",
            "    background: red;",
            "    left: 27%;",
            "    animation-timing-function: linear;",
            "  }",
            "  #blue {",
            "    background: blue;",
            "    left: 56%;",
            "    animation-timing-function: ease-out;",
            "  }",
            "  @keyframes bounce {",
            "    0% {",
            "      top: 0px;",
            "    }",
            "    100% {",
            "      top: 249px;",
            "    }",
            "  }",
            "</style>",
            "<div class=\"balls\" id= \"red\"></div>",
            "<div class=\"balls\" id= \"blue\"></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d78a9367417b2b2512aea",
      "title": "Make Motion More Natural Using a Bezier Curve",
      "description": [
        "This challenge animates an element to replicate the movement of a ball being juggled. Prior challenges covered the <code>linear</code> and <code>ease-out</code> cubic Bezier curves, however neither depicts the juggling movement accurately. You need to customize a Bezier curve for this.",
        "The <code>animation-timing-function</code> automatically loops at every keyframe when the <code>animation-iteration-count</code> is set to infinite. Since there is a keyframe rule set in the middle of the animation duration (at <code>50%</code>), it results in two identical animation progressions at the upward and downward movement of the ball.",
        "The following cubic Bezier curve simulates a juggling movement:",
        "<code>cubic-bezier(0.3, 0.4, 0.5, 1.6); </code>",
        "Notice that the value of y2 is larger than 1. Although the cubic Bezier curve is mapped on an 1 by 1 coordinate system, and it can only accept x values from 0 to 1, the y value can be set to numbers larger than one. This results in a bouncing movement that is ideal for simulating the juggling ball.",
        "<hr>",
        "Change value of the <code>animation-timing-function</code> of the element with the id of <code>green</code> to a <code>cubic-bezier</code> function with x1, y1, x2, y2 values set respectively to 0.311, 0.441, 0.444, 1.649."
      ],
      "tests": [
        {
          "text": "The value of the <code>animation-timing-function</code> property for the element with the id <code>green</code> should be a <code>cubic-bezier</code> function with x1, y1, x2, y2 values as specified.",
          "testString": "assert($('#green').css('animation-timing-function') == 'cubic-bezier(0.311, 0.441, 0.444, 1.649)', 'The value of the <code>animation-timing-function</code> property for the element with the id <code>green</code> should be a <code>cubic-bezier</code> function with x1, y1, x2, y2 values as specified.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style>",
            "  .balls {",
            "    border-radius: 50%;",
            "    top: 249px;",
            "    position: fixed;  ",
            "    width: 50px;",
            "    height: 50px;",
            "    top: 60%;",
            "    animation-name: jump;",
            "    animation-duration: 2s;",
            "    animation-iteration-count: infinite;",
            "  }",
            "  #red {",
            "    background: red;",
            "    left: 25%;",
            "    animation-timing-function: linear;",
            "  }",
            "  #blue {",
            "    background: blue;",
            "    left: 50%;",
            "    animation-timing-function: ease-out;",
            "  }",
            "  #green {",
            "    background: green;",
            "    left: 75%;",
            "    animation-timing-function: cubic-bezier(0.69, 0.1, 1, 0.1);",
            "  }",
            "",
            "  @keyframes jump {",
            "    50% {",
            "      top: 10%;",
            "    }",
            "  }",
            "</style>",
            "<div class=\"balls\" id=\"red\"></div>",
            "<div class=\"balls\" id=\"blue\"></div>",
            "<div class=\"balls\" id=\"green\"></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    }
  ]
}