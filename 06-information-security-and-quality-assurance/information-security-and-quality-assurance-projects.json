{
  "name": "Information Security and Quality Assurance Projects",
  "order": 4,
  "time": "150 hours",
  "helpRoom": "HelpBackend",
  "challenges": [
    {
      "id": "587d8249367417b2b2512c41",
      "title": "Metric-Imperial Converter",
      "description": [
        "构建功能与 <a href='https://hard-twilight.glitch.me/' target='_blank'>https://hard-twilight.glitch.me/</a> 类似的全栈 JavaScript 应用。",
        "你可以在 Glitch 以我们的 starter project 为基础完成此次挑战。完成挑战后请把公共 glitch url（你的应用主页）复制到下面输入框并进行测试！当然你也可以选择 glitch 以外的平台，但请保证项目是公共可访问的，这样我们才能正确测试。",
        "Glitch 地址在 <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-project-metricimpconverter/'>这里</a>你也可以选择在 GitHub clone <a href='https://github.com/freeCodeCamp/boilerplate-project-metricimpconverter/'>这个仓库</a>！如果你使用 Glitch，请记得保存你的项目地址防止丢失！"
      ],
      "tests": [
        {
          "text": "防止 MIME 嗅探。",
          "testString": ""
        },
        {
          "text": "防止跨站脚本（XSS）攻击。",
          "testString": ""
        },
        {
          "text": "GET /api/convert 参数只有一个，其包含数字和单位，返回转换后结果。（提示：查找第一个字母的位置，那是单位的开始位置）",
          "testString": ""
        },
        {
          "text": "实现 gal 到 L 的相互转换。（1 gal 转换为 3.78541 L）",
          "testString": ""
        },
        {
          "text": "实现 lbs 到 kg 的相互转换。（1 lbs 转换为 0.453592 kg）",
          "testString": ""
        },
        {
          "text": "实现 mi 到 km 的相互转换。（1 mi 转换为 1.60934 km）",
          "testString": ""
        },
        {
          "text": "计量单位错误将返回 'invalid unit'。",
          "testString": ""
        },
        {
          "text": "数量错误将返回 'invalid number'。",
          "testString": ""
        },
        {
          "text": "两者都错误将返回 'invalid number and unit'。",
          "testString": ""
        },
        {
          "text": "可在参数中使用分数和小数（如 5、1/2、2.5/6），没有提供数值时默认值为 1.",
          "testString": ""
        },
        {
          "text": "My return will consist of the initNum, initUnit, returnNum, returnUnit, and string spelling out units in format '{initNum} {initial_Units} converts to {returnNum} {return_Units}' with the result rounded to 5 decimals in the string.",
          "testString": ""
        },
        {
          "text": "通过 16 个单元测试。",
          "testString": ""
        },
        {
          "text": "通过 5 个功能测试。",
          "testString": ""
        }
      ],
      "solutions": [],
      "hints": [],
      "challengeType": 4,
      "isRequired": true,
      "releasedOn": "January 15, 2017"
    },
    {
      "id": "587d8249367417b2b2512c42",
      "title": "Issue Tracker",
      "description": [
        "构建功能与 <a href='https://protective-garage.glitch.me/' target='_blank'>https://protective-garage.glitch.me/</a> 类似的全栈 JavaScript 应用。",
        "你可以在 Glitch 以我们的 starter project 为基础完成此次挑战。完成挑战后请把公共 glitch url（你的应用主页）复制到下面输入框并进行测试！当然你也可以选择 glitch 以外的平台，但请保证项目是公共可访问的，这样我们才能正确测试。",
        "Glitch 地址在 <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-project-issuetracker/'>这里</a>你也可以选择在 GitHub clone <a href='https://github.com/freeCodeCamp/boilerplate-project-issuetracker/'>这个仓库</a>！如果你使用 Glitch，请记得保存你的项目地址防止丢失！"
      ],
      "tests": [
        {
          "text": "防止跨站脚本（XSS）攻击。",
          "testString": ""
        },
        {
          "text": "POST /api/issues/{projectname} 参数必须包括 issue_title，issue_text，created_by，可选参数有 assigned_to 和 status_text。",
          "testString": ""
        },
        {
          "text": "对象保存并返回上述字段（无输入时返回空），附加 created_on（date/time），updated_on（date/time），open（boolean，true 代表 open，false 代表 closed），_id。",
          "testString": ""
        },
        {
          "text": "PUT /api/issues/{projectname} 参数为 id 和其所含任何字段的对象。可能返回值为 'successfully updated' 或 'could not update '+id。此操作需更新 updated_on。如果没有接受到任何字段则返回 'no updated field sent'。",
          "testString": ""
        },
        {
          "text": "DELETE /api/issues/{projectname} 参数为 id，用于删除整个 issue。如接收不到 id，返回 'id error'，操作成功返回 'deleted '+id，操作失败返回 'could not delete '+id。",
          "testString": ""
        },
        {
          "text": "GET /api/issues/{projectname} 获取特定项目的全部 issues 信息数组。",
          "testString": ""
        },
        {
          "text": "请求可以通过传参筛选返回内容（例 /api/issues/{project}?open=false），并且支持同时使用多个参数。",
          "testString": ""
        },
        {
          "text": "完成并通过 11 个功能测试。",
          "testString": ""
        }
      ],
      "solutions": [],
      "hints": [],
      "challengeType": 4,
      "isRequired": true,
      "releasedOn": "January 15, 2017"
    },
    {
      "id": "587d824a367417b2b2512c43",
      "title": "Personal Library",
      "description": [
        "构建功能与 <a href='https://spark-cathedral.glitch.me/' target='_blank'>https://spark-cathedral.glitch.me/</a> 类似的全栈 JavaScript 应用。",
        "你可以在 Glitch 以我们的 starter project 为基础完成此次挑战。完成挑战后请把公共 glitch url（你的应用主页）复制到下面输入框并进行测试！Optionally you may choose to write your project on another platform but must be publicly visible for our testing.",
        "Glitch 地址在 <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-project-library/'>这里</a>你也可以选择在 GitHub clone <a href='https://github.com/freeCodeCamp/boilerplate-project-library/'>这个仓库</a>！如果你使用 Glitch，请记得保存你的项目地址防止丢失！"
      ],
      "tests": [
        {
          "text": "客户端不会缓存网站任何内容。",
          "testString": ""
        },
        {
          "text": "headers 总是显示技术支持为 'PHP 4.2.0'（作为安全策略）。",
          "testString": ""
        },
        {
          "text": "post /api/books 传入 title 作参数即可添加书籍，将会返回包含 title 和一个唯一 _id 的对象。",
          "testString": ""
        },
        {
          "text": "get /api/books 检索所有书籍，返回包含所有书籍的数组，每个对象带有 title，_id 和评论数。",
          "testString": ""
        },
        {
          "text": "get /api/books/{id} 检索特定书籍，返回单个对象，包含 _title，_id 和评论列表数组（无评论返回空数组）。",
          "testString": ""
        },
        {
          "text": "post /api/books/{id} 传入 comment 作参数即可添加书评，返回与 get /api/books/{id} 接口相似，并包含最新评论。",
          "testString": ""
        },
        {
          "text": "delete /api/books/{_id} 删除特定书籍，操作成功返回 'delete successful'。",
          "testString": ""
        },
        {
          "text": "请求不存在的书籍时返回 'no book exists'。",
          "testString": ""
        },
        {
          "text": "delete /api/books 删除数据库中所有书籍，操作成功返回 'complete delete successful'。",
          "testString": ""
        },
        {
          "text": "完成并通过 6 个功能测试。",
          "testString": ""
        }
      ],
      "solutions": [],
      "hints": [],
      "challengeType": 4,
      "isRequired": true,
      "releasedOn": "January 15, 2017"
    },
    {
      "id": "587d824a367417b2b2512c44",
      "title": "Stock Price Checker",
      "description": [
        "构建功能与 <a href='https://giant-chronometer.glitch.me/' target='_blank'>https://giant-chronometer.glitch.me/</a> 类似的全栈 JavaScript 应用。",
        "你可以在 Glitch 以我们的 starter project 为基础完成此次挑战。完成挑战后请把公共 glitch url（你的应用主页）复制到下面输入框并进行测试！Optionally you may choose to write your project on another platform but must be publicly visible for our testing.",
        "Glitch 地址在 <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-project-stockchecker/'>这里</a>你也可以选择在 GitHub clone <a href='https://github.com/freeCodeCamp/boilerplate-project-stockchecker/'>这个仓库</a>！如果你使用 Glitch，请记得保存你的项目地址防止丢失！"
      ],
      "tests": [
        {
          "text": "设置网页安全政策（Content Security Policy），只允许加载指定服务器的脚本和样式文件。",
          "testString": ""
        },
        {
          "text": "GET /api/stock-prices 发送纳斯达克报价参数，返回 stockData 对象。",
          "testString": ""
        },
        {
          "text": "stockData 中包括以下字段 stock（string，股票名），price（十进制数字符串），likes（int）。",
          "testString": ""
        },
        {
          "text": "like 字段传入 true，stock 的 like + 1，这个请求每个 ip 应只能接受一次。",
          "testString": ""
        },
        {
          "text": "如果传入两个股票代码，应返回包含两支股票对应信息的数组。但是 like 字段改为 rel_likes（两支股票的 like 数之差）。",
          "testString": ""
        },
        {
          "text": "获取股票现价的好方法：使用第三方 API（把 'GOOG' 改为你需要查询的股票）：https://finance.google.com/finance/info?q=NASDAQ%3aGOOG",
          "testString": ""
        },
        {
          "text": "完成并通过 5 个功能测试。",
          "testString": ""
        }
      ],
      "solutions": [],
      "hints": [],
      "challengeType": 4,
      "isRequired": true,
      "releasedOn": "January 15, 2017"
    },
    {
      "id": "587d824a367417b2b2512c45",
      "title": "Anonymous Message Board",
      "description": [
        "构建功能与 <a href='https://horn-celery.glitch.me/' target='_blank'>https://horn-celery.glitch.me/</a> 类似的全栈 JavaScript 应用。",
        "你可以在 Glitch 以我们的 starter project 为基础完成此次挑战。完成挑战后请把公共 glitch url（你的应用主页）复制到下面输入框并进行测试！当然你也可以选择 glitch 以外的平台，但请保证项目是公共可访问的，这样我们才能正确测试。",
        "Glitch 地址在 <a href='https://glitch.com/#!/import/github/freeCodeCamp/boilerplate-project-messageboard/'>这里</a>你也可以选择在 GitHub clone <a href='https://github.com/freeCodeCamp/boilerplate-project-messageboard/'>这个仓库</a>！如果你使用 Glitch，请记得保存你的项目地址防止丢失！"
      ],
      "tests": [
        {
          "text": "只允许网站在自己的 iFrame 加载。",
          "testString": ""
        },
        {
          "text": "不允许 DNS 预读取",
          "testString": ""
        },
        {
          "text": "允许网站为自己的页面发送 referrer。",
          "testString": ""
        },
        {
          "text": "POST /api/threads/{board} 向某个版发布讨论串，参数为 form data text 和 deletepassword_。（建议重定向到对应版 /b/{board}）保存至少 least _id，text，createdon_(date&time)，bumpedon_(date&time，starts same as created_on)，reported(boolean)，deletepassword_，& replies(array)。",
          "testString": ""
        },
        {
          "text": "POST /api/replies/{board} 回复一个讨论串，参数为 form data text，deletepassword_ 和 threadid_，此操作也会更新 bumped_on 为回复时间。（建议重定向到对应讨论串页面 /b/{board}/{thread_id}）回复对象包含以下字段 saved _id，text，createdon_，deletepassword_ 和 reported。",
          "testString": ""
        },
        {
          "text": "GET /api/threads/{board} 获取最新的 10 个讨论串。reported 和 deletepasswords_ 字段不会传到客户端。",
          "testString": ""
        },
        {
          "text": "GET /api/replies/{board}?thread_id={thread_id} 获取整个讨论串的全部回复。对客户端隐藏 reported 和 deletepasswords_ 字段。",
          "testString": ""
        },
        {
          "text": "DELETE /api/threads/{board} 删除某个讨论串，需传入参数 threadid_ 和 deletepassword_。（返回信息是 'incorrect password' 或 'success'）",
          "testString": ""
        },
        {
          "text": "DELETE /api/replies/{board} 删除一个回复（只把 text 改为 '[deleted]'，不会像讨论串一样完全删除），需传入参数 threadid_，replyid_，和 deletepassword_。（返回信息是 'incorrect password' 或 'success'）",
          "testString": ""
        },
        {
          "text": "PUT /api/threads/{board} 传入 reported 为 true 举报一个讨论串，你还需要传入 threadid_。（返回信息是 'success'）",
          "testString": ""
        },
        {
          "text": "PUT /api/replies/{board}  传入 reported 为 true 举报一个讨论串，你还需要传入 threadid_ 和 replyid_。（返回信息是 'success'）",
          "testString": ""
        },
        {
          "text": "完成所有功能测试，所有接口可用。",
          "testString": ""
        }
      ],
      "solutions": [],
      "hints": [],
      "challengeType": 4,
      "isRequired": true,
      "releasedOn": "January 15, 2017"
    }
  ]
}