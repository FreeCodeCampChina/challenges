{
  "name": "Sass",
  "order": 4,
  "time": "5 hours",
  "helpRoom": "Help",
  "challenges": [
    {
      "id": "587d7dbd367417b2b2512bb4",
      "title": "使用 Sass 变量储存数据",
      "required": [
        {
          "src": "https://cdnjs.cloudflare.com/ajax/libs/sass.js/0.10.9/sass.sync.min.js",
          "raw": true
        }
      ],
      "description": [
        "Sass 不同于 CSS 的一个特点是它使用变量。 类似于 JavaScript，声明变量并赋值存储在内存中。",
        "在 JavaScript 中， 变量是使用 <code>let</code> 和 <code>const</code> 关键字定义的。 在 Sass 中，变量以 <code>$</code> 开头的，后跟变量名",
        "这里有几个例子",
        "<blockquote>$main-fonts: Arial, sans-serif;<br>$headings-color: green;<br><br>//To use variables:<br>h1 {<br>&nbsp;&nbsp;font-family: $main-fonts;<br>&nbsp;&nbsp;color: $headings-color;<br>}</blockquote>",
        "变量有用的一个示例是当多个元素需要设置相同的颜色时，如果要更改颜色，只需要改变变量值",
        "<hr>",
        "创建一个变量 <code>$text-color<code> 并将其设置为红色。然后更改 <code>.blog-post<code> 的 <code>color<code> 属性的值， <code>h2<code> 到 <code>$text-color<code> 变量。"
      ],
      "tests": [
        {
          "text": "你的代码应该为 <code>$text-color</code> 声明一个值为红色的 Sass 变量。",
          "testString" "assert(code.match(/\\$text-color:\\s*?red;/g), '你的代码应该为 <code>$text-color</code> 声明一个 Sass 变量，其值为 red。');"
        },
        {
          "text": "你的代码应使用 <code>$text-color</code> 变量来更改 <code>.blog-post</code> 和 <code>h2</code> 的 <code> 颜色 </code>。",
           "testString" "assert(code.match(/color:\\s*?\\$text-color;/g), '你的代码应使用 <code>$text-color</code> 变量来更改 <code>.blog-post</code> 和 <code>h2</code> 的 <code> 颜色 </code>。');"
        },
        {
          "text": "你的 <code>.blog-post<code> 元素应该具有红色的 </code> 颜色 </code>。",
           "testString" "assert($('.blog-post').css('color') == 'rgb(255, 0, 0)', '你的代码应使用 <code>$text-color</code> 变量来更改 <code>.blog-post</code> 和 <code>h2</code> 的 <code> 颜色 </code>。');"
        },
        {
          "text": "你的 <code>h2</code> 元素应该具有红色的 </code> 颜色 </code>。",
           "testString" "assert($('h2').css('color') == 'rgb(255, 0, 0)', '你的 <code>h2</code> 元素应该具有红色的 </code> 颜色 </code>。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style type='text/sass'>",
            "  ",
            "  ",
            "  .header{",
            "    text-align: center;",
            "  }",
            "  .blog-post, h2 {",
            "    color: red;",
            "  }",
            "</style>",
            "",
            "<h1 class=\"header\">Learn Sass</h1>",
            "<div class=\"blog-post\">",
            "  <h2>Some random title</h2>",
            "  <p>This is a paragraph with some random text in it</p>",
            "</div>",
            "<div class=\"blog-post\">",
            "  <h2>Header #2</h2>",
            "  <p>Here is some more random text.</p>",
            "</div>",
            "<div class=\"blog-post\">",
            "  <h2>Here is another header</h2>",
            "  <p>Even more random text within a paragraph</p>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7dbd367417b2b2512bb5",
      "title": "使用 Sass 嵌套CSS",
      "required": [
        {
          "src": "https://cdnjs.cloudflare.com/ajax/libs/sass.js/0.10.9/sass.sync.min.js",
          "raw": true
        }
      ],
      "description": [
        "Sass 允许 CSS 规则的 <code> 嵌套 </code>，这是组织样式表的有用方法。",
        "通常情况下，每个元素都针对不同的线条进行设计，如下所示：",
        "<blockquote>nav {<br>&nbsp;&nbsp;background-color: red;<br>}<br><br>nav ul {<br>&nbsp;&nbsp;list-style: none;<br>}<br><br>nav ul li {<br>&nbsp;&nbsp;display: inline-block;<br>}</blockquote>",
        "对于一个大型项目，CSS 文件将有许多行和规则。这就是 <code> 嵌套 </code> 可以通过在相应的父元素中放置子样式规则来帮助组织代码：",
        "<blockquote>nav {<br>&nbsp;&nbsp;background-color: red;<br><br>&nbsp;&nbsp;ul {<br>&nbsp;&nbsp;&nbsp;&nbsp;list-style: none;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;li {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;display: inline-block;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>}<br></blockquote>",
        "<hr>",
        "使用上面显示的 <code>nesting</code> 技术为 <code>.blog-post<code> 元素的两个子元素重新组织 CSS 规则。出于测试目的，<code>h1</code> 应该出现在 <code>p</code> 元素之前。"
      ],
      "tests": [
        {
          "text": "你的代码应重新组织 CSS 规则，以便 <code>h1</code> 和 <code>p</code> 嵌套在 <code>.blog-post</code> 父元素中。",
          "testString": "assert(code.match(/\\.blog-post\\s*?{\\s*?h1\\s*?{\\s*?text-align:\\s*?center;\\s*?color:\\s*?blue;\\s*?}\\s*?p\\s*?{\\s*?font-size:\\s*?20px;\\s*?}\\s*?}/gi), '你的代码应重新组织 CSS 规则，以便 <code>h1</code> 和 <code>p</code> 嵌套在 <code>.blog-post<code> 父元素中。);"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style type='text/sass'>",
            "  .blog-post {",
            "    ",
            "  }",
            "  h1 {",
            "    text-align: center;",
            "    color: blue;",
            "  }",
            "  p {",
            "    font-size: 20px;",
            "  }",
            "</style>",
            "",
            "<div class=\"blog-post\">",
            "  <h1>Blog Title</h1>",
            "  <p>This is a paragraph</p>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7dbd367417b2b2512bb6",
      "title": "使用 Mixins 创建可重用的CSS",
      "required": [
        {
          "src": "https://cdnjs.cloudflare.com/ajax/libs/sass.js/0.10.9/sass.sync.min.js",
          "raw": true
        }
      ],
      "description": [
        "在 Sass 中，<code>mixin</code> 是一组 CSS 声明，可以在整个样式表中重复使用。",
        "较新的 CSS 功能需要一段时间适配所有浏览器后才能完全使用。随着浏览器的不断升级，使用它们的 CSS 规则可能需要供应商前缀。考虑\"box-shadow\":",
        "<blockquote>div {<br>&nbsp;&nbsp;-webkit-box-shadow: 0px 0px 4px #fff;<br>&nbsp;&nbsp;-moz-box-shadow: 0px 0px 4px #fff;<br>&nbsp;&nbsp;-ms-box-shadow: 0px 0px 4px #fff;<br>&nbsp;&nbsp;box-shadow: 0px 0px 4px #fff;<br>}</blockquote>",
        "对于所有具有 <code>box-shadow</code> 属性的元素重写此规则，或者更改每个值以测试不同的效果，需要进行大量的输入。",
        "<code>Mixins</code> 就像 CSS 的函数。以下是如何编写一个：",
        "<blockquote>@mixin box-shadow($x, $y, $blur, $c){ <br>&nbsp;&nbsp;-webkit-box-shadow: $x, $y, $blur, $c;<br>&nbsp;&nbsp;-moz-box-shadow: $x, $y, $blur, $c;<br>&nbsp;&nbsp;-ms-box-shadow: $x, $y, $blur, $c;<br>&nbsp;&nbsp;box-shadow: $x, $y, $blur, $c;<br>}</blockquote>",
        "定义以 <code>@mixin</code> 开头，后跟自定义名称。参数（<code>$x</code>，<code>$y</code>，<code>$blur</code>，以及上例中的 <code>$c</code> 是可选的。",
        "现在，只要需要 <code>box-shadow</code> 规则，只需要调用 <code>mixin</code> 的一行代替必须输入所有供应商前缀。<code>mixin</code > 使用 <code>@include</code> 指令调用：",
        "<blockquote>div {<br>&nbsp;&nbsp;@include box-shadow(0px, 0px, 4px, #fff);<br>}</blockquote>",
        "<hr>",
        "为 <code>border-radius</code> 写一个 <code>mixin</code>，并给它一个 <code>$radius</code> 参数。它应该使用示例中的所有供应商前缀。然后使用 <code>border-radius</code> <code>mixin</code> 为 <code>#awesome</code> 元素提供15px的边框半径。"
      ],
      "tests": [
        {
          "text": "你的代码应声明名为 <code>border-radius</code> 的 <code>mixin</code>，其中包含名为 <code>$radius</code> 的参数。",
          "testString": "assert(code.match(/@mixin\\s+?border-radius\\s*?\\(\\s*?\\$radius\\s*?\\)\\s*?{/gi), '你的代码应声明名为 <code>border-radius</code> 的 <code>mixin</code>，其中包含名为 <code>$radius</code> 的参数。');"
        },
        {
          "text": "你的代码应包含使用 <code>$radius</code> 参数的 <code>-webkit-border-radius</code> 供应商前缀。",
          "testString": "assert(code.match(/-webkit-border-radius:\\s*?\\$radius;/gi), '你的代码应包含使用 <code>$radius</code> 参数的 <code>-webkit-border-radius</code> 供应商前缀。');"
        },
        {
          "text": "你的代码应包含使用 <code>$radius</code> 参数的 <code>-moz-border-radius</code> 供应商前缀。",
          "testString": "assert(code.match(/-moz-border-radius:\\s*?\\$radius;/gi), '你的代码应包含使用 <code>$radius</code> 参数的 <code>-moz-border-radius</code> 供应商前缀。');"
        },
        {
          "text": "你的代码应包含使用 <code>$radius</code> 参数的 <code>-ms-border-radius</code> 供应商前缀。",
          "testString": "assert(code.match(/-ms-border-radius:\\s*?\\$radius;/gi), '你的代码应包含使用 <code>$radius</code> 参数的 <code>-ms-border-radius</code> 供应商前缀。');"
        },
        {
          "text": "你的代码应包含使用 <code>$radius</code> 参数的常规 <code>border-radius</code> 规则。",
          "testString": "assert(code.match(/border-radius:\\s*?\\$radius;/gi).length == 4, '你的代码应包含使用 <code>$radius</code> 参数的常规 <code>border-radius</code> 规则。');"
        },
        {
          "text": "你的代码应使用 <code>@include</code> 关键字调用 <code>border-radius mixin</code>，并将其设置为15px。",
          "testString": "assert(code.match(/@include\\s+?border-radius\\(\\s*?15px\\s*?\\);/gi), '你的代码应使用 <code>@include</code> 关键字调用 <code>border-radius mixin</code>，并将其设置为15px。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style type='text/sass'>",
            "  ",
            "  ",
            "  ",
            "  #awesome {",
            "    width: 150px;",
            "    height: 150px;",
            "    background-color: green;",
            "    ",
            "  }",
            "</style>",
            "",
            "<div id=\"awesome\"></div>",
            "  "
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7dbe367417b2b2512bb8",
      "title": "使用@if和@else将逻辑添加到你的样式",
      "required": [
        {
          "src": "https://cdnjs.cloudflare.com/ajax/libs/sass.js/0.10.9/sass.sync.min.js",
          "raw": true
        }
      ],
      "description": [
        "Sass中的 <code>@if</code> 指令对于测试特定情况非常有用 - 它的工作方式与JavaScript</code> 中的 <code>if</code> 语句类似。",
        "<blockquote>@mixin make-bold($bool) {<br>&nbsp;&nbsp;@if $bool == true {<br>&nbsp;&nbsp;&nbsp;&nbsp;font-weight: bold;<br>&nbsp;&nbsp;}<br>}</blockquote>",
        "就像在 JavaScript 中一样，<code>@else if</code> 和 <code>@else</code> 测试更多条件：",
        "<blockquote>@mixin text-effect($val) {<br>&nbsp;&nbsp;@if $val == danger {<br>&nbsp;&nbsp;&nbsp;&nbsp;color: red;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;@else if $val == alert {<br>&nbsp;&nbsp;&nbsp;&nbsp;color: yellow;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;@else if $val == success {<br>&nbsp;&nbsp;&nbsp;&nbsp;color: green;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;@else {<br>&nbsp;&nbsp;&nbsp;&nbsp;color: black;<br>&nbsp;&nbsp;}<br>}</blockquote>",
        "<hr>",
        "创建一个名为 <code>border-stroke</code> 的 <code>mixin</code>，它接受一个参数 <code>$val</code>。 <code>mixin</code> 应使用 <code>@if</code>，<code>@else if</code> 和 <code>@else</code> 检查以下条件：",
        "<blockquote>light - 1px solid black<br>medium - 3px solid black<br>heavy - 6px solid black<br>none - no border</blockquote>"
      ],
      "tests": [
        {
          "text": "你的代码应该声明一个名为 <code>border-stroke</code> 的 <code>mixin</code>，它有一个名为 <code>$val</code> 的参数。",
          "testString": "assert(code.match(/@mixin\\s+?border-stroke\\s*?\\(\\s*?\\$val\\s*?\\)\\s*?{/gi), '你的代码应该声明一个名为 <code>border-stroke</code> 的 <code>mixin</code>，它有一个名为 <code>$val</code> 的参数。');"
        },
        {
          "text": "你的 <code>mixin</code> 应该有一个 <code>@if</code> 语句来检查 <code>$val</code> 是否很轻，并将 <code>border</code> 设置为 1px纯黑色。",
          "testString": "assert(code.match(/@if\\s+?\\$val\\s*?===?\\s*?light\\s*?{\\s*?border\\s*?:\\s*?1px\\s+?solid\\s+?black\\s*?;\\s*?}/gi), '你的 <code>mixin</code> 应该有一个 <code>@if</code> 语句来检查 <code>$val</code> 是否很轻，并将 <code>border</code> 设置为 1px纯黑色。');"
        },
        {
          "text": "你的 <code>mixin</code> 应该有一个 <code>@else if</code> 语句来检查 <code>$val</code> 是否中等，并设置 <code>border</code> 为3px纯黑色。",
          "testString": "assert(code.match(/@else\\s+?if\\s+?\\$val\\s*?===?\\s*?medium\\s*?{\\s*?border\\s*?:\\s*?3px\\s+?solid\\s+?black\\s*?;\\s*?}/gi), '你的 <code>mixin</code> 应该有一个 <code>@else if</code> 语句来检查 <code>$val</code> 是否中等，并设置 <code>border</code> 为3px纯黑色。');"
        },
        {
          "text": "你的 <code>mixin</code> 应该有一个 <code>@else if</code> 语句来检查 <code>$val</code> 是否很重，并设置 <code>border</code> 为6px纯黑色。",
          "testString": "assert(code.match(/@else\\s+?if\\s+?\\$val\\s*?===?\\s*?heavy\\s*?{\\s*?border\\s*?:\\s*?6px\\s+?solid\\s+?black\\s*?;\\s*?}/gi), '你的 <code>mixin</code> 应该有一个 <code>@else if</code> 语句来检查 <code>$val</code> 是否很重，并设置 <code>border</code> 为6px纯黑色。');"
        },
        {
          "text": "你的 <code>mixin</code> 应该有一个 <code>@else</code> 语句来将 <code>border</code> 设置为none。",
          "testString": "assert(code.match(/@else\\s*?{\\s*?border\\s*?:\\s*?none\\s*?;\\s*?}/gi), '你的 <code>mixin</code> 应该有一个 <code>@else</code> 语句来将 <code>border</code> 设置为none。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style type='text/sass'>",
            "  ",
            "  ",
            "  ",
            "  #box {",
            "    width: 150px;",
            "    height: 150px;",
            "    background-color: red;",
            "    @include border-stroke(medium);",
            "  }  ",
            "</style>",
            "",
            "<div id=\"box\"></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7dbe367417b2b2512bb9",
      "title": "使用@for创建Sass循环",
      "required": [
        {
          "src": "https://cdnjs.cloudflare.com/ajax/libs/sass.js/0.10.9/sass.sync.min.js",
          "raw": true
        }
      ],
      "description": [
        "非常类似于JavaScript中的 <code>for</code> 循环，<code>@for</code> 指令在循环中添加样式。",
        "<code>@for</code> 以两种方式使用：\"start through end \"或\"start to end \"。 主要区别在于“开始结束”<em> 排除 </em> 结束号码，而“开始结束”<em> 包括 </em> 结束号码。",
        "这是一个开始 <b> 到 </ b> 结束示例：",
        "<blockquote>@for $i from 1 through 12 {<br>&nbsp;&nbsp;.col-#{$i} { width: 100%/12 * $i; }<br>}</blockquote>",
        "<code>#{$i}</code> 部分是将变量（<code>i</code>）与文本组合成字符串的语法。 当Sass文件转换为CSS时，它看起来像这样：",
        "<blockquote>.col-1 {<br>&nbsp;&nbsp;width: 8.33333%;<br>}<br><br>.col-2 {<br>&nbsp;&nbsp;width: 16.66667%;<br>}<br><br>...<br><br>.col-12 {<br>&nbsp;&nbsp;width: 100%;<br>}</blockquote>",
        "这是创建网格布局的有效方法。 现在，你有12个可用作CSS类的列宽选项。",
        "<hr>",
        "编写 <code>@for</code> 指令，该指令采用从 <b> 到 </ b> 6的变量 <code>$j</code>。",
        "它应该创建5个名为 <code>.text-1</code> 的类到 <code>.text-5</code>，其中每个类的 <code>font-size</code> 设置为10px乘以索引。"
      ],
      "tests": [
        {
          "text": "你的代码应使用 <code>@for</code> 指令。",
          "testString": "assert(code.match(/@for /g), '你的代码应使用 <code>@for</code> 指令。');"
        },
        {
          "text": "你的 <code>.text-1</code> 类的 <code>font-size</code> 应为10px。",
          "testString": "assert($('.text-1').css('font-size') == '10px', '你的 <code>.text-1</code> 类的 <code>font-size</code> 应为10px。');"
        },
        {
          "text": "你的 <code>.text-2</code> 类的 <code>font-size</code> 应为20px。",
          "testString": "assert($('.text-2').css('font-size') == '20px', '你的 <code>.text-2</code> 类的 <code>font-size</code> 应为20px。');"
        },
        {
          "text": "你的 <code>.text-3</code> 类的 <code>font-size</code> 应为30px。",
          "testString": "assert($('.text-3').css('font-size') == '30px', '你的 <code>.text-3</code> 类的 <code>font-size</code> 应为30px。');"
        },
        {
          "text": "你的 <code>.text-4</code> 类的 <code>font-size</code> 应为40px。",
          "testString": "assert($('.text-4').css('font-size') == '40px', '你的 <code>.text-4</code> 类的 <code>font-size</code> 应为40px。');"
        },
        {
          "text": "你的 <code>.text-5</code> 类的 <code>font-size</code> 应为50px。",
          "testString": "assert($('.text-5').css('font-size') == '50px', '你的 <code>.text-5</code> 类的 <code>font-size</code> 应为50px。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style type='text/sass'>",
            "  ",
            "  ",
            "  ",
            "</style>",
            "",
            "<p class=\"text-1\">Hello</p>",
            "<p class=\"text-2\">Hello</p>",
            "<p class=\"text-3\">Hello</p>",
            "<p class=\"text-4\">Hello</p>",
            "<p class=\"text-5\">Hello</p>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7dbf367417b2b2512bba",
      "title": "使用@each映射列表中的项目",
      "required": [
        {
          "src": "https://cdnjs.cloudflare.com/ajax/libs/sass.js/0.10.9/sass.sync.min.js",
          "raw": true
        }
      ],
      "description": [
        "最后一个挑战显示了 <code>@for</code> 指令如何使用起始值和结束值循环一定次数。 Sass还提供 <code>@each</code> 指令，该指令循环遍历列表或映射中的每个项目。",
        "在每次迭代时，变量将从列表或映射分配给当前值。",
        "<blockquote>@each $color in blue, red, green {<br>&nbsp;&nbsp;.#{$color}-text {color: $color;}<br>}</blockquote>",
        "map 的语法略有不同。 这是一个例子：",
        "<blockquote>$colors: (color1: blue, color2: red, color3: green);<br><br>@each $key, $color in $colors {<br>&nbsp;&nbsp;.#{$color}-text {color: $color;}<br>}</blockquote>",
        "请注意，需要 <code>$key</code> 变量来引用 map 中的键。 否则，编译后的CSS将包含 <code>color1</code>，<code>color2</code> ...",
        "以上两个代码示例都转换为以下CSS：",
        "<blockquote>.blue-text {<br>&nbsp;&nbsp;color: blue;<br>}<br><br>.red-text {<br>&nbsp;&nbsp;color: red;<br>}<br><br>.green-text {<br>&nbsp;&nbsp;color: green;<br>}</blockquote>",
        "<hr>",
        "编写一个 <code>@each</code> 指令，通过一个列表：<code>blue，black，red</code> 并将每个变量分配给 <code>.color-bg</code> 类，其中 每个项目的“颜色”部分都会发生变化。",
        "每个类都应该将 <code>background-color</code> 设置为相应的颜色。"
      ],
      "tests": [
        {
          "text": "你的代码应使用 <code>@each</code> 指令。",
          "testString": "assert(code.match(/@each /g), '你的代码应使用 <code>@each</code> 指令。');"
        },
        {
          "text": "你的 <code>.blue-bg</code> 类应该具有蓝色的 <code>background-color</code>。",
          "testString": "assert($('.blue-bg').css('background-color') == 'rgb(0, 0, 255)', '你的 <code>.blue-bg</code> 类应该具有蓝色的 <code>background-color</code>。');"
        },
        {
          "text": "你的 <code>.black-bg</code> 类应该具有黑色的 <code>background-color</code>。",
          "testString": "assert($('.black-bg').css('background-color') == 'rgb(0, 0, 0)', '你的 <code>.black-bg</code> 类应该具有黑色的 <code>background-color</code>。');"
        },
        {
          "text": "你的 <code>.red-bg</code> 类应该具有红色的 <code>background-color</code>。",
          "testString": "assert($('.red-bg').css('background-color') == 'rgb(255, 0, 0)', '你的 <code>.red-bg</code> 类应该具有红色的 <code>background-color</code>。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style type='text/sass'>",
            "  ",
            "  ",
            "  ",
            "  div {",
            "    height: 200px;",
            "    width: 200px;",
            "  }",
            "</style>",
            "",
            "<div class=\"blue-bg\"></div>",
            "<div class=\"black-bg\"></div>",
            "<div class=\"red-bg\"></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7dbf367417b2b2512bbb",
      "title": "Apply a Style Until a Condition is Met with @while",
      "required": [
        {
          "src": "https://cdnjs.cloudflare.com/ajax/libs/sass.js/0.10.9/sass.sync.min.js",
          "raw": true
        }
      ],
      "description": [
        "The <code>@while</code> directive is an option with similar functionality to the JavaScript <code>while</code> loop. It creates CSS rules until a condition is met.",
        "The <code>@for</code> challenge gave an example to create a simple grid system. This can also work with <code>@while</code>.",
        "<blockquote>$x: 1;<br>@while $x < 13 {<br>&nbsp;&nbsp;.col-#{$x} { width: 100%/12 * $x;}<br>&nbsp;&nbsp;$x: $x + 1;<br>}</blockquote>",
        "First, define a variable <code>$x</code> and set it to 1. Next, use the <code>@while</code> directive to create the grid system <i>while</i> <code>$x</code> is less than 13.",
        "After setting the CSS rule for <code>width</code>, <code>$x</code> is incremented by 1 to avoid an infinite loop.",
        "<hr>",
        "Use <code>@while</code> to create a series of classes with different <code>font-sizes</code>.",
        "There should be 10 different classes from <code>text-1</code> to <code>text-10</code>. Then set <code>font-size</code> to 5px multiplied by the current index number. Make sure to avoid an infinite loop!"
      ],
      "tests": [
        {
          "text": "Your code should use the <code>@while</code> directive.",
          "testString": "assert(code.match(/@while /g), 'Your code should use the <code>@while</code> directive.');"
        },
        {
          "text": "Your code should set an index variable to 1 to start.",
          "testString": "assert(code.match(/\\$.*:\\s*?1;/gi), 'Your code should set an index variable to 1 to start.');"
        },
        {
          "text": "Your code should increment the counter variable.",
          "testString": "assert(code.match(/\\$(.*):\\s*?\\$\\1\\s*?\\+\\s*?1;/gi), 'Your code should increment the counter variable.');"
        },
        {
          "text": "Your <code>.text-1</code> class should have a <code>font-size</code> of 5px.",
          "testString": "assert($('.text-1').css('font-size') == '5px', 'Your <code>.text-1</code> class should have a <code>font-size</code> of 5px.');"
        },
        {
          "text": "Your <code>.text-2</code> class should have a <code>font-size</code> of 10px.",
          "testString": "assert($('.text-2').css('font-size') == '10px', 'Your <code>.text-2</code> class should have a <code>font-size</code> of 10px.');"
        },
        {
          "text": "Your <code>.text-3</code> class should have a <code>font-size</code> of 15px.",
          "testString": "assert($('.text-3').css('font-size') == '15px', 'Your <code>.text-3</code> class should have a <code>font-size</code> of 15px.');"
        },
        {
          "text": "Your <code>.text-4</code> class should have a <code>font-size</code> of 20px.",
          "testString": "assert($('.text-4').css('font-size') == '20px', 'Your <code>.text-4</code> class should have a <code>font-size</code> of 20px.');"
        },
        {
          "text": "Your <code>.text-5</code> class should have a <code>font-size</code> of 25px.",
          "testString": "assert($('.text-5').css('font-size') == '25px', 'Your <code>.text-5</code> class should have a <code>font-size</code> of 25px.');"
        },
        {
          "text": "Your <code>.text-6</code> class should have a <code>font-size</code> of 30px.",
          "testString": "assert($('.text-6').css('font-size') == '30px', 'Your <code>.text-6</code> class should have a <code>font-size</code> of 30px.');"
        },
        {
          "text": "Your <code>.text-7</code> class should have a <code>font-size</code> of 35px.",
          "testString": "assert($('.text-7').css('font-size') == '35px', 'Your <code>.text-7</code> class should have a <code>font-size</code> of 35px.');"
        },
        {
          "text": "Your <code>.text-8</code> class should have a <code>font-size</code> of 40px.",
          "testString": "assert($('.text-8').css('font-size') == '40px', 'Your <code>.text-8</code> class should have a <code>font-size</code> of 40px.');"
        },
        {
          "text": "Your <code>.text-9</code> class should have a <code>font-size</code> of 45px.",
          "testString": "assert($('.text-9').css('font-size') == '45px', 'Your <code>.text-9</code> class should have a <code>font-size</code> of 45px.');"
        },
        {
          "text": "Your <code>.text-10</code> class should have a <code>font-size</code> of 50px.",
          "testString": "assert($('.text-10').css('font-size') == '50px', 'Your <code>.text-10</code> class should have a <code>font-size</code> of 50px.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style type='text/sass'>",
            "  ",
            "  ",
            "  ",
            "</style>",
            "",
            "<p class=\"text-1\">Hello</p>",
            "<p class=\"text-2\">Hello</p>",
            "<p class=\"text-3\">Hello</p>",
            "<p class=\"text-4\">Hello</p>",
            "<p class=\"text-5\">Hello</p>",
            "<p class=\"text-6\">Hello</p>",
            "<p class=\"text-7\">Hello</p>",
            "<p class=\"text-8\">Hello</p>",
            "<p class=\"text-9\">Hello</p>",
            "<p class=\"text-10\">Hello</p>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7dbf367417b2b2512bbc",
      "title": "Split Your Styles into Smaller Chunks with Partials",
      "required": [
        {
          "src": "https://cdnjs.cloudflare.com/ajax/libs/sass.js/0.10.9/sass.sync.min.js",
          "raw": true
        }
      ],
      "description": [
        "<code>Partials</code> in Sass are separate files that hold segments of CSS code. These are imported and used in other Sass files. This is a great way to group similar code into a module to keep it organized.",
        "Names for <code>partials</code> start with the underscore (<code>_</code>) character, which tells Sass it is a small segment of CSS and not to convert it into a CSS file. Also, Sass files end with the <code>.scss</code> file extension. To bring the code in the <code>partial</code> into another Sass file, use the <code>@import</code> directive.",
        "For example, if all your <code>mixins</code> are saved in a <code>partial</code> named \"_mixins.scss\", and they are needed in the \"main.scss\" file, this is how to use them in the main file:",
        "<blockquote>// In the main.scss file<br><br>@import 'mixins'</blockquote>",
        "Note that the underscore is not needed in the <code>import</code> statement - Sass understands it is a <code>partial</code>. Once a <code>partial</code> is imported into a file, all variables, <code>mixins</code>, and other code are available to use.",
        "<hr>",
        "Write an <code>@import</code> statement to import a <code>partial</code> named <code>_variables.scss</code> into the main.scss file."
      ],
      "tests": [
        {
          "text": "Your code should use the <code>@import</code> directive, and should not include the underscore in the file name.",
          "testString": "assert(code.match(/@import\\s+?('|\")variables\\1/gi), 'Your code should use the <code>@import</code> directive, and should not include the underscore in the file name.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "// The main.scss file",
            "",
            "",
            "",
            ""
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7fa5367417b2b2512bbd",
      "title": "Extend One Set of CSS Styles to Another Element",
      "required": [
        {
          "src": "https://cdnjs.cloudflare.com/ajax/libs/sass.js/0.10.9/sass.sync.min.js",
          "raw": true
        }
      ],
      "description": [
        "Sass has a feature called <code>extend</code> that makes it easy to borrow the CSS rules from one element and build upon them in another.",
        "For example, the below block of CSS rules style a <code>.panel</code> class. It has a <code>background-color</code>, <code>height</code> and <code>border</code>.",
        "<blockquote>.panel{<br>&nbsp;&nbsp;background-color: red;<br>&nbsp;&nbsp;height: 70px;<br>&nbsp;&nbsp;border: 2px solid green;<br>}</blockquote>",
        "Now you want another panel called <code>.big-panel</code>. It has the same base properties as <code>.panel</code>, but also needs a <code>width</code> and <code>font-size</code>.",
        "It's possible to copy and paste the initial CSS rules from <code>.panel</code>, but the code becomes repetitive as you add more types of panels.",
        "The <code>extend</code> directive is a simple way to reuse the rules written for one element, then add more for another:",
        "<blockquote>.big-panel{<br>&nbsp;&nbsp;@extend .panel;<br>&nbsp;&nbsp;width: 150px;<br>&nbsp;&nbsp;font-size: 2em;<br>}</blockquote>",
        "The <code>.big-panel</code> will have the same properties as <code>.panel</code> in addition to the new styles.",
        "<hr>",
        "Make a class <code>.info-important</code> that extends <code>.info</code> and also has a <code>background-color</code> set to magenta."
      ],
      "tests": [
        {
          "text": "Your <code>info-important</code> class should have a <code>background-color</code> set to <code>magenta</code>.",
          "testString": "assert(code.match(/\\.info-important\\s*?{[\\s\\S]*background-color\\s*?:\\s*?magenta\\s*?;[\\s\\S]*}/gi), 'Your <code>info-important</code> class should have a <code>background-color</code> set to <code>magenta</code>.');"
        },
        {
          "text": "Your <code>info-important</code> class should use <code>@extend</code> to inherit the styling from the <code>info</code> class.",
          "testString": "assert(code.match(/\\.info-important\\s*?{[\\s\\S]*@extend\\s*?.info\\s*?;[\\s\\S]*/gi), 'Your <code>info-important</code> class should use <code>@extend</code> to inherit the styling from the <code>info</code> class.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style type='text/sass'>",
            "  h3{",
            "    text-align: center;",
            "  }",
            "  .info{",
            "    width: 200px;",
            "    border: 1px solid black;",
            "    margin: 0 auto;",
            "  }",
            "  ",
            "  ",
            "  ",
            "  ",
            "</style>",
            "<h3>Posts</h3>",
            "<div class=\"info-important\">",
            "  <p>This is an important post. It should extend the class \".info\" and have its own CSS styles.</p>",
            "</div>",
            "",
            "<div class=\"info\">",
            "  <p>This is a simple post. It has basic styling and can be extended for other uses.</p>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    }
  ]
}
