{
  "name": "Sass",
  "order": 4,
  "time": "5 hours",
  "helpRoom": "Help",
  "challenges": [
    {
      "id": "587d7dbd367417b2b2512bb4",
      "title": "使用sass变量储存数据",
      "required": [
        {
          "src": "https://cdnjs.cloudflare.com/ajax/libs/sass.js/0.10.9/sass.sync.min.js",
          "raw": true
        }
      ],
      "description": [
        "Sass不同于CSS的一个特点是它使用变量。 类似于JavaScript，它们被声明并设置为存储数据"，
        "在JavaScript中， 变量是使用 <code>let</code> 和 <code>const</code> 关键字定义的。 在 Sass 中，变量以 <code>$</code> 开头的，后跟变量名"，
        "这里有几个例子"，
        "<blockquote>$main-fonts: Arial, sans-serif;<br>$headings-color: green;<br><br>//To use variables:<br>h1 {<br>&nbsp;&nbsp;font-family: $main-fonts;<br>&nbsp;&nbsp;color: $headings-color;<br>}</blockquote>",
        "变量有用的一个示例是当多个元素需要设置相同的颜色时，如果要更改颜色，只需要改变变量值"，
        "<hr>",
        "创建一个变量 <code> $text-color </code> 并将其设置为红色。然后更改 <code> .blog-post </code> 的 <code> color </code> 属性的值， <code> h2 </code> 到 <code> $ text-color </code> 变量。"
      ],
      "tests": [
        {
          "text": "您的代码应该为 <code>$text-color</code> 声明一个值为红色的Sass变量。"，
          "testString" "assert(code.match(/\\$text-color:\\s*?red;/g), '你的代码应该为<code>$text-color</code>声明一个Sass变量，其值为red。');"
        },
        {
          "text": "您的代码应使用 <code>$text-color</code> 变量来更改 <code>.blog-post</code> 和 <code>h2</code> 的 <code> 颜色 </code>。"，
           "testString" "assert(code.match(/color:\\s*?\\$text-color;/g), '您的代码应使用 <code>$text-color</code> 变量来更改 <code>.blog-post</code> 和 <code>h2</code> 的 <code> 颜色 </code>。');"
        },
        {
          "text": "您的 <code> .blog-post </code> 元素应该具有红色的 </code> 颜色 </code>。"，
           "testString" "assert($('.blog-post').css('color') == 'rgb(255, 0, 0)', '您的代码应使用 <code>$text-color</code> 变量来更改 <code>.blog-post</code> 和 <code>h2</code> 的 <code> 颜色 </code>。');"
        },
        {
          "text": "您的 <code>h2</code> 元素应该具有红色的 </code> 颜色 </code>。"，
           "testString" "assert($('h2').css('color') == 'rgb(255, 0, 0)', '您的 <code>h2</code> 元素应该具有红色的 </code> 颜色 </code>。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style type='text/sass'>",
            "  ",
            "  ",
            "  .header{",
            "    text-align: center;",
            "  }",
            "  .blog-post, h2 {",
            "    color: red;",
            "  }",
            "</style>",
            "",
            "<h1 class=\"header\">Learn Sass</h1>",
            "<div class=\"blog-post\">",
            "  <h2>Some random title</h2>",
            "  <p>This is a paragraph with some random text in it</p>",
            "</div>",
            "<div class=\"blog-post\">",
            "  <h2>Header #2</h2>",
            "  <p>Here is some more random text.</p>",
            "</div>",
            "<div class=\"blog-post\">",
            "  <h2>Here is another header</h2>",
            "  <p>Even more random text within a paragraph</p>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7dbd367417b2b2512bb5",
      "title": "Nest CSS with Sass",
      "required": [
        {
          "src": "https://cdnjs.cloudflare.com/ajax/libs/sass.js/0.10.9/sass.sync.min.js",
          "raw": true
        }
      ],
      "description": [
        "Sass允许CSS规则的 <code> 嵌套 </code>，这是组织样式表的有用方法。"，
        "通常情况下，每个元素都针对不同的线条进行设计，如下所示："，
        "<blockquote>nav {<br>&nbsp;&nbsp;background-color: red;<br>}<br><br>nav ul {<br>&nbsp;&nbsp;list-style: none;<br>}<br><br>nav ul li {<br>&nbsp;&nbsp;display: inline-block;<br>}</blockquote>",
        "对于一个大型项目，CSS文件将有许多行和规则。这就是 <code>nesting</code> 可以通过在相应的父元素中放置子样式规则来帮助组织代码："，
        "<blockquote>nav {<br>&nbsp;&nbsp;background-color: red;<br><br>&nbsp;&nbsp;ul {<br>&nbsp;&nbsp;&nbsp;&nbsp;list-style: none;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;li {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;display: inline-block;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>}<br></blockquote>",
        "<hr>",
        "使用上面显示的 <code>nesting</code> 技术为 <code>.blog-post </code> 元素的两个子元素重新组织CSS规则。出于测试目的，<code>h1</code> 应该出现在 <code>p</code> 元素之前。"
      ],
      "tests": [
        {
          "text": "您的代码应重新组织CSS规则，以便 <code>h1</code> 和 <code>p</code> 嵌套在 <code>.blog-post</code> 父元素中。",
          "testString": "assert(code.match(/\\.blog-post\\s*?{\\s*?h1\\s*?{\\s*?text-align:\\s*?center;\\s*?color:\\s*?blue;\\s*?}\\s*?p\\s*?{\\s*?font-size:\\s*?20px;\\s*?}\\s*?}/gi), '您的代码应重新组织CSS规则，以便 <code>h1</code> 和 <code>p</code> 嵌套在 <code> .blog-post </code> 父元素中。);"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style type='text/sass'>",
            "  .blog-post {",
            "    ",
            "  }",
            "  h1 {",
            "    text-align: center;",
            "    color: blue;",
            "  }",
            "  p {",
            "    font-size: 20px;",
            "  }",
            "</style>",
            "",
            "<div class=\"blog-post\">",
            "  <h1>Blog Title</h1>",
            "  <p>This is a paragraph</p>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7dbd367417b2b2512bb6",
      "title": "Create Reusable CSS with Mixins",
      "required": [
        {
          "src": "https://cdnjs.cloudflare.com/ajax/libs/sass.js/0.10.9/sass.sync.min.js",
          "raw": true
        }
      ],
      "description": [
        "In Sass, a <code>mixin</code> is a group of CSS declarations that can be reused throughout the style sheet.",
        "Newer CSS features take time before they are fully adopted and ready to use in all browsers. As features are added to browsers, CSS rules using them may need vendor prefixes. Consider \"box-shadow\":",
        "<blockquote>div {<br>&nbsp;&nbsp;-webkit-box-shadow: 0px 0px 4px #fff;<br>&nbsp;&nbsp;-moz-box-shadow: 0px 0px 4px #fff;<br>&nbsp;&nbsp;-ms-box-shadow: 0px 0px 4px #fff;<br>&nbsp;&nbsp;box-shadow: 0px 0px 4px #fff;<br>}</blockquote>",
        "It's a lot of typing to re-write this rule for all the elements that have a <code>box-shadow</code>, or to change each value to test different effects.",
        "<code>Mixins</code> are like functions for CSS. Here is how to write one:",
        "<blockquote>@mixin box-shadow($x, $y, $blur, $c){ <br>&nbsp;&nbsp;-webkit-box-shadow: $x, $y, $blur, $c;<br>&nbsp;&nbsp;-moz-box-shadow: $x, $y, $blur, $c;<br>&nbsp;&nbsp;-ms-box-shadow: $x, $y, $blur, $c;<br>&nbsp;&nbsp;box-shadow: $x, $y, $blur, $c;<br>}</blockquote>",
        "The definition starts with <code>@mixin</code> followed by a custom name. The parameters (the <code>$x</code>, <code>$y</code>, <code>$blur</code>, and <code>$c</code> in the example above) are optional.",
        "Now any time a <code>box-shadow</code> rule is needed, only a single line calling the <code>mixin</code> replaces having to type all the vendor prefixes. A <code>mixin</code> is called with the <code>@include</code> directive:",
        "<blockquote>div {<br>&nbsp;&nbsp;@include box-shadow(0px, 0px, 4px, #fff);<br>}</blockquote>",
        "<hr>",
        "Write a <code>mixin</code> for <code>border-radius</code> and give it a <code>$radius</code> parameter. It should use all the vendor prefixes from the example. Then use the <code>border-radius</code> <code>mixin</code> to give the <code>#awesome</code> element a border radius of 15px."
      ],
      "tests": [
        {
          "text": "Your code should declare a <code>mixin</code> named <code>border-radius</code> which has a parameter named <code>$radius</code>.",
          "testString": "assert(code.match(/@mixin\\s+?border-radius\\s*?\\(\\s*?\\$radius\\s*?\\)\\s*?{/gi), 'Your code should declare a <code>mixin</code> named <code>border-radius</code> which has a parameter named <code>$radius</code>.');"
        },
        {
          "text": "Your code should include the <code>-webkit-border-radius</code> vender prefix that uses the <code>$radius</code> parameter.",
          "testString": "assert(code.match(/-webkit-border-radius:\\s*?\\$radius;/gi), 'Your code should include the <code>-webkit-border-radius</code> vender prefix that uses the <code>$radius</code> parameter.');"
        },
        {
          "text": "Your code should include the <code>-moz-border-radius</code> vender prefix that uses the <code>$radius</code> parameter.",
          "testString": "assert(code.match(/-moz-border-radius:\\s*?\\$radius;/gi), 'Your code should include the <code>-moz-border-radius</code> vender prefix that uses the <code>$radius</code> parameter.');"
        },
        {
          "text": "Your code should include the <code>-ms-border-radius</code> vender prefix that uses the <code>$radius</code> parameter.",
          "testString": "assert(code.match(/-ms-border-radius:\\s*?\\$radius;/gi), 'Your code should include the <code>-ms-border-radius</code> vender prefix that uses the <code>$radius</code> parameter.');"
        },
        {
          "text": "Your code should include the general <code>border-radius</code> rule that uses the <code>$radius</code> parameter.",
          "testString": "assert(code.match(/border-radius:\\s*?\\$radius;/gi).length == 4, 'Your code should include the general <code>border-radius</code> rule that uses the <code>$radius</code> parameter.');"
        },
        {
          "text": "Your code should call the <code>border-radius mixin</code> using the <code>@include</code> keyword, setting it to 15px.",
          "testString": "assert(code.match(/@include\\s+?border-radius\\(\\s*?15px\\s*?\\);/gi), 'Your code should call the <code>border-radius mixin</code> using the <code>@include</code> keyword, setting it to 15px.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style type='text/sass'>",
            "  ",
            "  ",
            "  ",
            "  #awesome {",
            "    width: 150px;",
            "    height: 150px;",
            "    background-color: green;",
            "    ",
            "  }",
            "</style>",
            "",
            "<div id=\"awesome\"></div>",
            "  "
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7dbe367417b2b2512bb8",
      "title": "Use @if and @else to Add Logic To Your Styles",
      "required": [
        {
          "src": "https://cdnjs.cloudflare.com/ajax/libs/sass.js/0.10.9/sass.sync.min.js",
          "raw": true
        }
      ],
      "description": [
        "The <code>@if</code> directive in Sass is useful to test for a specific case - it works just like the <code>if</code> statement in JavaScript</code>.",
        "<blockquote>@mixin make-bold($bool) {<br>&nbsp;&nbsp;@if $bool == true {<br>&nbsp;&nbsp;&nbsp;&nbsp;font-weight: bold;<br>&nbsp;&nbsp;}<br>}</blockquote>",
        "And just like in JavaScript, <code>@else if</code> and <code>@else</code> test for more conditions:",
        "<blockquote>@mixin text-effect($val) {<br>&nbsp;&nbsp;@if $val == danger {<br>&nbsp;&nbsp;&nbsp;&nbsp;color: red;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;@else if $val == alert {<br>&nbsp;&nbsp;&nbsp;&nbsp;color: yellow;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;@else if $val == success {<br>&nbsp;&nbsp;&nbsp;&nbsp;color: green;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;@else {<br>&nbsp;&nbsp;&nbsp;&nbsp;color: black;<br>&nbsp;&nbsp;}<br>}</blockquote>",
        "<hr>",
        "Create a <code>mixin</code> called <code>border-stroke</code> that takes a parameter <code>$val</code>. The <code>mixin</code> should check for the following conditions using <code>@if</code>, <code>@else if</code>, and <code>@else</code>:",
        "<blockquote>light - 1px solid black<br>medium - 3px solid black<br>heavy - 6px solid black<br>none - no border</blockquote>"
      ],
      "tests": [
        {
          "text": "Your code should declare a <code>mixin</code> named <code>border-stroke</code> which has a parameter named <code>$val</code>.",
          "testString": "assert(code.match(/@mixin\\s+?border-stroke\\s*?\\(\\s*?\\$val\\s*?\\)\\s*?{/gi), 'Your code should declare a <code>mixin</code> named <code>border-stroke</code> which has a parameter named <code>$val</code>.');"
        },
        {
          "text": "Your <code>mixin</code> should have an <code>@if</code> statement to check if <code>$val</code> is light, and to set the <code>border</code> to 1px solid black.",
          "testString": "assert(code.match(/@if\\s+?\\$val\\s*?===?\\s*?light\\s*?{\\s*?border\\s*?:\\s*?1px\\s+?solid\\s+?black\\s*?;\\s*?}/gi), 'Your <code>mixin</code> should have an <code>@if</code> statement to check if <code>$val</code> is light, and to set the <code>border</code> to 1px solid black.');"
        },
        {
          "text": "Your <code>mixin</code> should have an <code>@else if</code> statement to check if <code>$val</code> is medium, and to set the <code>border</code> to 3px solid black.",
          "testString": "assert(code.match(/@else\\s+?if\\s+?\\$val\\s*?===?\\s*?medium\\s*?{\\s*?border\\s*?:\\s*?3px\\s+?solid\\s+?black\\s*?;\\s*?}/gi), 'Your <code>mixin</code> should have an <code>@else if</code> statement to check if <code>$val</code> is medium, and to set the <code>border</code> to 3px solid black.');"
        },
        {
          "text": "Your <code>mixin</code> should have an <code>@else if</code> statement to check if <code>$val</code> is heavy, and to set the <code>border</code> to 6px solid black.",
          "testString": "assert(code.match(/@else\\s+?if\\s+?\\$val\\s*?===?\\s*?heavy\\s*?{\\s*?border\\s*?:\\s*?6px\\s+?solid\\s+?black\\s*?;\\s*?}/gi), 'Your <code>mixin</code> should have an <code>@else if</code> statement to check if <code>$val</code> is heavy, and to set the <code>border</code> to 6px solid black.');"
        },
        {
          "text": "Your <code>mixin</code> should have an <code>@else</code> statement to set the <code>border</code> to none.",
          "testString": "assert(code.match(/@else\\s*?{\\s*?border\\s*?:\\s*?none\\s*?;\\s*?}/gi), 'Your <code>mixin</code> should have an <code>@else</code> statement to set the <code>border</code> to none.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style type='text/sass'>",
            "  ",
            "  ",
            "  ",
            "  #box {",
            "    width: 150px;",
            "    height: 150px;",
            "    background-color: red;",
            "    @include border-stroke(medium);",
            "  }  ",
            "</style>",
            "",
            "<div id=\"box\"></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7dbe367417b2b2512bb9",
      "title": "Use @for to Create a Sass Loop",
      "required": [
        {
          "src": "https://cdnjs.cloudflare.com/ajax/libs/sass.js/0.10.9/sass.sync.min.js",
          "raw": true
        }
      ],
      "description": [
        "The <code>@for</code> directive adds styles in a loop, very similar to a <code>for</code> loop in JavaScript.",
        "<code>@for</code> is used in two ways: \"start through end\" or \"start to end\". The main difference is that \"start to end\" <em>excludes</em> the end number, and \"start through end\" <em>includes</em> the end number.",
        "Here's a start <b>through</b> end example:",
        "<blockquote>@for $i from 1 through 12 {<br>&nbsp;&nbsp;.col-#{$i} { width: 100%/12 * $i; }<br>}</blockquote>",
        "The <code>#{$i}</code> part is the syntax to combine a variable (<code>i</code>) with text to make a string. When the Sass file is converted to CSS, it looks like this:",
        "<blockquote>.col-1 {<br>&nbsp;&nbsp;width: 8.33333%;<br>}<br><br>.col-2 {<br>&nbsp;&nbsp;width: 16.66667%;<br>}<br><br>...<br><br>.col-12 {<br>&nbsp;&nbsp;width: 100%;<br>}</blockquote>",
        "This is a powerful way to create a grid layout. Now you have twelve options for column widths available as CSS classes.",
        "<hr>",
        "Write a <code>@for</code> directive that takes a variable <code>$j</code> that goes from 1 <b>to</b> 6.",
        "It should create 5 classes called <code>.text-1</code> to <code>.text-5</code> where each has a <code>font-size</code> set to 10px multiplied by the index."
      ],
      "tests": [
        {
          "text": "Your code should use the <code>@for</code> directive.",
          "testString": "assert(code.match(/@for /g), 'Your code should use the <code>@for</code> directive.');"
        },
        {
          "text": "Your <code>.text-1</code> class should have a <code>font-size</code> of 10px.",
          "testString": "assert($('.text-1').css('font-size') == '10px', 'Your <code>.text-1</code> class should have a <code>font-size</code> of 10px.');"
        },
        {
          "text": "Your <code>.text-2</code> class should have a <code>font-size</code> of 20px.",
          "testString": "assert($('.text-2').css('font-size') == '20px', 'Your <code>.text-2</code> class should have a <code>font-size</code> of 20px.');"
        },
        {
          "text": "Your <code>.text-3</code> class should have a <code>font-size</code> of 30px.",
          "testString": "assert($('.text-3').css('font-size') == '30px', 'Your <code>.text-3</code> class should have a <code>font-size</code> of 30px.');"
        },
        {
          "text": "Your <code>.text-4</code> class should have a <code>font-size</code> of 40px.",
          "testString": "assert($('.text-4').css('font-size') == '40px', 'Your <code>.text-4</code> class should have a <code>font-size</code> of 40px.');"
        },
        {
          "text": "Your <code>.text-5</code> class should have a <code>font-size</code> of 50px.",
          "testString": "assert($('.text-5').css('font-size') == '50px', 'Your <code>.text-5</code> class should have a <code>font-size</code> of 50px.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style type='text/sass'>",
            "  ",
            "  ",
            "  ",
            "</style>",
            "",
            "<p class=\"text-1\">Hello</p>",
            "<p class=\"text-2\">Hello</p>",
            "<p class=\"text-3\">Hello</p>",
            "<p class=\"text-4\">Hello</p>",
            "<p class=\"text-5\">Hello</p>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7dbf367417b2b2512bba",
      "title": "Use @each to Map Over Items in a List",
      "required": [
        {
          "src": "https://cdnjs.cloudflare.com/ajax/libs/sass.js/0.10.9/sass.sync.min.js",
          "raw": true
        }
      ],
      "description": [
        "The last challenge showed how the <code>@for</code> directive uses a starting and ending value to loop a certain number of times. Sass also offers the <code>@each</code> directive which loops over each item in a list or map.",
        "On each iteration, the variable gets assigned to the current value from the list or map.",
        "<blockquote>@each $color in blue, red, green {<br>&nbsp;&nbsp;.#{$color}-text {color: $color;}<br>}</blockquote>",
        "A map has slightly different syntax. Here's an example:",
        "<blockquote>$colors: (color1: blue, color2: red, color3: green);<br><br>@each $key, $color in $colors {<br>&nbsp;&nbsp;.#{$color}-text {color: $color;}<br>}</blockquote>",
        "Note that the <code>$key</code> variable is needed to reference the keys in the map. Otherwise, the compiled CSS would have <code>color1</code>, <code>color2</code>... in it.",
        "Both of the above code examples are converted into the following CSS:",
        "<blockquote>.blue-text {<br>&nbsp;&nbsp;color: blue;<br>}<br><br>.red-text {<br>&nbsp;&nbsp;color: red;<br>}<br><br>.green-text {<br>&nbsp;&nbsp;color: green;<br>}</blockquote>",
        "<hr>",
        "Write an <code>@each</code> directive that goes through a list: <code>blue, black, red</code> and assigns each variable to a <code>.color-bg</code> class, where the \"color\" part changes for each item.",
        "Each class should set the <code>background-color</code> the respective color."
      ],
      "tests": [
        {
          "text": "Your code should use the <code>@each</code> directive.",
          "testString": "assert(code.match(/@each /g), 'Your code should use the <code>@each</code> directive.');"
        },
        {
          "text": "Your <code>.blue-bg</code> class should have a <code>background-color</code> of blue.",
          "testString": "assert($('.blue-bg').css('background-color') == 'rgb(0, 0, 255)', 'Your <code>.blue-bg</code> class should have a <code>background-color</code> of blue.');"
        },
        {
          "text": "Your <code>.black-bg</code> class should have a <code>background-color</code> of black.",
          "testString": "assert($('.black-bg').css('background-color') == 'rgb(0, 0, 0)', 'Your <code>.black-bg</code> class should have a <code>background-color</code> of black.');"
        },
        {
          "text": "Your <code>.red-bg</code> class should have a <code>background-color</code> of red.",
          "testString": "assert($('.red-bg').css('background-color') == 'rgb(255, 0, 0)', 'Your <code>.red-bg</code> class should have a <code>background-color</code> of red.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style type='text/sass'>",
            "  ",
            "  ",
            "  ",
            "  div {",
            "    height: 200px;",
            "    width: 200px;",
            "  }",
            "</style>",
            "",
            "<div class=\"blue-bg\"></div>",
            "<div class=\"black-bg\"></div>",
            "<div class=\"red-bg\"></div>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7dbf367417b2b2512bbb",
      "title": "Apply a Style Until a Condition is Met with @while",
      "required": [
        {
          "src": "https://cdnjs.cloudflare.com/ajax/libs/sass.js/0.10.9/sass.sync.min.js",
          "raw": true
        }
      ],
      "description": [
        "The <code>@while</code> directive is an option with similar functionality to the JavaScript <code>while</code> loop. It creates CSS rules until a condition is met.",
        "The <code>@for</code> challenge gave an example to create a simple grid system. This can also work with <code>@while</code>.",
        "<blockquote>$x: 1;<br>@while $x < 13 {<br>&nbsp;&nbsp;.col-#{$x} { width: 100%/12 * $x;}<br>&nbsp;&nbsp;$x: $x + 1;<br>}</blockquote>",
        "First, define a variable <code>$x</code> and set it to 1. Next, use the <code>@while</code> directive to create the grid system <i>while</i> <code>$x</code> is less than 13.",
        "After setting the CSS rule for <code>width</code>, <code>$x</code> is incremented by 1 to avoid an infinite loop.",
        "<hr>",
        "Use <code>@while</code> to create a series of classes with different <code>font-sizes</code>.",
        "There should be 10 different classes from <code>text-1</code> to <code>text-10</code>. Then set <code>font-size</code> to 5px multiplied by the current index number. Make sure to avoid an infinite loop!"
      ],
      "tests": [
        {
          "text": "Your code should use the <code>@while</code> directive.",
          "testString": "assert(code.match(/@while /g), 'Your code should use the <code>@while</code> directive.');"
        },
        {
          "text": "Your code should set an index variable to 1 to start.",
          "testString": "assert(code.match(/\\$.*:\\s*?1;/gi), 'Your code should set an index variable to 1 to start.');"
        },
        {
          "text": "Your code should increment the counter variable.",
          "testString": "assert(code.match(/\\$(.*):\\s*?\\$\\1\\s*?\\+\\s*?1;/gi), 'Your code should increment the counter variable.');"
        },
        {
          "text": "Your <code>.text-1</code> class should have a <code>font-size</code> of 5px.",
          "testString": "assert($('.text-1').css('font-size') == '5px', 'Your <code>.text-1</code> class should have a <code>font-size</code> of 5px.');"
        },
        {
          "text": "Your <code>.text-2</code> class should have a <code>font-size</code> of 10px.",
          "testString": "assert($('.text-2').css('font-size') == '10px', 'Your <code>.text-2</code> class should have a <code>font-size</code> of 10px.');"
        },
        {
          "text": "Your <code>.text-3</code> class should have a <code>font-size</code> of 15px.",
          "testString": "assert($('.text-3').css('font-size') == '15px', 'Your <code>.text-3</code> class should have a <code>font-size</code> of 15px.');"
        },
        {
          "text": "Your <code>.text-4</code> class should have a <code>font-size</code> of 20px.",
          "testString": "assert($('.text-4').css('font-size') == '20px', 'Your <code>.text-4</code> class should have a <code>font-size</code> of 20px.');"
        },
        {
          "text": "Your <code>.text-5</code> class should have a <code>font-size</code> of 25px.",
          "testString": "assert($('.text-5').css('font-size') == '25px', 'Your <code>.text-5</code> class should have a <code>font-size</code> of 25px.');"
        },
        {
          "text": "Your <code>.text-6</code> class should have a <code>font-size</code> of 30px.",
          "testString": "assert($('.text-6').css('font-size') == '30px', 'Your <code>.text-6</code> class should have a <code>font-size</code> of 30px.');"
        },
        {
          "text": "Your <code>.text-7</code> class should have a <code>font-size</code> of 35px.",
          "testString": "assert($('.text-7').css('font-size') == '35px', 'Your <code>.text-7</code> class should have a <code>font-size</code> of 35px.');"
        },
        {
          "text": "Your <code>.text-8</code> class should have a <code>font-size</code> of 40px.",
          "testString": "assert($('.text-8').css('font-size') == '40px', 'Your <code>.text-8</code> class should have a <code>font-size</code> of 40px.');"
        },
        {
          "text": "Your <code>.text-9</code> class should have a <code>font-size</code> of 45px.",
          "testString": "assert($('.text-9').css('font-size') == '45px', 'Your <code>.text-9</code> class should have a <code>font-size</code> of 45px.');"
        },
        {
          "text": "Your <code>.text-10</code> class should have a <code>font-size</code> of 50px.",
          "testString": "assert($('.text-10').css('font-size') == '50px', 'Your <code>.text-10</code> class should have a <code>font-size</code> of 50px.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style type='text/sass'>",
            "  ",
            "  ",
            "  ",
            "</style>",
            "",
            "<p class=\"text-1\">Hello</p>",
            "<p class=\"text-2\">Hello</p>",
            "<p class=\"text-3\">Hello</p>",
            "<p class=\"text-4\">Hello</p>",
            "<p class=\"text-5\">Hello</p>",
            "<p class=\"text-6\">Hello</p>",
            "<p class=\"text-7\">Hello</p>",
            "<p class=\"text-8\">Hello</p>",
            "<p class=\"text-9\">Hello</p>",
            "<p class=\"text-10\">Hello</p>"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7dbf367417b2b2512bbc",
      "title": "Split Your Styles into Smaller Chunks with Partials",
      "required": [
        {
          "src": "https://cdnjs.cloudflare.com/ajax/libs/sass.js/0.10.9/sass.sync.min.js",
          "raw": true
        }
      ],
      "description": [
        "<code>Partials</code> in Sass are separate files that hold segments of CSS code. These are imported and used in other Sass files. This is a great way to group similar code into a module to keep it organized.",
        "Names for <code>partials</code> start with the underscore (<code>_</code>) character, which tells Sass it is a small segment of CSS and not to convert it into a CSS file. Also, Sass files end with the <code>.scss</code> file extension. To bring the code in the <code>partial</code> into another Sass file, use the <code>@import</code> directive.",
        "For example, if all your <code>mixins</code> are saved in a <code>partial</code> named \"_mixins.scss\", and they are needed in the \"main.scss\" file, this is how to use them in the main file:",
        "<blockquote>// In the main.scss file<br><br>@import 'mixins'</blockquote>",
        "Note that the underscore is not needed in the <code>import</code> statement - Sass understands it is a <code>partial</code>. Once a <code>partial</code> is imported into a file, all variables, <code>mixins</code>, and other code are available to use.",
        "<hr>",
        "Write an <code>@import</code> statement to import a <code>partial</code> named <code>_variables.scss</code> into the main.scss file."
      ],
      "tests": [
        {
          "text": "Your code should use the <code>@import</code> directive, and should not include the underscore in the file name.",
          "testString": "assert(code.match(/@import\\s+?('|\")variables\\1/gi), 'Your code should use the <code>@import</code> directive, and should not include the underscore in the file name.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "// The main.scss file",
            "",
            "",
            "",
            ""
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7fa5367417b2b2512bbd",
      "title": "Extend One Set of CSS Styles to Another Element",
      "required": [
        {
          "src": "https://cdnjs.cloudflare.com/ajax/libs/sass.js/0.10.9/sass.sync.min.js",
          "raw": true
        }
      ],
      "description": [
        "Sass has a feature called <code>extend</code> that makes it easy to borrow the CSS rules from one element and build upon them in another.",
        "For example, the below block of CSS rules style a <code>.panel</code> class. It has a <code>background-color</code>, <code>height</code> and <code>border</code>.",
        "<blockquote>.panel{<br>&nbsp;&nbsp;background-color: red;<br>&nbsp;&nbsp;height: 70px;<br>&nbsp;&nbsp;border: 2px solid green;<br>}</blockquote>",
        "Now you want another panel called <code>.big-panel</code>. It has the same base properties as <code>.panel</code>, but also needs a <code>width</code> and <code>font-size</code>.",
        "It's possible to copy and paste the initial CSS rules from <code>.panel</code>, but the code becomes repetitive as you add more types of panels.",
        "The <code>extend</code> directive is a simple way to reuse the rules written for one element, then add more for another:",
        "<blockquote>.big-panel{<br>&nbsp;&nbsp;@extend .panel;<br>&nbsp;&nbsp;width: 150px;<br>&nbsp;&nbsp;font-size: 2em;<br>}</blockquote>",
        "The <code>.big-panel</code> will have the same properties as <code>.panel</code> in addition to the new styles.",
        "<hr>",
        "Make a class <code>.info-important</code> that extends <code>.info</code> and also has a <code>background-color</code> set to magenta."
      ],
      "tests": [
        {
          "text": "Your <code>info-important</code> class should have a <code>background-color</code> set to <code>magenta</code>.",
          "testString": "assert(code.match(/\\.info-important\\s*?{[\\s\\S]*background-color\\s*?:\\s*?magenta\\s*?;[\\s\\S]*}/gi), 'Your <code>info-important</code> class should have a <code>background-color</code> set to <code>magenta</code>.');"
        },
        {
          "text": "Your <code>info-important</code> class should use <code>@extend</code> to inherit the styling from the <code>info</code> class.",
          "testString": "assert(code.match(/\\.info-important\\s*?{[\\s\\S]*@extend\\s*?.info\\s*?;[\\s\\S]*/gi), 'Your <code>info-important</code> class should use <code>@extend</code> to inherit the styling from the <code>info</code> class.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 0,
      "files": {
        "indexhtml": {
          "key": "indexhtml",
          "ext": "html",
          "name": "index",
          "contents": [
            "<style type='text/sass'>",
            "  h3{",
            "    text-align: center;",
            "  }",
            "  .info{",
            "    width: 200px;",
            "    border: 1px solid black;",
            "    margin: 0 auto;",
            "  }",
            "  ",
            "  ",
            "  ",
            "  ",
            "</style>",
            "<h3>Posts</h3>",
            "<div class=\"info-important\">",
            "  <p>This is an important post. It should extend the class \".info\" and have its own CSS styles.</p>",
            "</div>",
            "",
            "<div class=\"info\">",
            "  <p>This is a simple post. It has basic styling and can be extended for other uses.</p>",
            "</div>"
          ],
          "head": [],
          "tail": []
        }
      }
    }
  ]
}
