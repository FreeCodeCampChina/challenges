{
  "name": "Functional Programming",
  "order": 8,
  "time": "5 hours",
  "helpRoom": "Help",
  "challenges": [
    {
      "id": "587d7b8d367417b2b2512b5b",
      "title": "Learn About Functional Programming",
      "description": [
        "函数式编程是一种解决方案简单，功能独立，对作用域外没有任何副作用的编程范式。",
        "<code>INPUT -> PROCESS -> OUTPUT</code>",
        "函数式编程：",
        "1）功能独立 — 不依赖于程序的状态，其中包括可能发生变化的全局变量；",
        "2）纯函数 - 同一个输入永远能得到同一个输出；",
        "3）有限的副作用 - 任何在函数外部更改或状态变化都严格地被控制。",
        "<hr>",
        "freeCodeCamp 成员在 love tea 的故事。",
        "在代码编辑器中，已经为你定义好了<code>prepareTea</code>和<code>getTea</code>方法。调用<code>getTea</code>函数为团队准备 40 杯茶，并将它们存储在<code>tea4TeamFCC</code>变量里。"
      ],
      "tests": [
        {
          "text": "<code>tea4TeamFCC</code>变量里应有 40 杯为团队准备的茶。",
          "testString": "assert(tea4TeamFCC.length === 40, '<code>tea4TeamFCC</code>变量里应有 40 杯为团队准备的茶。');"
        },
        {
          "text": "<code>tea4TeamFCC</code>变量里应有绿茶。",
          "testString": "assert(tea4TeamFCC[0] === 'greenTea', '<code>tea4TeamFCC</code>变量里应有绿茶。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "/**",
            " * 漫长的备茶过程",
            " * @return {string} 一杯茶",
            " **/",
            "const prepareTea = () => 'greenTea';",
            "",
            "/**",
            " * 获得一定数量的茶",
            " * @param {number} numOfCups 所需茶的数量",
            " * @return {Array<string>} 返回给定量的茶",
            " **/",
            "const getTea = (numOfCups) => {",
            "  const teaCups = [];",
            "  ",
            "  for(let cups = 1; cups <= numOfCups; cups += 1) {",
            "    const teaCup = prepareTea();",
            "    teaCups.push(teaCup);",
            "  }",
            "",
            "  return teaCups;",
            "};",
            "",
            "// 请在本行以下添加你的代码",
            "",
            "const tea4TeamFCC = null; // :(",
            "",
            "// 请在本行以上添加你的代码",
            "",
            "console.log(tea4TeamFCC);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7b8e367417b2b2512b5c",
      "title": "Understand Functional Programming Terminology",
      "description": [
        "FCC 团队需求有变更，现在想要两种茶：绿茶和红茶。常见的事实：用户需求变更很常见。",
        "基于以上信息，我们需要重构上一节挑战中的<code>getTea</code>方法来处理多种茶的请求。我们可以修改<code>getTea</code>接受一个函数作为参数，以便能够修改茶的类型。这使<code>getTea</code>更灵活，也使需求变更时为程序员提供更多控制权。",
        "首先，我们将介绍一些术语：",
        "<code>Callbacks</code>是被传递到另一个函数中调用的函数。你可能已经在其他方法中看过他们的传递，例如在<code>filter</code>中，回调函数告诉 JavaScript 以什么规则过滤数组。",
        "函数就像其他正常值一样，可以赋值给变量、传递给另一个函数，或从其它函数返回，称为<code>first class</code>函数。在 JavaScript 中，所有函数都是<code>first class</code>函数。",
        "将函数为参数或返回值的函数称为<code>higher order</code>函数。",
        "当函数传递给另一个函数或从另一个函数返回时，那些传入或返回的函数可以称为<code>lambda</code>。",
        "<hr>",
        "准备27杯绿茶和13杯红茶，分别存入<code>tea4GreenTeamFCC</code>和<code>tea4BlackTeamFCC</code>变量。请注意，<code>getTea</code>函数已被修改为以函数作为第一个参数。",
        "注意：数据（茶的数量）作为最后一个参数。我们将在后面的课程中对此进行更多讨论。"
      ],
      "tests": [
        {
          "text": "<code>tea4GreenTeamFCC</code>变量应该存有为团队准备的 27 杯茶。",
          "testString": "assert(tea4GreenTeamFCC.length === 27, '<code>tea4GreenTeamFCC</code>变量应该存有为团队准备的 27 杯茶。');"
        },
        {
          "text": "<code>tea4GreenTeamFCC</code>变量应存有绿茶。",
          "testString": "assert(tea4GreenTeamFCC[0] === 'greenTea', '<code>tea4GreenTeamFCC</code>变量应存有绿茶。');"
        },
        {
          "text": "<code>tea4BlackTeamFCC</code>变量应该存有 13 杯红茶。",
          "testString": "assert(tea4BlackTeamFCC.length === 13, '<code>tea4BlackTeamFCC</code>变量应该存有 13 杯红茶。');"
        },
        {
          "text": "<code>tea4BlackTeamFCC</code>变量应存有红茶。",
          "testString": "assert(tea4BlackTeamFCC[0] === 'blackTea', '<code>tea4BlackTeamFCC</code>变量应存有红茶。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "/**",
            " * 漫长的备绿茶过程",
            " * @return {string} 一杯绿茶",
            " **/",
            "const prepareGreenTea = () => 'greenTea';",
            "",
            "/**",
            " * 漫长的备绿茶过程",
            " * @return {string} 一杯红茶",
            " **/",
            "const prepareBlackTea = () => 'blackTea';",
            "",
            "/**",
            " * 获得一定数量的茶",
            " * @param {function():string} prepareTea 茶的类型",
            " * @param {number} numOfCups 需要茶的数量",
            " * @return {Array<string>} 给定的茶",
            " **/",
            "const getTea = (prepareTea, numOfCups) => {",
            "  const teaCups = [];",
            "",
            "  for(let cups = 1; cups <= numOfCups; cups += 1) {",
            "    const teaCup = prepareTea();",
            "    teaCups.push(teaCup);",
            "  }",
            "",
            "  return teaCups;",
            "};",
            "",
            "// 请在本行以下添加你的代码",
            "",
            "const tea4GreenTeamFCC = null; // :(",
            "const tea4BlackTeamFCC = null; // :(",
            "",
            "// 请在本行以上添加你的代码",
            "",
            "console.log(",
            "  tea4GreenTeamFCC,",
            "  tea4BlackTeamFCC",
            ");"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7b8e367417b2b2512b5d",
      "title": "Understand the Hazards of Using Imperative Code",
      "description": [
        "函数式编程是一种好习惯，它能让代码管理更简单，不受隐藏 bug 影响。在我们开始函数式编程之前，我们先看看命令式编程，以突显可能遇到的问题。",
        "类似在英语（和许多其他语言）中，命令式时态用于给出命令，编程中的命令式是给计算机一组语句来执行任务。",
        "这些语句通常会改变程序的状态，例如更新全局变量。典型的例子就是写一个<code>for</code>循环，它给出了迭代数组索引的精确方向。",
        "相反，函数式编程是声明式编程的一种形式。通过调用方法或函数来告诉计算机你想要做什么。",
        "JavaScript 预置了许多方法处理常见的任务，所以你无需写出计算机应如何执行它们。例如，你可以调用<code>map</code>方法替代上面提到的<code>for</code>循环来处理数组迭代。这有助于避免语义错误，如调试章节介绍的\"Off By One Errors\"",
        "",
        "考虑这样的场景：你正在浏览器中浏览网页，并想跟踪你打开的标签。让我们试着用一些简单的面向对象代码对此建模。",
        "窗口对象由选项卡组成，通常会打开多个窗口。每个窗口对象中每个打开网站的标题都保存在一个数组中。在浏览器工作时（打开新标签，合并窗口和关闭标签），您想要打印仍然打开的标签。关闭的选项卡将从数组中删除，新的选项卡（为简单起见）添加到数组的末尾。",
        "代码编辑器中显示了此功能的实现，其中包含<code>tabOpen()</code>，<code>tabClose()</code>，和 <code>join()</code>函数。<code>tabs</code>数组是窗口对象的一部分用于储存打开页面的名称。",
        "<h4>说明<h4>",
        "在编辑器中运行代码。它使用的方法在程序中有副作用，导致输出错误。打开标签的最终列表应该是<code>['FB', 'Gitter', 'Reddit', 'Twitter', 'Medium', 'new tab', 'Netflix', 'YouTube', 'Vine', 'GMail', 'Work mail', 'Docs', 'freeCodeCamp', 'new tab']</code>但输出会略有不同。",
        "仔细阅读代码，看看你是否能找出问题所在，然后进入下一个挑战，了解更多信息。"
      ],
      "tests": [
        {
          "text": "Move ahead to understand the error.",
          "testString": "assert(true, 'Move ahead to understand the error.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// tabs 是窗口中打开网站的标题数组",
            "var Window = function(tabs) {",
            "  this.tabs = tabs; // 我们将数组记录在对象内部",
            "};",
            "",
            "// 当两个窗口合并成一个窗口时",
            "Window.prototype.join = function (otherWindow) {",
            "  this.tabs = this.tabs.concat(otherWindow.tabs);",
            "  return this;",
            "};",
            "",
            "// 在末尾打开一个新标签",
            "Window.prototype.tabOpen = function (tab) {",
            "  this.tabs.push('new tab'); // let's open a new tab for now",
            "  return this;",
            "};",
            "",
            "// 关闭一个标签",
            "Window.prototype.tabClose = function (index) {",
            "  var tabsBeforeIndex = this.tabs.splice(0, index); // 获取前面的标签",
            "  var tabsAfterIndex = this.tabs.splice(index); // 获取后面的标签",
            "",
            "  this.tabs = tabsBeforeIndex.concat(tabsAfterIndex); // 拼接到一起",
            "  return this;",
            " };",
            "",
            "// 创建三个浏览器窗口",
            "var workWindow = new Window(['GMail', 'Inbox', 'Work mail', 'Docs', 'freeCodeCamp']); // mailbox, drive和其他网站",
            "var socialWindow = new Window(['FB', 'Gitter', 'Reddit', 'Twitter', 'Medium']); // 社交网站",
            "var videoWindow = new Window(['Netflix', 'YouTube', 'Vimeo', 'Vine']); // 娱乐网站",
            "",
            "// 执行标签打开，关闭和其他操作",
            "var finalTabs = socialWindow",
            "                    .tabOpen() // 新开一个 cat memes 的标签",
            "                    .join(videoWindow.tabClose(2)) // 在娱乐网站关闭第三个标签，加入数组",
            "                    .join(workWindow.tabClose(1).tabOpen());",
            "",
            "alert(finalTabs.tabs);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7b8e367417b2b2512b5e",
      "title": "Avoid Mutations and Side Effects Using Functional Programming",
      "description": [
        "如果你还没想通，上一个挑战的问题出在<code>splice</code>对<code>tabClose()</code>方法的调用里。不幸的是，<code>splice</code>修改了调用它的原始数组，所以第二次调用它时是基于修改后的数组，才给出了意料之外的结果。",
        "这是一个小例子，还有更广义的定义——你在变量，数组或对象上调用一个函数，这个会函数改变对象中的变量或其他东西。",
        "函数式编程的核心原则之一是不改变任何东西。变化会导致错误。知道函数不会改变任何东西，包括函数参数或任何全局变量，更容易阻止产生错误。",
        "前面的例子没有任何复杂的操作，但是<code>splice</code>方法改变了原始数组，导致 bug 产生。",
        "回想一下，在函数式编程中，改变或变更事物称为<code>mutation</code>，结果被称为<code>side effect</code>。理想情况下，函数应该是<code>pure function</code>，意味着不会产生任何副作用。",
        "让我们尝试掌握这个原则，不要改变代码中的任何变量或对象。",
        "<hr>",
        "填写<code>incrementer</code>函数的代码，使其返回全局变量<code>fixedValue</code>的值加1。"
      ],
      "tests": [
        {
          "text": "<code>incrementer</code>函数不能改变<code>fixedValue</code>的值。",
          "testString": "assert(fixedValue === 4, '你的<code>incrementer</code>函数不能改变<code>fixedValue</code>的值。');"
        },
        {
          "text": "<code>incrementer</code>函数应返回比<code>fixedValue</code>变量更大的值。",
          "testString": "assert(newValue === 5, '<code>incrementer</code>函数应返回比<code>fixedValue</code>变量更大的值。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// 全局变量",
            "var fixedValue = 4;",
            "",
            "function incrementer () {",
            "  // 请在本行以下添加你的代码",
            "  ",
            "  ",
            "  // 请在本行以上添加你的代码",
            "}",
            "",
            "var newValue = incrementer(); // 应等于 5",
            "console.log(fixedValue); // 应打印 4"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7b8e367417b2b2512b5f",
      "title": "Pass Arguments to Avoid External Dependence in a Function",
      "description": [
        "最后一个挑战是更接近函数式编程原则，但是仍然缺少一些东西。",
        "我们没有改变全局变量值，但如果没有全局变量<code>fixedValue</code>，<code>incrementer</code>函数将不起作用。",
        "函数编程的另一个原则是总是显式声明依赖关系。这意味着如果函数依赖于一个变量或对象，那么将该变量或对象作为参数直接传递到函数中。",
        "这个原则有几个好的影响。让函数更容易测试，你确切知道它需要什么输入，并且它不依赖于程序中的任何其他内容。",
        "当更改，删除或添加新代码时，可以让你更加自信。你会知道什么是可以或不可以改变的，能看出哪里有潜在的陷阱。",
        "最后，无论代码的哪一部分执行它，函数总是会为同一组输入生成相同的输出。",
        "<hr>",
        "让我们更新<code>incrementer</code>函数以明确声明其依赖项",
        "编写<code>incrementer</code>函数，使其获取参数，然后将值增加1。"
      ],
      "tests": [
        {
          "text": "<code>incrementer</code>函数不能修改<code>fixedValue</code>的值。",
          "testString": "assert(fixedValue === 4, '<code>incrementer</code>函数不能修改<code>fixedValue</code>的值。');"
        },
        {
          "text": "<code>incrementer</code>函数应该接收一个参数。",
          "testString": "assert(code.match(/function\\s+?incrementer\\s*?\\(.+?\\)/g), '<code>incrementer</code>函数应该接收一个参数。');"
        },
        {
          "text": "<code>incrementer</code>函数应返回比<code>fixedValue</code>更大的值。",
          "testString": "assert(newValue === 5, '<code>incrementer</code>函数应返回比<code>fixedValue</code>更大的值。');"
        }
      ],
      "solutions": [],
      "hints": [],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// 全局变量",
            "var fixedValue = 4;",
            "",
            "// 请在本行以下添加你的代码",
            "function incrementer () {",
            "  ",
            "  ",
            "  // 请在本行以上添加你的代码",
            "}",
            "",
            "var newValue = incrementer(fixedValue); // 应等于 5",
            "console.log(fixedValue); // 应打印 4"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7b8f367417b2b2512b60",
      "title": "Refactor Global Variables Out of Functions",
      "description": [
        "到目前为止，我们已经看到了函数式编程的两个不同原则：",
        "1) 不要更改变量或对象——创建新变量和对象，并在需要时从函数返回它们。",
        "2) 声明函数参数——函数内的任何计算仅取决于参数，而不取决于任何全局对象或变量。",
        "给数字加 1 不够刺激，我们可以在处理数组或更复杂的对象时应用这些原则。",
        "<hr>",
        "重构代码，使全局数组<code>bookList</code>在任何函数内部都不会改变。<code>add</code>函数可以将指定的<code>bookName</code>增加到数组末尾。<code>remove</code>函数可以从数组中移除指定<code>bookName</code>。两个函数都返回数组，并且任何参数都应该添加到<code>bookName</code>前面。"
      ],
      "tests": [
        {
          "text": "<code>bookList</code>不应该改变，应等于<code>[\"The Hound of the Baskervilles\", \"On The Electrodynamics of Moving Bodies\", \"Philosophiæ Naturalis Principia Mathematica\", \"Disquisitiones Arithmeticae\"]</code>.",
          "testString": "assert(JSON.stringify(bookList) === JSON.stringify([\"The Hound of the Baskervilles\", \"On The Electrodynamics of Moving Bodies\", \"Philosophiæ Naturalis Principia Mathematica\", \"Disquisitiones Arithmeticae\"]), '<code>bookList</code>不应该改变，应等于<code>[\"The Hound of the Baskervilles\", \"On The Electrodynamics of Moving Bodies\", \"Philosophiæ Naturalis Principia Mathematica\", \"Disquisitiones Arithmeticae\"]</code>.');"
        },
        {
          "text": "<code>newBookList</code>应等于<code>[\"The Hound of the Baskervilles\", \"On The Electrodynamics of Moving Bodies\", \"Philosophiæ Naturalis Principia Mathematica\", \"Disquisitiones Arithmeticae\", \"A Brief History of Time\"]</code>.",
          "testString": "assert(JSON.stringify(newBookList) === JSON.stringify(['The Hound of the Baskervilles', 'On The Electrodynamics of Moving Bodies', 'Philosophiæ Naturalis Principia Mathematica', 'Disquisitiones Arithmeticae', 'A Brief History of Time']), '<code>newBookList</code>应等于<code>[\"The Hound of the Baskervilles\", \"On The Electrodynamics of Moving Bodies\", \"Philosophiæ Naturalis Principia Mathematica\", \"Disquisitiones Arithmeticae\", \"A Brief History of Time\"]</code>.');"
        },
        {
          "text": "<code>newerBookList</code>应等于<code>[\"The Hound of the Baskervilles\", \"Philosophiæ Naturalis Principia Mathematica\", \"Disquisitiones Arithmeticae\"]</code>.",
          "testString": "assert(JSON.stringify(newerBookList) === JSON.stringify(['The Hound of the Baskervilles', 'Philosophiæ Naturalis Principia Mathematica', 'Disquisitiones Arithmeticae']), '<code>newerBookList</code>应等于<code>[\"The Hound of the Baskervilles\", \"Philosophiæ Naturalis Principia Mathematica\", \"Disquisitiones Arithmeticae\"]</code>.');"
        },
        {
          "text": "<code>newestBookList</code>应等于<code>[\"The Hound of the Baskervilles\", \"Philosophiæ Naturalis Principia Mathematica\", \"Disquisitiones Arithmeticae\", \"A Brief History of Time\"]</code>.",
          "testString": "assert(JSON.stringify(newestBookList) === JSON.stringify(['The Hound of the Baskervilles', 'Philosophiæ Naturalis Principia Mathematica', 'Disquisitiones Arithmeticae', 'A Brief History of Time']), '<code>newestBookList</code>应等于<code>[\"The Hound of the Baskervilles\", \"Philosophiæ Naturalis Principia Mathematica\", \"Disquisitiones Arithmeticae\", \"A Brief History of Time\"]</code>.');"
        }
      ],
      "solutions": [],
      "hints": [
        "Look at how the functions are called to see the correct order of the parameters.",
        "Consider using the concat method instead of push.",
        "The slice method returns a new array without modifying the original."
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// 全局变量",
            "var bookList = [\"The Hound of the Baskervilles\", \"On The Electrodynamics of Moving Bodies\", \"Philosophiæ Naturalis Principia Mathematica\", \"Disquisitiones Arithmeticae\"];",
            "",
            "/* 这个函数应该增加一本书到列表中，并返回这个列表 */",
            "// 新参数应在 bookName 之前",
            "",
            "// 请在本行以下添加你的代码",
            "function add (bookName) {",
            "  ",
            "  return bookList.push(bookName);",
            "  ",
            "  // 请在本行以上添加你的代码",
            "}",
            "",
            "/* 这个函数应该移除一本书到列表中，并返回这个列表 */",
            "// 新参数应在 bookName 之前",
            "",
            "// 请在本行以下添加你的代码",
            "function remove (bookName) {",
            "  if (bookList.indexOf(bookName) >= 0) {",
            "    ",
            "    return bookList.splice(0, 1, bookName);",
            "    ",
            "    // 请在本行以上添加你的代码",
            "    }",
            "}",
            "",
            "var newBookList = add(bookList, 'A Brief History of Time');",
            "var newerBookList = remove(bookList, 'On The Electrodynamics of Moving Bodies');",
            "var newestBookList = remove(add(bookList, 'A Brief History of Time'), 'On The Electrodynamics of Moving Bodies');",
            "",
            "console.log(bookList);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7b8f367417b2b2512b61",
      "title": "Use the map Method to Extract Data from an Array",
      "description": [
        "So far we have learned to use pure functions to avoid side effects in a program. Also, we have seen the value in having a function only depend on its input arguments.",
        "This is only the beginning. As its name suggests, functional programming is centered around a theory of functions.",
        "It would make sense to be able to pass them as arguments to other functions, and return a function from another function. Functions are considered <code>First Class Objects</code> in JavaScript, which means they can be used like any other object. They can be saved in variables, stored in an object, or passed as function arguments.",
        "Let's start with some simple array functions, which are methods on the array object prototype. In this exercise we are looking at <code>Array.prototype.map()</code>, or more simply <code>map</code>.",
        "Remember that the <code>map</code> method is a way to iterate over each item in an array. It creates a new array (without changing the original one) after applying a callback function to every element.",
        "<hr>",
        "The <code>watchList</code> array holds objects with information on several movies. Use <code>map</code> to pull the title and rating from <code>watchList</code> and save the new array in the <code>rating</code> variable. The code in the editor currently uses a <code>for</code> loop to do this, replace the loop functionality with your <code>map</code> expression."
      ],
      "tests": [
        {
          "text": "The <code>watchList</code> variable should not change.",
          "testString": "assert(watchList[0].Title === \"Inception\" && watchList[4].Director == \"James Cameron\", 'The <code>watchList</code> variable should not change.');"
        },
        {
          "text": "Your code should not use a <code>for</code> loop.",
          "testString": "assert(!code.match(/for\\s*?\\(.+?\\)/g), 'Your code should not use a <code>for</code> loop.');"
        },
        {
          "text": "Your code should use the <code>map</code> method.",
          "testString": "assert(code.match(/\\.map/g), 'Your code should use the <code>map</code> method.');"
        },
        {
          "text": "<code>rating</code> should equal <code>[{\"title\":\"Inception\",\"rating\":\"8.8\"},{\"title\":\"Interstellar\",\"rating\":\"8.6\"},{\"title\":\"The Dark Knight\",\"rating\":\"9.0\"},{\"title\":\"Batman Begins\",\"rating\":\"8.3\"},{\"title\":\"Avatar\",\"rating\":\"7.9\"}]</code>.",
          "testString": "assert(JSON.stringify(rating) === JSON.stringify([{\"title\":\"Inception\",\"rating\":\"8.8\"},{\"title\":\"Interstellar\",\"rating\":\"8.6\"},{\"title\":\"The Dark Knight\",\"rating\":\"9.0\"},{\"title\":\"Batman Begins\",\"rating\":\"8.3\"},{\"title\":\"Avatar\",\"rating\":\"7.9\"}]), '<code>rating</code> should equal <code>[{\"title\":\"Inception\",\"rating\":\"8.8\"},{\"title\":\"Interstellar\",\"rating\":\"8.6\"},{\"title\":\"The Dark Knight\",\"rating\":\"9.0\"},{\"title\":\"Batman Begins\",\"rating\":\"8.3\"},{\"title\":\"Avatar\",\"rating\":\"7.9\"}]</code>.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// the global variable",
            "var watchList = [",
            "                 {  ",
            "                   \"Title\": \"Inception\",",
            "                   \"Year\": \"2010\",",
            "                   \"Rated\": \"PG-13\",",
            "                   \"Released\": \"16 Jul 2010\",",
            "                   \"Runtime\": \"148 min\",",
            "                   \"Genre\": \"Action, Adventure, Crime\",",
            "                   \"Director\": \"Christopher Nolan\",",
            "                   \"Writer\": \"Christopher Nolan\",",
            "                   \"Actors\": \"Leonardo DiCaprio, Joseph Gordon-Levitt, Ellen Page, Tom Hardy\",",
            "                   \"Plot\": \"A thief, who steals corporate secrets through use of dream-sharing technology, is given the inverse task of planting an idea into the mind of a CEO.\",",
            "                   \"Language\": \"English, Japanese, French\",",
            "                   \"Country\": \"USA, UK\",",
            "                   \"Awards\": \"Won 4 Oscars. Another 143 wins & 198 nominations.\",",
            "                   \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMjAxMzY3NjcxNF5BMl5BanBnXkFtZTcwNTI5OTM0Mw@@._V1_SX300.jpg\",",
            "                   \"Metascore\": \"74\",",
            "                   \"imdbRating\": \"8.8\",",
            "                   \"imdbVotes\": \"1,446,708\",",
            "                   \"imdbID\": \"tt1375666\",",
            "                   \"Type\": \"movie\",",
            "                   \"Response\": \"True\"",
            "                },",
            "                {  ",
            "                   \"Title\": \"Interstellar\",",
            "                   \"Year\": \"2014\",",
            "                   \"Rated\": \"PG-13\",",
            "                   \"Released\": \"07 Nov 2014\",",
            "                   \"Runtime\": \"169 min\",",
            "                   \"Genre\": \"Adventure, Drama, Sci-Fi\",",
            "                   \"Director\": \"Christopher Nolan\",",
            "                   \"Writer\": \"Jonathan Nolan, Christopher Nolan\",",
            "                   \"Actors\": \"Ellen Burstyn, Matthew McConaughey, Mackenzie Foy, John Lithgow\",",
            "                   \"Plot\": \"A team of explorers travel through a wormhole in space in an attempt to ensure humanity's survival.\",",
            "                   \"Language\": \"English\",",
            "                   \"Country\": \"USA, UK\",",
            "                   \"Awards\": \"Won 1 Oscar. Another 39 wins & 132 nominations.\",",
            "                   \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMjIxNTU4MzY4MF5BMl5BanBnXkFtZTgwMzM4ODI3MjE@._V1_SX300.jpg\",",
            "                   \"Metascore\": \"74\",",
            "                   \"imdbRating\": \"8.6\",",
            "                   \"imdbVotes\": \"910,366\",",
            "                   \"imdbID\": \"tt0816692\",",
            "                   \"Type\": \"movie\",",
            "                   \"Response\": \"True\"",
            "                },",
            "                {",
            "                   \"Title\": \"The Dark Knight\",",
            "                   \"Year\": \"2008\",",
            "                   \"Rated\": \"PG-13\",",
            "                   \"Released\": \"18 Jul 2008\",",
            "                   \"Runtime\": \"152 min\",",
            "                   \"Genre\": \"Action, Adventure, Crime\",",
            "                   \"Director\": \"Christopher Nolan\",",
            "                   \"Writer\": \"Jonathan Nolan (screenplay), Christopher Nolan (screenplay), Christopher Nolan (story), David S. Goyer (story), Bob Kane (characters)\",",
            "                   \"Actors\": \"Christian Bale, Heath Ledger, Aaron Eckhart, Michael Caine\",",
            "                   \"Plot\": \"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, the caped crusader must come to terms with one of the greatest psychological tests of his ability to fight injustice.\",",
            "                   \"Language\": \"English, Mandarin\",",
            "                   \"Country\": \"USA, UK\",",
            "                   \"Awards\": \"Won 2 Oscars. Another 146 wins & 142 nominations.\",",
            "                   \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMTMxNTMwODM0NF5BMl5BanBnXkFtZTcwODAyMTk2Mw@@._V1_SX300.jpg\",",
            "                   \"Metascore\": \"82\",",
            "                   \"imdbRating\": \"9.0\",",
            "                   \"imdbVotes\": \"1,652,832\",",
            "                   \"imdbID\": \"tt0468569\",",
            "                   \"Type\": \"movie\",",
            "                   \"Response\": \"True\"",
            "                },",
            "                {  ",
            "                   \"Title\": \"Batman Begins\",",
            "                   \"Year\": \"2005\",",
            "                   \"Rated\": \"PG-13\",",
            "                   \"Released\": \"15 Jun 2005\",",
            "                   \"Runtime\": \"140 min\",",
            "                   \"Genre\": \"Action, Adventure\",",
            "                   \"Director\": \"Christopher Nolan\",",
            "                   \"Writer\": \"Bob Kane (characters), David S. Goyer (story), Christopher Nolan (screenplay), David S. Goyer (screenplay)\",",
            "                   \"Actors\": \"Christian Bale, Michael Caine, Liam Neeson, Katie Holmes\",",
            "                   \"Plot\": \"After training with his mentor, Batman begins his fight to free crime-ridden Gotham City from the corruption that Scarecrow and the League of Shadows have cast upon it.\",",
            "                   \"Language\": \"English, Urdu, Mandarin\",",
            "                   \"Country\": \"USA, UK\",",
            "                   \"Awards\": \"Nominated for 1 Oscar. Another 15 wins & 66 nominations.\",",
            "                   \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BNTM3OTc0MzM2OV5BMl5BanBnXkFtZTYwNzUwMTI3._V1_SX300.jpg\",",
            "                   \"Metascore\": \"70\",",
            "                   \"imdbRating\": \"8.3\",",
            "                   \"imdbVotes\": \"972,584\",",
            "                   \"imdbID\": \"tt0372784\",",
            "                   \"Type\": \"movie\",",
            "                   \"Response\": \"True\"",
            "                },",
            "                {",
            "                   \"Title\": \"Avatar\",",
            "                   \"Year\": \"2009\",",
            "                   \"Rated\": \"PG-13\",",
            "                   \"Released\": \"18 Dec 2009\",",
            "                   \"Runtime\": \"162 min\",",
            "                   \"Genre\": \"Action, Adventure, Fantasy\",",
            "                   \"Director\": \"James Cameron\",",
            "                   \"Writer\": \"James Cameron\",",
            "                   \"Actors\": \"Sam Worthington, Zoe Saldana, Sigourney Weaver, Stephen Lang\",",
            "                   \"Plot\": \"A paraplegic marine dispatched to the moon Pandora on a unique mission becomes torn between following his orders and protecting the world he feels is his home.\",",
            "                   \"Language\": \"English, Spanish\",",
            "                   \"Country\": \"USA, UK\",",
            "                   \"Awards\": \"Won 3 Oscars. Another 80 wins & 121 nominations.\",",
            "                   \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMTYwOTEwNjAzMl5BMl5BanBnXkFtZTcwODc5MTUwMw@@._V1_SX300.jpg\",",
            "                   \"Metascore\": \"83\",",
            "                   \"imdbRating\": \"7.9\",",
            "                   \"imdbVotes\": \"876,575\",",
            "                   \"imdbID\": \"tt0499549\",",
            "                   \"Type\": \"movie\",",
            "                   \"Response\": \"True\"",
            "                }",
            "];",
            "",
            "// 请在本行以下添加你的代码",
            "",
            "var rating = [];",
            "for(var i=0; i < watchList.length; i++){",
            "  rating.push({title: watchList[i][\"Title\"],  rating: watchList[i][\"imdbRating\"]});",
            "}",
            "",
            "// 请在本行以上添加你的代码",
            "",
            "console.log(rating); "
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7b8f367417b2b2512b62",
      "title": "Implement map on a Prototype",
      "description": [
        "As you have seen from applying <code>Array.prototype.map()</code>, or simply <code>map()</code> earlier, the <code>map</code> method returns an array of the same length as the one it was called on. It also doesn't alter the original array, as long as its callback function doesn't.",
        "In other words, <code>map</code> is a pure function, and its output depends solely on its inputs. Plus, it takes another function as its argument.",
        "It would teach us a lot about <code>map</code> to try to implement a version of it that behaves exactly like the <code>Array.prototype.map()</code> with a <code>for</code> loop or <code>Array.prototype.forEach()</code>.",
        "Note: A pure function is allowed to alter local variables defined within its scope, although, it's preferable to avoid that as well.",
        "<hr>",
        "Write your own <code>Array.prototype.myMap()</code>, which should behave exactly like <code>Array.prototype.map()</code>. You may use a <code>for</code> loop or the <code>forEach</code> method."
      ],
      "tests": [
        {
          "text": "<code>new_s</code> should equal <code>[46, 130, 196, 10]</code>.",
          "testString": "assert(JSON.stringify(new_s) === JSON.stringify([46, 130, 196, 10]), '<code>new_s</code> should equal <code>[46, 130, 196, 10]</code>.');"
        },
        {
          "text": "Your code should not use the <code>map</code> method.",
          "testString": "assert(!code.match(/\\.map/g), 'Your code should not use the <code>map</code> method.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// the global Array",
            "var s = [23, 65, 98, 5];",
            "",
            "Array.prototype.myMap = function(callback){",
            "  var newArray = [];",
            "  // 请在本行以下添加你的代码",
            "  ",
            "  // 请在本行以上添加你的代码",
            "  return newArray;",
            "",
            "};",
            "",
            "var new_s = s.myMap(function(item){",
            "  return item * 2;",
            "});"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7b8f367417b2b2512b63",
      "title": "Use the filter Method to Extract Data from an Array",
      "description": [
        "Another useful array function is <code>Array.prototype.filter()</code>, or simply <code>filter()</code>. The <code>filter</code> method returns a new array which is at most as long as the original array, but usually has fewer items.",
        "<code>Filter</code> doesn't alter the original array, just like <code>map</code>. It takes a callback function that applies the logic inside the callback on each element of the array. If an element returns true based on the criteria in the callback function, then it is included in the new array.",
        "<hr>",
        "The variable <code>watchList</code> holds an array of objects with information on several movies. Use a combination of <code>filter</code> and <code>map</code> to return a new array of objects with only <code>title</code> and <code>rating</code> keys, but where <code>imdbRating</code> is greater than or equal to 8.0. Note that the rating values are saved as strings in the object and you may want to convert them into numbers to perform mathematical operations on them."
      ],
      "tests": [
        {
          "text": "The <code>watchList</code> variable should not change.",
          "testString": "assert(watchList[0].Title === \"Inception\" && watchList[4].Director == \"James Cameron\", 'The <code>watchList</code> variable should not change.');"
        },
        {
          "text": "Your code should use the <code>filter</code> method.",
          "testString": "assert(code.match(/\\.filter/g), 'Your code should use the <code>filter</code> method.');"
        },
        {
          "text": "Your code should not use a <code>for</code> loop.",
          "testString": "assert(!code.match(/for\\s*?\\(.+?\\)/g), 'Your code should not use a <code>for</code> loop.');"
        },
        {
          "text": "<code>filteredList</code> should equal <code>[{\"title\": \"Inception\",\"rating\": \"8.8\"},{\"title\": \"Interstellar\",\"rating\": \"8.6\"},{\"title\": \"The Dark Knight\",\"rating\": \"9.0\"},{\"title\": \"Batman Begins\",\"rating\": \"8.3\"}]</code>.",
          "testString": "assert.deepEqual(filteredList, [{\"title\": \"Inception\",\"rating\": \"8.8\"},{\"title\": \"Interstellar\",\"rating\": \"8.6\"},{\"title\": \"The Dark Knight\",\"rating\": \"9.0\"},{\"title\": \"Batman Begins\",\"rating\": \"8.3\"}], '<code>filteredList</code> should equal <code>[{\"title\": \"Inception\",\"rating\": \"8.8\"},{\"title\": \"Interstellar\",\"rating\": \"8.6\"},{\"title\": \"The Dark Knight\",\"rating\": \"9.0\"},{\"title\": \"Batman Begins\",\"rating\": \"8.3\"}]</code>.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// the global variable",
            "var watchList = [",
            "                 {  ",
            "                   \"Title\": \"Inception\",",
            "                   \"Year\": \"2010\",",
            "                   \"Rated\": \"PG-13\",",
            "                   \"Released\": \"16 Jul 2010\",",
            "                   \"Runtime\": \"148 min\",",
            "                   \"Genre\": \"Action, Adventure, Crime\",",
            "                   \"Director\": \"Christopher Nolan\",",
            "                   \"Writer\": \"Christopher Nolan\",",
            "                   \"Actors\": \"Leonardo DiCaprio, Joseph Gordon-Levitt, Ellen Page, Tom Hardy\",",
            "                   \"Plot\": \"A thief, who steals corporate secrets through use of dream-sharing technology, is given the inverse task of planting an idea into the mind of a CEO.\",",
            "                   \"Language\": \"English, Japanese, French\",",
            "                   \"Country\": \"USA, UK\",",
            "                   \"Awards\": \"Won 4 Oscars. Another 143 wins & 198 nominations.\",",
            "                   \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMjAxMzY3NjcxNF5BMl5BanBnXkFtZTcwNTI5OTM0Mw@@._V1_SX300.jpg\",",
            "                   \"Metascore\": \"74\",",
            "                   \"imdbRating\": \"8.8\",",
            "                   \"imdbVotes\": \"1,446,708\",",
            "                   \"imdbID\": \"tt1375666\",",
            "                   \"Type\": \"movie\",",
            "                   \"Response\": \"True\"",
            "                },",
            "                {  ",
            "                   \"Title\": \"Interstellar\",",
            "                   \"Year\": \"2014\",",
            "                   \"Rated\": \"PG-13\",",
            "                   \"Released\": \"07 Nov 2014\",",
            "                   \"Runtime\": \"169 min\",",
            "                   \"Genre\": \"Adventure, Drama, Sci-Fi\",",
            "                   \"Director\": \"Christopher Nolan\",",
            "                   \"Writer\": \"Jonathan Nolan, Christopher Nolan\",",
            "                   \"Actors\": \"Ellen Burstyn, Matthew McConaughey, Mackenzie Foy, John Lithgow\",",
            "                   \"Plot\": \"A team of explorers travel through a wormhole in space in an attempt to ensure humanity's survival.\",",
            "                   \"Language\": \"English\",",
            "                   \"Country\": \"USA, UK\",",
            "                   \"Awards\": \"Won 1 Oscar. Another 39 wins & 132 nominations.\",",
            "                   \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMjIxNTU4MzY4MF5BMl5BanBnXkFtZTgwMzM4ODI3MjE@._V1_SX300.jpg\",",
            "                   \"Metascore\": \"74\",",
            "                   \"imdbRating\": \"8.6\",",
            "                   \"imdbVotes\": \"910,366\",",
            "                   \"imdbID\": \"tt0816692\",",
            "                   \"Type\": \"movie\",",
            "                   \"Response\": \"True\"",
            "                },",
            "                {",
            "                   \"Title\": \"The Dark Knight\",",
            "                   \"Year\": \"2008\",",
            "                   \"Rated\": \"PG-13\",",
            "                   \"Released\": \"18 Jul 2008\",",
            "                   \"Runtime\": \"152 min\",",
            "                   \"Genre\": \"Action, Adventure, Crime\",",
            "                   \"Director\": \"Christopher Nolan\",",
            "                   \"Writer\": \"Jonathan Nolan (screenplay), Christopher Nolan (screenplay), Christopher Nolan (story), David S. Goyer (story), Bob Kane (characters)\",",
            "                   \"Actors\": \"Christian Bale, Heath Ledger, Aaron Eckhart, Michael Caine\",",
            "                   \"Plot\": \"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, the caped crusader must come to terms with one of the greatest psychological tests of his ability to fight injustice.\",",
            "                   \"Language\": \"English, Mandarin\",",
            "                   \"Country\": \"USA, UK\",",
            "                   \"Awards\": \"Won 2 Oscars. Another 146 wins & 142 nominations.\",",
            "                   \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMTMxNTMwODM0NF5BMl5BanBnXkFtZTcwODAyMTk2Mw@@._V1_SX300.jpg\",",
            "                   \"Metascore\": \"82\",",
            "                   \"imdbRating\": \"9.0\",",
            "                   \"imdbVotes\": \"1,652,832\",",
            "                   \"imdbID\": \"tt0468569\",",
            "                   \"Type\": \"movie\",",
            "                   \"Response\": \"True\"",
            "                },",
            "                {  ",
            "                   \"Title\": \"Batman Begins\",",
            "                   \"Year\": \"2005\",",
            "                   \"Rated\": \"PG-13\",",
            "                   \"Released\": \"15 Jun 2005\",",
            "                   \"Runtime\": \"140 min\",",
            "                   \"Genre\": \"Action, Adventure\",",
            "                   \"Director\": \"Christopher Nolan\",",
            "                   \"Writer\": \"Bob Kane (characters), David S. Goyer (story), Christopher Nolan (screenplay), David S. Goyer (screenplay)\",",
            "                   \"Actors\": \"Christian Bale, Michael Caine, Liam Neeson, Katie Holmes\",",
            "                   \"Plot\": \"After training with his mentor, Batman begins his fight to free crime-ridden Gotham City from the corruption that Scarecrow and the League of Shadows have cast upon it.\",",
            "                   \"Language\": \"English, Urdu, Mandarin\",",
            "                   \"Country\": \"USA, UK\",",
            "                   \"Awards\": \"Nominated for 1 Oscar. Another 15 wins & 66 nominations.\",",
            "                   \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BNTM3OTc0MzM2OV5BMl5BanBnXkFtZTYwNzUwMTI3._V1_SX300.jpg\",",
            "                   \"Metascore\": \"70\",",
            "                   \"imdbRating\": \"8.3\",",
            "                   \"imdbVotes\": \"972,584\",",
            "                   \"imdbID\": \"tt0372784\",",
            "                   \"Type\": \"movie\",",
            "                   \"Response\": \"True\"",
            "                },",
            "                {",
            "                   \"Title\": \"Avatar\",",
            "                   \"Year\": \"2009\",",
            "                   \"Rated\": \"PG-13\",",
            "                   \"Released\": \"18 Dec 2009\",",
            "                   \"Runtime\": \"162 min\",",
            "                   \"Genre\": \"Action, Adventure, Fantasy\",",
            "                   \"Director\": \"James Cameron\",",
            "                   \"Writer\": \"James Cameron\",",
            "                   \"Actors\": \"Sam Worthington, Zoe Saldana, Sigourney Weaver, Stephen Lang\",",
            "                   \"Plot\": \"A paraplegic marine dispatched to the moon Pandora on a unique mission becomes torn between following his orders and protecting the world he feels is his home.\",",
            "                   \"Language\": \"English, Spanish\",",
            "                   \"Country\": \"USA, UK\",",
            "                   \"Awards\": \"Won 3 Oscars. Another 80 wins & 121 nominations.\",",
            "                   \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMTYwOTEwNjAzMl5BMl5BanBnXkFtZTcwODc5MTUwMw@@._V1_SX300.jpg\",",
            "                   \"Metascore\": \"83\",",
            "                   \"imdbRating\": \"7.9\",",
            "                   \"imdbVotes\": \"876,575\",",
            "                   \"imdbID\": \"tt0499549\",",
            "                   \"Type\": \"movie\",",
            "                   \"Response\": \"True\"",
            "                }",
            "];",
            "",
            "// 请在本行以下添加你的代码",
            "",
            "var filteredList;",
            "",
            "// 请在本行以上添加你的代码",
            "",
            "console.log(filteredList); "
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7b8f367417b2b2512b64",
      "title": "Implement the filter Method on a Prototype",
      "description": [
        "It would teach us a lot about the <code>filter</code> method if we try to implement a version of it that behaves exactly like <code>Array.prototype.filter()</code>. It can use either a <code>for</code> loop or <code>Array.prototype.forEach()</code>.",
        "Note: A pure function is allowed to alter local variables defined within its scope, although, it's preferable to avoid that as well.",
        "<hr>",
        "Write your own <code>Array.prototype.myFilter()</code>, which should behave exactly like <code>Array.prototype.filter()</code>. You may use a <code>for</code> loop or the <code>Array.prototype.forEach()</code> method."
      ],
      "tests": [
        {
          "text": "<code>new_s</code> should equal <code>[23, 65, 5]</code>.",
          "testString": "assert(JSON.stringify(new_s) === JSON.stringify([23, 65, 5]), '<code>new_s</code> should equal <code>[23, 65, 5]</code>.');"
        },
        {
          "text": "Your code should not use the <code>filter</code> method.",
          "testString": "assert(!code.match(/\\.filter/g), 'Your code should not use the <code>filter</code> method.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// the global Array",
            "var s = [23, 65, 98, 5];",
            "",
            "Array.prototype.myFilter = function(callback){",
            "  var newArray = [];",
            "  // 请在本行以下添加你的代码",
            "  ",
            "  // 请在本行以上添加你的代码",
            "  return newArray;",
            "",
            "};",
            "",
            "var new_s = s.myFilter(function(item){",
            "  return item % 2 === 1;",
            "});"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7b90367417b2b2512b65",
      "title": "Return Part of an Array Using the slice Method",
      "description": [
        "The <code>slice</code> method returns a copy of certain elements of an array. It can take two arguments, the first gives the index of where to begin the slice, the second is the index for where to end the slice (and it's non-inclusive). If the arguments are not provided, the default is to start at the beginning of the array through the end, which is an easy way to make a copy of the entire array. The <code>slice</code> method does not mutate the original array, but returns a new one.",
        "Here's an example:",
        "<blockquote>var arr = [\"Cat\", \"Dog\", \"Tiger\", \"Zebra\"];<br>var newArray = arr.slice(1, 3);<br>// Sets newArray to [\"Dog\", \"Tiger\"]</blockquote>",
        "<hr>",
        "Use the <code>slice</code> method in the <code>sliceArray</code> function to return part of the <code>anim</code> array given the provided <code>beginSlice</code> and <code>endSlice</code> indices. The function should return an array."
      ],
      "tests": [
        {
          "text": "Your code should use the <code>slice</code> method.",
          "testString": "assert(code.match(/\\.slice/g), 'Your code should use the <code>slice</code> method.');"
        },
        {
          "text": "The <code>inputAnim</code> variable should not change.",
          "testString": "assert(JSON.stringify(inputAnim) === JSON.stringify([\"Cat\", \"Dog\", \"Tiger\", \"Zebra\", \"Ant\"]), 'The <code>inputAnim</code> variable should not change.');"
        },
        {
          "text": "<code>sliceArray([\"Cat\", \"Dog\", \"Tiger\", \"Zebra\", \"Ant\"], 1, 3)</code> should return <code>[\"Dog\", \"Tiger\"]</code>.",
          "testString": "assert(JSON.stringify(sliceArray([\"Cat\", \"Dog\", \"Tiger\", \"Zebra\", \"Ant\"], 1, 3)) === JSON.stringify([\"Dog\", \"Tiger\"]), '<code>sliceArray([\"Cat\", \"Dog\", \"Tiger\", \"Zebra\", \"Ant\"], 1, 3)</code> should return <code>[\"Dog\", \"Tiger\"]</code>.');"
        },
        {
          "text": "<code>sliceArray([\"Cat\", \"Dog\", \"Tiger\", \"Zebra\", \"Ant\"], 0, 1)</code> should return <code>[\"Cat\"]</code>.",
          "testString": "assert(JSON.stringify(sliceArray([\"Cat\", \"Dog\", \"Tiger\", \"Zebra\", \"Ant\"], 0, 1)) === JSON.stringify([\"Cat\"]), '<code>sliceArray([\"Cat\", \"Dog\", \"Tiger\", \"Zebra\", \"Ant\"], 0, 1)</code> should return <code>[\"Cat\"]</code>.');"
        },
        {
          "text": "<code>sliceArray([\"Cat\", \"Dog\", \"Tiger\", \"Zebra\", \"Ant\"], 1, 4)</code> should return <code>[\"Dog\", \"Tiger\", \"Zebra\"]</code>.",
          "testString": "assert(JSON.stringify(sliceArray([\"Cat\", \"Dog\", \"Tiger\", \"Zebra\", \"Ant\"], 1, 4)) === JSON.stringify([\"Dog\", \"Tiger\", \"Zebra\"]), '<code>sliceArray([\"Cat\", \"Dog\", \"Tiger\", \"Zebra\", \"Ant\"], 1, 4)</code> should return <code>[\"Dog\", \"Tiger\", \"Zebra\"]</code>.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function sliceArray(anim, beginSlice, endSlice) {",
            "  // 请在本行以下添加你的代码",
            "  ",
            "  ",
            "  // 请在本行以上添加你的代码",
            "}",
            "var inputAnim = [\"Cat\", \"Dog\", \"Tiger\", \"Zebra\", \"Ant\"];",
            "sliceArray(inputAnim, 1, 3);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "9d7123c8c441eeafaeb5bdef",
      "title": "Remove Elements from an Array Using slice Instead of splice",
      "description": [
        "A common pattern while working with arrays is when you want to remove items and keep the rest of the array. JavaScript offers the <code>splice</code> method for this, which takes arguments for the index of where to start removing items, then the number of items to remove. If the second argument is not provided, the default is to remove items through the end. However, the <code>splice</code> method mutates the original array it is called on. Here's an example:",
        "<blockquote>var cities = [\"Chicago\", \"Delhi\", \"Islamabad\", \"London\", \"Berlin\"];<br>cities.splice(3, 1); // Returns \"London\" and deletes it from the cities array<br>// cities is now [\"Chicago\", \"Delhi\", \"Islamabad\", \"Berlin\"]</blockquote>",
        "As we saw in the last challenge, the <code>slice</code> method does not mutate the original array, but returns a new one which can be saved into a variable. Recall that the <code>slice</code> method takes two arguments for the indices to begin and end the slice (the end is non-inclusive), and returns those items in a new array. Using the <code>slice</code> method instead of <code>splice</code> helps to avoid any array-mutating side effects.",
        "<hr>",
        "Rewrite the function <code>nonMutatingSplice</code> by using <code>slice</code> instead of <code>splice</code>. It should limit the provided <code>cities</code> array to a length of 3, and return a new array with only the first three items.",
        "Do not mutate the original array provided to the function."
      ],
      "tests": [
        {
          "text": "Your code should use the <code>slice</code> method.",
          "testString": "assert(code.match(/\\.slice/g), 'Your code should use the <code>slice</code> method.');"
        },
        {
          "text": "Your code should not use the <code>splice</code> method.",
          "testString": "assert(!code.match(/\\.splice/g), 'Your code should not use the <code>splice</code> method.');"
        },
        {
          "text": "The <code>inputCities</code> array should not change.",
          "testString": "assert(JSON.stringify(inputCities) === JSON.stringify([\"Chicago\", \"Delhi\", \"Islamabad\", \"London\", \"Berlin\"]), 'The <code>inputCities</code> array should not change.');"
        },
        {
          "text": "<code>nonMutatingSplice([\"Chicago\", \"Delhi\", \"Islamabad\", \"London\", \"Berlin\"])</code> should return <code>[\"Chicago\", \"Delhi\", \"Islamabad\"]</code>.",
          "testString": "assert(JSON.stringify(nonMutatingSplice([\"Chicago\", \"Delhi\", \"Islamabad\", \"London\", \"Berlin\"])) === JSON.stringify([\"Chicago\", \"Delhi\", \"Islamabad\"]), '<code>nonMutatingSplice([\"Chicago\", \"Delhi\", \"Islamabad\", \"London\", \"Berlin\"])</code> should return <code>[\"Chicago\", \"Delhi\", \"Islamabad\"]</code>.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function nonMutatingSplice(cities) {",
            "  // 请在本行以下添加你的代码",
            "  return cities.splice(3);",
            "  ",
            "  // 请在本行以上添加你的代码",
            "}",
            "var inputCities = [\"Chicago\", \"Delhi\", \"Islamabad\", \"London\", \"Berlin\"];",
            "nonMutatingSplice(inputCities);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7da9367417b2b2512b66",
      "title": "Combine Two Arrays Using the concat Method",
      "description": [
        "<code>Concatenation</code> means to join items end to end. JavaScript offers the <code>concat</code> method for both strings and arrays that work in the same way. For arrays, the method is called on one, then another array is provided as the argument to <code>concat</code>, which is added to the end of the first array. It returns a new array and does not mutate either of the original arrays. Here's an example:",
        "<blockquote>[1, 2, 3].concat([4, 5, 6]);<br>// Returns a new array [1, 2, 3, 4, 5, 6]</blockquote>",
        "<hr>",
        "Use the <code>concat</code> method in the <code>nonMutatingConcat</code> function to concatenate <code>attach</code> to the end of <code>original</code>. The function should return the concatenated array."
      ],
      "tests": [
        {
          "text": "Your code should use the <code>concat</code> method.",
          "testString": "assert(code.match(/\\.concat/g), 'Your code should use the <code>concat</code> method.');"
        },
        {
          "text": "The <code>first</code> array should not change.",
          "testString": "assert(JSON.stringify(first) === JSON.stringify([1, 2, 3]), 'The <code>first</code> array should not change.');"
        },
        {
          "text": "The <code>second</code> array should not change.",
          "testString": "assert(JSON.stringify(second) === JSON.stringify([4, 5]), 'The <code>second</code> array should not change.');"
        },
        {
          "text": "<code>nonMutatingConcat([1, 2, 3], [4, 5])</code> should return <code>[1, 2, 3, 4, 5]</code>.",
          "testString": "assert(JSON.stringify(nonMutatingConcat([1, 2, 3], [4, 5])) === JSON.stringify([1, 2, 3, 4, 5]), '<code>nonMutatingConcat([1, 2, 3], [4, 5])</code> should return <code>[1, 2, 3, 4, 5]</code>.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function nonMutatingConcat(original, attach) {",
            "  // 请在本行以下添加你的代码",
            "  ",
            "  ",
            "  // 请在本行以上添加你的代码",
            "}",
            "var first = [1, 2, 3];",
            "var second = [4, 5];",
            "nonMutatingConcat(first, second);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7da9367417b2b2512b67",
      "title": "Add Elements to the End of an Array Using concat Instead of push",
      "description": [
        "Functional programming is all about creating and using non-mutating functions.",
        "The last challenge introduced the <code>concat</code> method as a way to combine arrays into a new one without mutating the original arrays. Compare <code>concat</code> to the <code>push</code> method. <code>Push</code> adds an item to the end of the same array it is called on, which mutates that array. Here's an example:",
        "<blockquote>var arr = [1, 2, 3];<br>arr.push([4, 5, 6]);<br>// arr is changed to [1, 2, 3, [4, 5, 6]]<br>// Not the functional programming way</blockquote>",
        "<code>Concat</code> offers a way to add new items to the end of an array without any mutating side effects.",
        "<hr>",
        "Change the <code>nonMutatingPush</code> function so it uses <code>concat</code> to add <code>newItem</code> to the end of <code>original</code> instead of <code>push</code>. The function should return an array."
      ],
      "tests": [
        {
          "text": "Your code should use the <code>concat</code> method.",
          "testString": "assert(code.match(/\\.concat/g), 'Your code should use the <code>concat</code> method.');"
        },
        {
          "text": "Your code should not use the <code>push</code> method.",
          "testString": "assert(!code.match(/\\.push/g), 'Your code should not use the <code>push</code> method.');"
        },
        {
          "text": "The <code>first</code> array should not change.",
          "testString": "assert(JSON.stringify(first) === JSON.stringify([1, 2, 3]), 'The <code>first</code> array should not change.');"
        },
        {
          "text": "The <code>second</code> array should not change.",
          "testString": "assert(JSON.stringify(second) === JSON.stringify([4, 5]), 'The <code>second</code> array should not change.');"
        },
        {
          "text": "<code>nonMutatingPush([1, 2, 3], [4, 5])</code> should return <code>[1, 2, 3, 4, 5]</code>.",
          "testString": "assert(JSON.stringify(nonMutatingPush([1, 2, 3], [4, 5])) === JSON.stringify([1, 2, 3, 4, 5]), '<code>nonMutatingPush([1, 2, 3], [4, 5])</code> should return <code>[1, 2, 3, 4, 5]</code>.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function nonMutatingPush(original, newItem) {",
            "  // 请在本行以下添加你的代码",
            "  return original.push(newItem);",
            "  ",
            "  // 请在本行以上添加你的代码",
            "}",
            "var first = [1, 2, 3];",
            "var second = [4, 5];",
            "nonMutatingPush(first, second);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7da9367417b2b2512b68",
      "title": "Use the reduce Method to Analyze Data",
      "description": [
        "<code>Array.prototype.reduce()</code>, or simply <code>reduce()</code>, is the most general of all array operations in JavaScript. You can solve almost any array processing problem using the <code>reduce</code> method.",
        "This is not the case with the <code>filter</code> and <code>map</code> methods since they do not allow interaction between two different elements of the array. For example, if you want to compare elements of the array, or add them together, <code>filter</code> or <code>map</code> could not process that.",
        "The <code>reduce</code> method allows for more general forms of array processing, and it's possible to show that both <code>filter</code> and <code>map</code> can be derived as a special application of <code>reduce</code>.",
        "However, before we get there, let's practice using <code>reduce</code> first.",
        "<hr>",
        "The variable <code>watchList</code> holds an array of objects with information on several movies. Use <code>reduce</code> to find the average IMDB rating of the movies <strong>directed by Christopher Nolan</strong>. Recall from prior challenges how to <code>filter</code> data and <code>map</code> over it to pull what you need. You may need to create other variables, but save the final average into the variable <code>averageRating</code>. Note that the rating values are saved as strings in the object and need to be converted into numbers before they are used in any mathematical operations."
      ],
      "tests": [
        {
          "text": "The <code>watchList</code> variable should not change.",
          "testString": "assert(watchList[0].Title === \"Inception\" && watchList[4].Director == \"James Cameron\", 'The <code>watchList</code> variable should not change.');"
        },
        {
          "text": "Your code should use the <code>reduce</code> method.",
          "testString": "assert(code.match(/\\.reduce/g), 'Your code should use the <code>reduce</code> method.');"
        },
        {
          "text": "The <code>averageRating</code> should equal 8.675.",
          "testString": "assert(averageRating == 8.675, 'The <code>averageRating</code> should equal 8.675.');"
        },
        {
          "text": "Your code should not use a <code>for</code> loop.",
          "testString": "assert(!code.match(/for\\s*?\\(.*\\)/g), 'Your code should not use a <code>for</code> loop.');"
        }
      ],
      "solutions": [],
      "hints": [
        "Try using .filter() to filter the watchList by Director.",
        "Try using .map() to return an array of ratings.",
        "You can use Number() to convert a string into a number."
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// the global variable",
            "var watchList = [",
            "                 {  ",
            "                   \"Title\": \"Inception\",",
            "                   \"Year\": \"2010\",",
            "                   \"Rated\": \"PG-13\",",
            "                   \"Released\": \"16 Jul 2010\",",
            "                   \"Runtime\": \"148 min\",",
            "                   \"Genre\": \"Action, Adventure, Crime\",",
            "                   \"Director\": \"Christopher Nolan\",",
            "                   \"Writer\": \"Christopher Nolan\",",
            "                   \"Actors\": \"Leonardo DiCaprio, Joseph Gordon-Levitt, Ellen Page, Tom Hardy\",",
            "                   \"Plot\": \"A thief, who steals corporate secrets through use of dream-sharing technology, is given the inverse task of planting an idea into the mind of a CEO.\",",
            "                   \"Language\": \"English, Japanese, French\",",
            "                   \"Country\": \"USA, UK\",",
            "                   \"Awards\": \"Won 4 Oscars. Another 143 wins & 198 nominations.\",",
            "                   \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMjAxMzY3NjcxNF5BMl5BanBnXkFtZTcwNTI5OTM0Mw@@._V1_SX300.jpg\",",
            "                   \"Metascore\": \"74\",",
            "                   \"imdbRating\": \"8.8\",",
            "                   \"imdbVotes\": \"1,446,708\",",
            "                   \"imdbID\": \"tt1375666\",",
            "                   \"Type\": \"movie\",",
            "                   \"Response\": \"True\"",
            "                },",
            "                {  ",
            "                   \"Title\": \"Interstellar\",",
            "                   \"Year\": \"2014\",",
            "                   \"Rated\": \"PG-13\",",
            "                   \"Released\": \"07 Nov 2014\",",
            "                   \"Runtime\": \"169 min\",",
            "                   \"Genre\": \"Adventure, Drama, Sci-Fi\",",
            "                   \"Director\": \"Christopher Nolan\",",
            "                   \"Writer\": \"Jonathan Nolan, Christopher Nolan\",",
            "                   \"Actors\": \"Ellen Burstyn, Matthew McConaughey, Mackenzie Foy, John Lithgow\",",
            "                   \"Plot\": \"A team of explorers travel through a wormhole in space in an attempt to ensure humanity's survival.\",",
            "                   \"Language\": \"English\",",
            "                   \"Country\": \"USA, UK\",",
            "                   \"Awards\": \"Won 1 Oscar. Another 39 wins & 132 nominations.\",",
            "                   \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMjIxNTU4MzY4MF5BMl5BanBnXkFtZTgwMzM4ODI3MjE@._V1_SX300.jpg\",",
            "                   \"Metascore\": \"74\",",
            "                   \"imdbRating\": \"8.6\",",
            "                   \"imdbVotes\": \"910,366\",",
            "                   \"imdbID\": \"tt0816692\",",
            "                   \"Type\": \"movie\",",
            "                   \"Response\": \"True\"",
            "                },",
            "                {",
            "                   \"Title\": \"The Dark Knight\",",
            "                   \"Year\": \"2008\",",
            "                   \"Rated\": \"PG-13\",",
            "                   \"Released\": \"18 Jul 2008\",",
            "                   \"Runtime\": \"152 min\",",
            "                   \"Genre\": \"Action, Adventure, Crime\",",
            "                   \"Director\": \"Christopher Nolan\",",
            "                   \"Writer\": \"Jonathan Nolan (screenplay), Christopher Nolan (screenplay), Christopher Nolan (story), David S. Goyer (story), Bob Kane (characters)\",",
            "                   \"Actors\": \"Christian Bale, Heath Ledger, Aaron Eckhart, Michael Caine\",",
            "                   \"Plot\": \"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, the caped crusader must come to terms with one of the greatest psychological tests of his ability to fight injustice.\",",
            "                   \"Language\": \"English, Mandarin\",",
            "                   \"Country\": \"USA, UK\",",
            "                   \"Awards\": \"Won 2 Oscars. Another 146 wins & 142 nominations.\",",
            "                   \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMTMxNTMwODM0NF5BMl5BanBnXkFtZTcwODAyMTk2Mw@@._V1_SX300.jpg\",",
            "                   \"Metascore\": \"82\",",
            "                   \"imdbRating\": \"9.0\",",
            "                   \"imdbVotes\": \"1,652,832\",",
            "                   \"imdbID\": \"tt0468569\",",
            "                   \"Type\": \"movie\",",
            "                   \"Response\": \"True\"",
            "                },",
            "                {  ",
            "                   \"Title\": \"Batman Begins\",",
            "                   \"Year\": \"2005\",",
            "                   \"Rated\": \"PG-13\",",
            "                   \"Released\": \"15 Jun 2005\",",
            "                   \"Runtime\": \"140 min\",",
            "                   \"Genre\": \"Action, Adventure\",",
            "                   \"Director\": \"Christopher Nolan\",",
            "                   \"Writer\": \"Bob Kane (characters), David S. Goyer (story), Christopher Nolan (screenplay), David S. Goyer (screenplay)\",",
            "                   \"Actors\": \"Christian Bale, Michael Caine, Liam Neeson, Katie Holmes\",",
            "                   \"Plot\": \"After training with his mentor, Batman begins his fight to free crime-ridden Gotham City from the corruption that Scarecrow and the League of Shadows have cast upon it.\",",
            "                   \"Language\": \"English, Urdu, Mandarin\",",
            "                   \"Country\": \"USA, UK\",",
            "                   \"Awards\": \"Nominated for 1 Oscar. Another 15 wins & 66 nominations.\",",
            "                   \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BNTM3OTc0MzM2OV5BMl5BanBnXkFtZTYwNzUwMTI3._V1_SX300.jpg\",",
            "                   \"Metascore\": \"70\",",
            "                   \"imdbRating\": \"8.3\",",
            "                   \"imdbVotes\": \"972,584\",",
            "                   \"imdbID\": \"tt0372784\",",
            "                   \"Type\": \"movie\",",
            "                   \"Response\": \"True\"",
            "                },",
            "                {",
            "                   \"Title\": \"Avatar\",",
            "                   \"Year\": \"2009\",",
            "                   \"Rated\": \"PG-13\",",
            "                   \"Released\": \"18 Dec 2009\",",
            "                   \"Runtime\": \"162 min\",",
            "                   \"Genre\": \"Action, Adventure, Fantasy\",",
            "                   \"Director\": \"James Cameron\",",
            "                   \"Writer\": \"James Cameron\",",
            "                   \"Actors\": \"Sam Worthington, Zoe Saldana, Sigourney Weaver, Stephen Lang\",",
            "                   \"Plot\": \"A paraplegic marine dispatched to the moon Pandora on a unique mission becomes torn between following his orders and protecting the world he feels is his home.\",",
            "                   \"Language\": \"English, Spanish\",",
            "                   \"Country\": \"USA, UK\",",
            "                   \"Awards\": \"Won 3 Oscars. Another 80 wins & 121 nominations.\",",
            "                   \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMTYwOTEwNjAzMl5BMl5BanBnXkFtZTcwODc5MTUwMw@@._V1_SX300.jpg\",",
            "                   \"Metascore\": \"83\",",
            "                   \"imdbRating\": \"7.9\",",
            "                   \"imdbVotes\": \"876,575\",",
            "                   \"imdbID\": \"tt0499549\",",
            "                   \"Type\": \"movie\",",
            "                   \"Response\": \"True\"",
            "                }",
            "];",
            "",
            "// 请在本行以下添加你的代码",
            "",
            "var averageRating;",
            "",
            "// 请在本行以上添加你的代码",
            "",
            "console.log(averageRating); "
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7da9367417b2b2512b69",
      "title": "Sort an Array Alphabetically using the sort Method",
      "description": [
        "The <code>sort</code> method sorts the elements of an array according to the callback function.",
        "For example:",
        "<blockquote>function ascendingOrder(arr) {<br>&nbsp;&nbsp;return arr.sort(function(a, b) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return a - b;<br>&nbsp;&nbsp;});<br>}<br>ascendingOrder([1, 5, 2, 3, 4]);<br>// Returns [1, 2, 3, 4, 5]<br><br>function reverseAlpha(arr) {<br>&nbsp;&nbsp;return arr.sort(function(a, b) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return a < b;<br>&nbsp;&nbsp;});<br>}<br>reverseAlpha(['l', 'h', 'z', 'b', 's']);<br>// Returns ['z', 's', 'l', 'h', 'b']</blockquote>",
        "Note: It's encouraged to provide a callback function to specify how to sort the array items. JavaScript's default sorting method is by string Unicode point value, which may return unexpected results.",
        "<hr>",
        "Use the <code>sort</code> method in the <code>alphabeticalOrder</code> function to sort the elements of <code>arr</code> in alphabetical order."
      ],
      "tests": [
        {
          "text": "Your code should use the <code>sort</code> method.",
          "testString": "assert(code.match(/\\.sort/g), 'Your code should use the <code>sort</code> method.');"
        },
        {
          "text": "<code>alphabeticalOrder([\"a\", \"d\", \"c\", \"a\", \"z\", \"g\"])</code> should return <code>[\"a\", \"a\", \"c\", \"d\", \"g\", \"z\"]</code>.",
          "testString": "assert(JSON.stringify(alphabeticalOrder([\"a\", \"d\", \"c\", \"a\", \"z\", \"g\"])) === JSON.stringify([\"a\", \"a\", \"c\", \"d\", \"g\", \"z\"]), '<code>alphabeticalOrder([\"a\", \"d\", \"c\", \"a\", \"z\", \"g\"])</code> should return <code>[\"a\", \"a\", \"c\", \"d\", \"g\", \"z\"]</code>.');"
        },
        {
          "text": "<code>alphabeticalOrder([\"x\", \"h\", \"a\", \"m\", \"n\", \"m\"])</code> should return <code>[\"a\", \"h\", \"m\", \"m\", \"n\", \"x\"]</code>.",
          "testString": "assert(JSON.stringify(alphabeticalOrder([\"x\", \"h\", \"a\", \"m\", \"n\", \"m\"])) === JSON.stringify([\"a\", \"h\", \"m\", \"m\", \"n\", \"x\"]), '<code>alphabeticalOrder([\"x\", \"h\", \"a\", \"m\", \"n\", \"m\"])</code> should return <code>[\"a\", \"h\", \"m\", \"m\", \"n\", \"x\"]</code>.');"
        },
        {
          "text": "<code>alphabeticalOrder([\"a\", \"a\", \"a\", \"a\", \"x\", \"t\"])</code> should return <code>[\"a\", \"a\", \"a\", \"a\", \"t\", \"x\"]</code>.",
          "testString": "assert(JSON.stringify(alphabeticalOrder([\"a\", \"a\", \"a\", \"a\", \"x\", \"t\"])) === JSON.stringify([\"a\", \"a\", \"a\", \"a\", \"t\", \"x\"]), '<code>alphabeticalOrder([\"a\", \"a\", \"a\", \"a\", \"x\", \"t\"])</code> should return <code>[\"a\", \"a\", \"a\", \"a\", \"t\", \"x\"]</code>.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function alphabeticalOrder(arr) {",
            "  // 请在本行以下添加你的代码",
            "  ",
            "  ",
            "  // 请在本行以上添加你的代码",
            "}",
            "alphabeticalOrder([\"a\", \"d\", \"c\", \"a\", \"z\", \"g\"]);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7da9367417b2b2512b6a",
      "title": "Return a Sorted Array Without Changing the Original Array",
      "description": [
        "A side effect of the <code>sort</code> method is that it changes the order of the elements in the original array. In other words, it mutates the array in place. One way to avoid this is to first concatenate an empty array to the one being sorted (remember that <code>concat</code> returns a new array), then run the <code>sort</code> method.",
        "<hr>",
        "Use the <code>sort</code> method in the <code>nonMutatingSort</code> function to sort the elements of an array in ascending order. The function should return a new array, and not mutate the <code>globalArray</code> variable."
      ],
      "tests": [
        {
          "text": "Your code should use the <code>sort</code> method.",
          "testString": "assert(code.match(/\\.sort/g), 'Your code should use the <code>sort</code> method.');"
        },
        {
          "text": "Your code should use the <code>concat</code> method.",
          "testString": "assert(code.match(/\\.concat/g), 'Your code should use the <code>concat</code> method.');"
        },
        {
          "text": "The <code>globalArray</code> variable should not change.",
          "testString": "assert(JSON.stringify(globalArray) === JSON.stringify([5, 6, 3, 2, 9]), 'The <code>globalArray</code> variable should not change.');"
        },
        {
          "text": "<code>nonMutatingSort(globalArray)</code> should return <code>[2, 3, 5, 6, 9]</code>.",
          "testString": "assert(JSON.stringify(nonMutatingSort(globalArray)) === JSON.stringify([2, 3, 5, 6, 9]), '<code>nonMutatingSort(globalArray)</code> should return <code>[2, 3, 5, 6, 9]</code>.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "var globalArray = [5, 6, 3, 2, 9];",
            "function nonMutatingSort(arr) {",
            "  // 请在本行以下添加你的代码",
            "  ",
            "  ",
            "  // 请在本行以上添加你的代码",
            "}",
            "nonMutatingSort(globalArray);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7daa367417b2b2512b6b",
      "title": "Split a String into an Array Using the split Method",
      "description": [
        "The <code>split</code> method splits a string into an array of strings. It takes an argument for the delimiter, which can be a character to use to break up the string or a regular expression. For example, if the delimiter is a space, you get an array of words, and if the delimiter is an empty string, you get an array of each character in the string.",
        "Here are two examples that split one string by spaces, then another by digits using a regular expression:",
        "<blockquote>var str = \"Hello World\";<br>var bySpace = str.split(\" \");<br>// Sets bySpace to [\"Hello\", \"World\"]<br><br>var otherString = \"How9are7you2today\";<br>var byDigits = str.split(/\\d/);<br>// Sets byDigits to [\"How\", \"are\", \"you\", \"today\"]</blockquote>",
        "Since strings are immutable, the <code>split</code> method makes it easier to work with them.",
        "<hr>",
        "Use the <code>split</code> method inside the <code>splitify</code> function to split <code>str</code> into an array of words. The function should return the array. Note that the words are not always separated by spaces, and the array should not contain punctuation."
      ],
      "tests": [
        {
          "text": "Your code should use the <code>split</code> method.",
          "testString": "assert(code.match(/\\.split/g), 'Your code should use the <code>split</code> method.');"
        },
        {
          "text": "<code>splitify(\"Hello World,I-am code\")</code> should return <code>[\"Hello\", \"World\", \"I\", \"am\", \"code\"]</code>.",
          "testString": "assert(JSON.stringify(splitify(\"Hello World,I-am code\")) === JSON.stringify([\"Hello\", \"World\", \"I\", \"am\", \"code\"]), '<code>splitify(\"Hello World,I-am code\")</code> should return <code>[\"Hello\", \"World\", \"I\", \"am\", \"code\"]</code>.');"
        },
        {
          "text": "<code>splitify(\"Earth-is-our home\")</code> should return <code>[\"Earth\", \"is\", \"our\", \"home\"]</code>.",
          "testString": "assert(JSON.stringify(splitify(\"Earth-is-our home\")) === JSON.stringify([\"Earth\", \"is\", \"our\", \"home\"]), '<code>splitify(\"Earth-is-our home\")</code> should return <code>[\"Earth\", \"is\", \"our\", \"home\"]</code>.');"
        },
        {
          "text": "<code>splitify(\"This.is.a-sentence\")</code> should return <code>[\"This\", \"is\", \"a\", \"sentence\"]</code>.",
          "testString": "assert(JSON.stringify(splitify(\"This.is.a-sentence\")) === JSON.stringify([\"This\", \"is\", \"a\", \"sentence\"]), '<code>splitify(\"This.is.a-sentence\")</code> should return <code>[\"This\", \"is\", \"a\", \"sentence\"]</code>.');"
        }
      ],
      "solutions": [],
      "hints": [
        "The regex pre-defined character class for non-alphanumerics is \\W."
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function splitify(str) {",
            "  // 请在本行以下添加你的代码",
            "  ",
            "  ",
            "  // 请在本行以上添加你的代码",
            "}",
            "splitify(\"Hello World,I-am code\");"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7daa367417b2b2512b6c",
      "title": "Combine an Array into a String Using the join Method",
      "description": [
        "The <code>join</code> method is used to join the elements of an array together to create a string. It takes an argument for the delimiter that is used to separate the array elements in the string.",
        "Here's an example:",
        "<blockquote>var arr = [\"Hello\", \"World\"];<br>var str = arr.join(\" \");<br>// Sets str to \"Hello World\"</blockquote>",
        "<hr>",
        "Use the <code>join</code> method (among others) inside the <code>sentensify</code> function to make a sentence from the words in the string <code>str</code>. The function should return a string. For example, \"I-like-Star-Wars\" would be converted to \"I like Star Wars\". For this challenge, do not use the <code>replace</code> method."
      ],
      "tests": [
        {
          "text": "Your code should use the <code>join</code> method.",
          "testString": "assert(code.match(/\\.join/g), 'Your code should use the <code>join</code> method.');"
        },
        {
          "text": "Your code should not use the <code>replace</code> method.",
          "testString": "assert(!code.match(/\\.replace/g), 'Your code should not use the <code>replace</code> method.');"
        },
        {
          "text": "<code>sentensify(\"May-the-force-be-with-you\")</code> should return a string.",
          "testString": "assert(typeof sentensify(\"May-the-force-be-with-you\") === \"string\", '<code>sentensify(\"May-the-force-be-with-you\")</code> should return a string.');"
        },
        {
          "text": "<code>sentensify(\"May-the-force-be-with-you\")</code> should return <code>\"May the force be with you\"</code>.",
          "testString": "assert(sentensify(\"May-the-force-be-with-you\") === \"May the force be with you\", '<code>sentensify(\"May-the-force-be-with-you\")</code> should return <code>\"May the force be with you\"</code>.');"
        },
        {
          "text": "<code>sentensify(\"The.force.is.strong.with.this.one\")</code> should return <code>\"The force is strong with this one\"</code>.",
          "testString": "assert(sentensify(\"The.force.is.strong.with.this.one\") === \"The force is strong with this one\", '<code>sentensify(\"The.force.is.strong.with.this.one\")</code> should return <code>\"The force is strong with this one\"</code>.');"
        },
        {
          "text": "<code>sentensify(\"There,has,been,an,awakening\")</code> should return <code>\"There has been an awakening\"</code>.",
          "testString": "assert(sentensify(\"There,has,been,an,awakening\") === \"There has been an awakening\", '<code>sentensify(\"There,has,been,an,awakening\")</code> should return <code>\"There has been an awakening\"</code>.');"
        }
      ],
      "solutions": [],
      "hints": [
        "First try to split the given string before applying the join method."
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function sentensify(str) {",
            "  // 请在本行以下添加你的代码",
            "  ",
            "  ",
            "  // 请在本行以上添加你的代码",
            "}",
            "sentensify(\"May-the-force-be-with-you\");"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7dab367417b2b2512b6d",
      "title": "Apply Functional Programming to Convert Strings to URL Slugs",
      "description": [
        "The last several challenges covered a number of useful array and string methods that follow functional programming principles. We've also learned about <code>reduce</code>, which is a powerful method used to reduce problems to simpler forms. From computing averages to sorting, any array operation can be achieved by applying it. Recall that <code>map</code> and <code>filter</code> are special cases of <code>reduce</code>.",
        "Let's combine what we've learned to solve a practical problem.",
        "Many content management sites (CMS) have the titles of a post added to part of the URL for simple bookmarking purposes. For example, if you write a Medium post titled \"Stop Using Reduce\", it's likely the URL would have some form of the title string in it (\".../stop-using-reduce\"). You may have already noticed this on the freeCodeCamp site.",
        "<hr>",
        "Fill in the <code>urlSlug</code> function so it converts a string <code>title</code> and returns the hyphenated version for the URL. You can use any of the methods covered in this section, and don't use <code>replace</code>. Here are the requirements:",
        "The input is a string with spaces and title-cased words",
        "The output is a string with the spaces between words replaced by a hyphen (<code>-</code>)",
        "The output should be all lower-cased letters",
        "The output should not have any spaces"
      ],
      "tests": [
        {
          "text": "The <code>globalTitle</code> variable should not change.",
          "testString": "assert(globalTitle === \"Winter Is Coming\", 'The <code>globalTitle</code> variable should not change.');"
        },
        {
          "text": "Your code should not use the <code>replace</code> method for this challenge.",
          "testString": "assert(!code.match(/\\.replace/g), 'Your code should not use the <code>replace</code> method for this challenge.');"
        },
        {
          "text": "<code>urlSlug(\"Winter Is Coming\")</code> should return <code>\"winter-is-coming\"</code>.",
          "testString": "assert(urlSlug(\"Winter Is Coming\") === \"winter-is-coming\", '<code>urlSlug(\"Winter Is Coming\")</code> should return <code>\"winter-is-coming\"</code>.');"
        },
        {
          "text": "<code>urlSlug(\" Winter Is  &nbsp;Coming\")</code> should return <code>\"winter-is-coming\"</code>.",
          "testString": "assert(urlSlug(\" Winter Is  Coming\") === \"winter-is-coming\", '<code>urlSlug(\" Winter Is  &nbsp;Coming\")</code> should return <code>\"winter-is-coming\"</code>.');"
        },
        {
          "text": "<code>urlSlug(\"A Mind Needs Books Like A Sword Needs A Whetstone\")</code> should return <code>\"a-mind-needs-books-like-a-sword-needs-a-whetstone\"</code>.",
          "testString": "assert(urlSlug(\"A Mind Needs Books Like A Sword Needs A Whetstone\") === \"a-mind-needs-books-like-a-sword-needs-a-whetstone\", '<code>urlSlug(\"A Mind Needs Books Like A Sword Needs A Whetstone\")</code> should return <code>\"a-mind-needs-books-like-a-sword-needs-a-whetstone\"</code>.');"
        },
        {
          "text": "<code>urlSlug(\"Hold The Door\")</code> should return <code>\"hold-the-door\"</code>.",
          "testString": "assert(urlSlug(\"Hold The Door\") === \"hold-the-door\", '<code>urlSlug(\"Hold The Door\")</code> should return <code>\"hold-the-door\"</code>.');"
        }
      ],
      "solutions": [],
      "hints": [
        "When several spaces in a row are split by space, it puts an empty string in the array.",
        "You can use the .toLowerCase() method to make the title all lower case."
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// the global variable",
            "var globalTitle = \"Winter Is Coming\";",
            "",
            "// 请在本行以下添加你的代码",
            "function urlSlug(title) {",
            "  ",
            "  ",
            "}",
            "// 请在本行以上添加你的代码",
            "",
            "var winterComing = urlSlug(globalTitle); // Should be \"winter-is-coming\""
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7dab367417b2b2512b6e",
      "title": "Use the every Method to Check that Every Element in an Array Meets a Criteria",
      "description": [
        "The <code>every</code> method works with arrays to check if <em>every</em> element passes a particular test. It returns a Boolean value - <code>true</code> if all values meet the criteria, <code>false</code> if not.",
        "For example, the following code would check if every element in the <code>numbers</code> array is less than 10:",
        "<blockquote>var numbers = [1, 5, 8, 0, 10, 11];<br>numbers.every(function(currentValue) {<br>&nbsp;&nbsp;return currentValue < 10;<br>});<br>// Returns false</blockquote>",
        "<hr>",
        "Use the <code>every</code> method inside the <code>checkPositive</code> function to check if every element in <code>arr</code> is positive. The function should return a Boolean value."
      ],
      "tests": [
        {
          "text": "Your code should use the <code>every</code> method.",
          "testString": "assert(code.match(/\\.every/g), 'Your code should use the <code>every</code> method.');"
        },
        {
          "text": "<code>checkPositive([1, 2, 3, -4, 5])</code> should return <code>false</code>.",
          "testString": "assert(!checkPositive([1, 2, 3, -4, 5]), '<code>checkPositive([1, 2, 3, -4, 5])</code> should return <code>false</code>.');"
        },
        {
          "text": "<code>checkPositive([1, 2, 3, 4, 5])</code> should return <code>true</code>.",
          "testString": "assert(checkPositive([1, 2, 3, 4, 5]), '<code>checkPositive([1, 2, 3, 4, 5])</code> should return <code>true</code>.');"
        },
        {
          "text": "<code>checkPositive([1, -2, 3, -4, 5])</code> should return <code>false</code>.",
          "testString": "assert(!checkPositive([1, -2, 3, -4, 5]), '<code>checkPositive([1, -2, 3, -4, 5])</code> should return <code>false</code>.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function checkPositive(arr) {",
            "  // 请在本行以下添加你的代码",
            "  ",
            "  ",
            "  // 请在本行以上添加你的代码",
            "}",
            "checkPositive([1, 2, 3, -4, 5]);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7dab367417b2b2512b6f",
      "title": "Use the some Method to Check that Any Elements in an Array Meet a Criteria",
      "description": [
        "The <code>some</code> method works with arrays to check if <em>any</em> element passes a particular test. It returns a Boolean value - <code>true</code> if any of the values meet the criteria, <code>false</code> if not.",
        "For example, the following code would check if any element in the <code>numbers</code> array is less than 10:",
        "<blockquote>var numbers = [10, 50, 8, 220, 110, 11];<br>numbers.some(function(currentValue) {<br>&nbsp;&nbsp;return currentValue < 10;<br>});<br>// Returns true</blockquote>",
        "<hr>",
        "Use the <code>some</code> method inside the <code>checkPositive</code> function to check if any element in <code>arr</code> is positive. The function should return a Boolean value."
      ],
      "tests": [
        {
          "text": "Your code should use the <code>some</code> method.",
          "testString": "assert(code.match(/\\.some/g), 'Your code should use the <code>some</code> method.');"
        },
        {
          "text": "<code>checkPositive([1, 2, 3, -4, 5])</code> should return <code>true</code>.",
          "testString": "assert(checkPositive([1, 2, 3, -4, 5]), '<code>checkPositive([1, 2, 3, -4, 5])</code> should return <code>true</code>.');"
        },
        {
          "text": "<code>checkPositive([1, 2, 3, 4, 5])</code> should return <code>true</code>.",
          "testString": "assert(checkPositive([1, 2, 3, 4, 5]), '<code>checkPositive([1, 2, 3, 4, 5])</code> should return <code>true</code>.');"
        },
        {
          "text": "<code>checkPositive([-1, -2, -3, -4, -5])</code> should return <code>false</code>.",
          "testString": "assert(!checkPositive([-1, -2, -3, -4, -5]), '<code>checkPositive([-1, -2, -3, -4, -5])</code> should return <code>false</code>.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function checkPositive(arr) {",
            "  // 请在本行以下添加你的代码",
            "  ",
            "  ",
            "  // 请在本行以上添加你的代码",
            "}",
            "checkPositive([1, 2, 3, -4, 5]);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7dab367417b2b2512b70",
      "title": "Introduction to Currying and Partial Application",
      "description": [
        "The <code>arity</code> of a function is the number of arguments it requires. <code>Currying</code> a function means to convert a function of N <code>arity</code> into N functions of <code>arity</code> 1.",
        "In other words, it restructures a function so it takes one argument, then returns another function that takes the next argument, and so on.",
        "Here's an example:",
        "<blockquote>//Un-curried function<br>function unCurried(x, y) {<br>&nbsp;&nbsp;return x + y;<br>}<br><br>//Curried function<br>function curried(x) {<br>&nbsp;&nbsp;return function(y) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return x + y;<br>&nbsp;&nbsp;}<br>}<br>curried(1)(2) // Returns 3</blockquote>",
        "This is useful in your program if you can't supply all the arguments to a function at one time. You can save each function call into a variable, which will hold the returned function reference that takes the next argument when it's available. Here's an example using the <code>curried</code> function in the example above:",
        "<blockquote>// Call a curried function in parts:<br>var funcForY = curried(1);<br>console.log(funcForY(2)); // Prints 3</blockquote>",
        "Similarly, <code>partial application</code> can be described as applying a few arguments to a function at a time and returning another function that is applied to more arguments.",
        "Here's an example:",
        "<blockquote>//Impartial function<br>function impartial(x, y, z) {<br>&nbsp;&nbsp;return x + y + z;<br>}<br>var partialFn = impartial.bind(this, 1, 2);<br>partialFn(10); // Returns 13</blockquote>",
        "<hr>",
        "Fill in the body of the <code>add</code> function so it uses currying to add parameters <code>x</code>, <code>y</code>, and <code>z</code>."
      ],
      "tests": [
        {
          "text": "<code>add(10)(20)(30)</code> should return <code>60</code>.",
          "testString": "assert(add(10)(20)(30) === 60, '<code>add(10)(20)(30)</code> should return <code>60</code>.');"
        },
        {
          "text": "<code>add(1)(2)(3)</code> should return <code>6</code>.",
          "testString": "assert(add(1)(2)(3) === 6, '<code>add(1)(2)(3)</code> should return <code>6</code>.');"
        },
        {
          "text": "<code>add(11)(22)(33)</code> should return <code>66</code>.",
          "testString": "assert(add(11)(22)(33) === 66, '<code>add(11)(22)(33)</code> should return <code>66</code>.');"
        },
        {
          "text": "Your code should include a final statement that returns <code>x + y + z</code>.",
          "testString": "assert(code.match(/[xyz]\\s*?\\+\\s*?[xyz]\\s*?\\+\\s*?[xyz]/g), 'Your code should include a final statement that returns <code>x + y + z</code>.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function add(x) {",
            "  // 请在本行以下添加你的代码",
            "  ",
            "  ",
            "  // 请在本行以上添加你的代码",
            "}",
            "add(10)(20)(30);"
          ],
          "head": [],
          "tail": []
        }
      }
    }
  ]
}