{
  "name": "JavaScript Algorithms and Data Structures Projects",
  "order": 10,
  "time": "50 hours",
  "helpRoom": "HelpJavaScript",
  "challenges": [
    {
      "id": "aaa48de84e1ecc7c742e1124",
      "title": "Palindrome Checker",
      "description": [
        "如果给定的一个字符串是回文，那么返回 true，否则返回 false。",
        "<dfn>回文</dfn> 指在忽略标点符号、大小写和空格的前提下，将一个词语或句子按相反的顺序重新排列后，所得到的结果和原来的一样。",
        "<strong>注意：</strong><br>检查回文时，你需要先除去 <strong>所有非字母数字的字符</strong> （标点、空格和符号）并且将所有字符转换成字母大写或字母小写。",
        "我们将会传入不同格式的字符串，例如：<code>\"racecar\"</code>、<code>\"RaceCar\"</code>、<code>\"race CAR\"</code> 等等。",
        "我们也会传入一些包含特殊符号的字符串，例如 <code>\"2A3*3a2\"</code>，<code>\"2A3  3a2\"</code> 和 <code>\"2_A3*3#A2\"</code>。",
        "如果你遇到了问题，请点击<a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>帮助</a>。"
      ],
      "tests": [
        {
          "text": "<code>palindrome(\"eye\")</code> 应该返回一个布尔值。",
          "testString": "assert(typeof palindrome(\"eye\") === \"boolean\", '<code>palindrome(\"eye\")</code> 应该返回一个布尔值。');"
        },
        {
          "text": "<code>palindrome(\"eye\")</code> 应该返回 true。",
          "testString": "assert(palindrome(\"eye\") === true, '<code>palindrome(\"eye\")</code> 应该返回 true。');"
        },
        {
          "text": "<code>palindrome(\"_eye\")</code> 应该返回 true。",
          "testString": "assert(palindrome(\"_eye\") === true, '<code>palindrome(\"_eye\")</code> 应该返回 true。');"
        },
        {
          "text": "<code>palindrome(\"race car\")</code> 应该返回 true。",
          "testString": "assert(palindrome(\"race car\") === true, '<code>palindrome(\"race car\")</code> 应该返回 true。');"
        },
        {
          "text": "<code>palindrome(\"not a palindrome\")</code> 应该返回 false。",
          "testString": "assert(palindrome(\"not a palindrome\") === false, '<code>palindrome(\"not a palindrome\")</code> 应该返回 false。');"
        },
        {
          "text": "<code>palindrome(\"A man, a plan, a canal. Panama\")</code> 应该返回 true。",
          "testString": "assert(palindrome(\"A man, a plan, a canal. Panama\") === true, '<code>palindrome(\"A man, a plan, a canal. Panama\")</code> 应该返回 true。');"
        },
        {
          "text": "<code>palindrome(\"never odd or even\")</code> 应该返回 true。",
          "testString": "assert(palindrome(\"never odd or even\") === true, '<code>palindrome(\"never odd or even\")</code> 应该返回 true。');"
        },
        {
          "text": "<code>palindrome(\"nope\")</code> 应该返回 false。",
          "testString": "assert(palindrome(\"nope\") === false, '<code>palindrome(\"nope\")</code> 应该返回 false。');"
        },
        {
          "text": "<code>palindrome(\"almostomla\")</code> 应该返回 false。",
          "testString": "assert(palindrome(\"almostomla\") === false, '<code>palindrome(\"almostomla\")</code> 应该返回 false。');"
        },
        {
          "text": "<code>palindrome(\"My age is 0, 0 si ega ym.\")</code> 应该返回 true。",
          "testString": "assert(palindrome(\"My age is 0, 0 si ega ym.\") === true, '<code>palindrome(\"My age is 0, 0 si ega ym.\")</code> 应该返回 true。');"
        },
        {
          "text": "<code>palindrome(\"1 eye for of 1 eye.\")</code> 应该返回 false。",
          "testString": "assert(palindrome(\"1 eye for of 1 eye.\") === false, '<code>palindrome(\"1 eye for of 1 eye.\")</code> 应该返回 false。');"
        },
        {
          "text": "<code>palindrome(\"0_0 (: /-\\ :) 0-0\")</code> 应该返回 true。",
          "testString": "assert(palindrome(\"0_0 (: /-\\ :) 0-0\") === true, '<code>palindrome(\"0_0 (: /-\\ :) 0-0\")</code> 应该返回 true。');"
        },
        {
          "text": "<code>palindrome(\"five|\\_/|four\")</code> 应该返回 false。",
          "testString": "assert(palindrome(\"five|\\_/|four\") === false, '<code>palindrome(\"five|\\_/|four\")</code> 应该返回 false。');"
        }
      ],
      "isRequired": true,
      "solutions": [
        "function palindrome(str) {\n  var string = str.toLowerCase().split(/[^A-Za-z0-9]/gi).join('');\n  var aux = string.split('');\n  if (aux.join('') === aux.reverse().join('')){\n    return true;\n  }\n\n  return false;\n}"
      ],
      "MDNlinks": [
        "String.prototype.replace()",
        "String.prototype.toLowerCase()"
      ],
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function palindrome(str) {",
            "  // Good luck!",
            "  return true;",
            "}",
            "",
            "",
            "",
            "palindrome(\"eye\");"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "a7f4d8f2483413a6ce226cac",
      "title": "Roman Numeral Converter",
      "description": [
        "把传入的数字转变为罗马数字。",
        "转换后的<a href=\"http://www.mathsisfun.com/roman-numerals.html\" target=\"_blank\">罗马数字</a>字母必须都是大写。",
        "如果你遇到了问题，请点击<a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>帮助</a>。"
      ],
      "solutions": [
        "function convertToRoman(num) {\n  var ref = [['M', 1000], ['CM', 900], ['D', 500], ['CD', 400], ['C', 100], ['XC', 90], ['L', 50], ['XL', 40], ['X', 10], ['IX', 9], ['V', 5], ['IV', 4], ['I', 1]];\n  var res = [];\n  ref.forEach(function(p) {\n    while (num >= p[1]) {\n      res.push(p[0]);\n      num -= p[1];\n    }\n  });\n  return res.join('');\n}"
      ],
      "tests": [
        {
          "text": "<code>convertToRoman(2)</code> 应该返回 \"II\"。",
          "testString": "assert.deepEqual(convertToRoman(2), \"II\", '<code>convertToRoman(2)</code> 应该返回 \"II\"。');"
        },
        {
          "text": "<code>convertToRoman(3)</code> 应该返回 \"III\"。",
          "testString": "assert.deepEqual(convertToRoman(3), \"III\", '<code>convertToRoman(3)</code> 应该返回 \"III\"。');"
        },
        {
          "text": "<code>convertToRoman(4)</code> 应该返回 \"IV\"。",
          "testString": "assert.deepEqual(convertToRoman(4), \"IV\", '<code>convertToRoman(4)</code> 应该返回 \"IV\"。');"
        },
        {
          "text": "<code>convertToRoman(5)</code> 应该返回 \"V\"。",
          "testString": "assert.deepEqual(convertToRoman(5), \"V\", '<code>convertToRoman(5)</code> 应该返回 \"V\"。');"
        },
        {
          "text": "<code>convertToRoman(9)</code> 应该返回 \"IX\"。",
          "testString": "assert.deepEqual(convertToRoman(9), \"IX\", '<code>convertToRoman(9)</code> 应该返回 \"IX\"。');"
        },
        {
          "text": "<code>convertToRoman(12)</code> 应该返回 \"XII\"。",
          "testString": "assert.deepEqual(convertToRoman(12), \"XII\", '<code>convertToRoman(12)</code> 应该返回 \"XII\"。');"
        },
        {
          "text": "<code>convertToRoman(16)</code> 应该返回 \"XVI\"。",
          "testString": "assert.deepEqual(convertToRoman(16), \"XVI\", '<code>convertToRoman(16)</code> 应该返回 \"XVI\"。');"
        },
        {
          "text": "<code>convertToRoman(29)</code> 应该返回 \"XXIX\"。",
          "testString": "assert.deepEqual(convertToRoman(29), \"XXIX\", '<code>convertToRoman(29)</code> 应该返回 \"XXIX\"。');"
        },
        {
          "text": "<code>convertToRoman(44)</code> 应该返回 \"XLIV\"。",
          "testString": "assert.deepEqual(convertToRoman(44), \"XLIV\", '<code>convertToRoman(44)</code> 应该返回 \"XLIV\"。');"
        },
        {
          "text": "<code>convertToRoman(45)</code> 应该返回 \"XLV\"。",
          "testString": "assert.deepEqual(convertToRoman(45), \"XLV\", '<code>convertToRoman(45)</code> 应该返回 \"XLV\"。');"
        },
        {
          "text": "<code>convertToRoman(68)</code> 应该返回 \"LXVIII\"。",
          "testString": "assert.deepEqual(convertToRoman(68), \"LXVIII\", '<code>convertToRoman(68)</code> 应该返回 \"LXVIII\"。');"
        },
        {
          "text": "<code>convertToRoman(83)</code> 应该返回 \"LXXXIII\"。",
          "testString": "assert.deepEqual(convertToRoman(83), \"LXXXIII\", '<code>convertToRoman(83)</code> 应该返回 \"LXXXIII\"。');"
        },
        {
          "text": "<code>convertToRoman(97)</code> 应该返回 \"XCVII\"。",
          "testString": "assert.deepEqual(convertToRoman(97), \"XCVII\", '<code>convertToRoman(97)</code> 应该返回 \"XCVII\"。');"
        },
        {
          "text": "<code>convertToRoman(99)</code> 应该返回 \"XCIX\"。",
          "testString": "assert.deepEqual(convertToRoman(99), \"XCIX\", '<code>convertToRoman(99)</code> 应该返回 \"XCIX\"。');"
        },
        {
          "text": "<code>convertToRoman(400)</code> 应该返回 \"CD\"。",
          "testString": "assert.deepEqual(convertToRoman(400), \"CD\", '<code>convertToRoman(400)</code> 应该返回 \"CD\"。');"
        },
        {
          "text": "<code>convertToRoman(500)</code> 应该返回 \"D\"。",
          "testString": "assert.deepEqual(convertToRoman(500), \"D\", '<code>convertToRoman(500)</code> 应该返回 \"D\"。');"
        },
        {
          "text": "<code>convertToRoman(501)</code> 应该返回 \"DI\"。",
          "testString": "assert.deepEqual(convertToRoman(501), \"DI\", '<code>convertToRoman(501)</code> 应该返回 \"DI\"。');"
        },
        {
          "text": "<code>convertToRoman(649)</code> 应该返回 \"DCXLIX\"。",
          "testString": "assert.deepEqual(convertToRoman(649), \"DCXLIX\", '<code>convertToRoman(649)</code> 应该返回 \"DCXLIX\"。');"
        },
        {
          "text": "<code>convertToRoman(798)</code> 应该返回 \"DCCXCVIII\"。",
          "testString": "assert.deepEqual(convertToRoman(798), \"DCCXCVIII\", '<code>convertToRoman(798)</code> 应该返回 \"DCCXCVIII\"。');"
        },
        {
          "text": "<code>convertToRoman(891)</code> 应该返回 \"DCCCXCI\"。",
          "testString": "assert.deepEqual(convertToRoman(891), \"DCCCXCI\", '<code>convertToRoman(891)</code> 应该返回 \"DCCCXCI\"。');"
        },
        {
          "text": "<code>convertToRoman(1000)</code> 应该返回 \"M\"。",
          "testString": "assert.deepEqual(convertToRoman(1000), \"M\", '<code>convertToRoman(1000)</code> 应该返回 \"M\"。');"
        },
        {
          "text": "<code>convertToRoman(1004)</code> 应该返回 \"MIV\"。",
          "testString": "assert.deepEqual(convertToRoman(1004), \"MIV\", '<code>convertToRoman(1004)</code> 应该返回 \"MIV\"。');"
        },
        {
          "text": "<code>convertToRoman(1006)</code> 应该返回 \"MVI\"。",
          "testString": "assert.deepEqual(convertToRoman(1006), \"MVI\", '<code>convertToRoman(1006)</code> 应该返回 \"MVI\"。');"
        },
        {
          "text": "<code>convertToRoman(1023)</code> 应该返回 \"MXXIII\"。",
          "testString": "assert.deepEqual(convertToRoman(1023), \"MXXIII\", '<code>convertToRoman(1023)</code> 应该返回 \"MXXIII\"。');"
        },
        {
          "text": "<code>convertToRoman(2014)</code> 应该返回 \"MMXIV\"。",
          "testString": "assert.deepEqual(convertToRoman(2014), \"MMXIV\", '<code>convertToRoman(2014)</code> 应该返回 \"MMXIV\"。');"
        },
        {
          "text": "<code>convertToRoman(3999)</code> 应该返回 \"MMMCMXCIX\"。",
          "testString": "assert.deepEqual(convertToRoman(3999), \"MMMCMXCIX\", '<code>convertToRoman(3999)</code> 应该返回 \"MMMCMXCIX\"。');"
        }
      ],
      "MDNlinks": [
        "Roman Numerals",
        "Array.prototype.splice()",
        "Array.prototype.indexOf()",
        "Array.prototype.join()"
      ],
      "isRequired": true,
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function convertToRoman(num) {",
            " return num;",
            "}",
            "",
            "convertToRoman(36);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244e2",
      "title": "Caesars Cipher",
      "description": [
        "世界上最简单、最著名的<dfn>密码</dfn>是<code>凯撒密码</code>，也叫<code>移位密码</code>。在<code>移位密码</code>中，明文中的字母通过按照一个固定数目进行偏移后被替换成新的字母。",
        "<a href=\"https://en.wikipedia.org/wiki/ROT13\" target='_blank'>ROT13</a> 是一个被广泛使用的编码技术，明文中的所有字母都被移动 13 位。因此，'A' &harr; 'N', 'B' &harr;  'O' 等等。",
        "请编写一个函数，用于解码一个被 <a href=\"https://en.wikipedia.org/wiki/ROT13\" target='_blank'>ROT13</a> 编码的字符串，然后返回解码后的结果。",
        "所有解码后的字母都必须为字母大写。请不要解码非字母的字符（例如，空格、标点符号），但是你需要转递他们到结果中。",
        "如果你遇到了问题，请点击<a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>帮助</a>。"
      ],
      "solutions": [
        "var lookup = {\n  'A': 'N','B': 'O','C': 'P','D': 'Q',\n  'E': 'R','F': 'S','G': 'T','H': 'U',\n  'I': 'V','J': 'W','K': 'X','L': 'Y',\n  'M': 'Z','N': 'A','O': 'B','P': 'C',\n  'Q': 'D','R': 'E','S': 'F','T': 'G',\n  'U': 'H','V': 'I','W': 'J','X': 'K',\n  'Y': 'L','Z': 'M' \n};\n\nfunction rot13(encodedStr) {\n  var codeArr = encodedStr.split(\"\");  // String to Array\n  var decodedArr = []; // Your Result goes here\n  // Only change code below this line\n  \n  decodedArr = codeArr.map(function(letter) {\n    if(lookup.hasOwnProperty(letter)) {\n      letter = lookup[letter];\n    }\n    return letter;\n  });\n\n  // Only change code above this line\n  return decodedArr.join(\"\"); // Array to String\n}"
      ],
      "tests": [
        {
          "text": "<code>rot13(\"SERR PBQR PNZC\")</code> 应解码为 <code>FREE CODE CAMP</code>。",
          "testString": "assert(rot13(\"SERR PBQR PNZC\") === \"FREE CODE CAMP\", '<code>rot13(\"SERR PBQR PNZC\")</code> 应解码为 <code>FREE CODE CAMP</code>。');"
        },
        {
          "text": "<code>rot13(\"SERR CVMMN!\")</code> 应解码为 <code>FREE PIZZA!</code>。",
          "testString": "assert(rot13(\"SERR CVMMN!\") === \"FREE PIZZA!\", '<code>rot13(\"SERR CVMMN!\")</code> 应解码为 <code>FREE PIZZA!</code>。');"
        },
        {
          "text": "<code>rot13(\"SERR YBIR?\")</code> 应解码为 <code>FREE LOVE?</code>。",
          "testString": "assert(rot13(\"SERR YBIR?\") === \"FREE LOVE?\", '<code>rot13(\"SERR YBIR?\")</code> 应解码为 <code>FREE LOVE?</code>。');"
        },
        {
          "text": "<code>rot13(\"GUR DHVPX OEBJA SBK WHZCF BIRE GUR YNML QBT.\")</code> 应解码为 <code>THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.</code>。",
          "testString": "assert(rot13(\"GUR DHVPX OEBJA SBK WHZCF BIRE GUR YNML QBT.\") === \"THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.\", '<code>rot13(\"GUR DHVPX OEBJA SBK WHZCF BIRE GUR YNML QBT.\")</code> 应解码为 <code>THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.</code>。');"
        }
      ],
      "MDNlinks": [
        "String.prototype.charCodeAt()",
        "String.fromCharCode()"
      ],
      "challengeType": 5,
      "isRequired": true,
      "releasedOn": "January 1, 2016",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function rot13(str) { // LBH QVQ VG!",
            "  ",
            "  return str;",
            "}",
            "",
            "// Change the inputs below to test",
            "rot13(\"SERR PBQR PNZC\");"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "aff0395860f5d3034dc0bfc9",
      "title": "Telephone Number Validator",
      "description": [
        "Return <code>true</code> if the passed string looks like a valid US phone number.",
        "The user may fill out the form field any way they choose as long as it has the format of a valid US number. The following are examples of valid formats for US numbers (refer to the tests below for other variants):",
        "<blockquote>555-555-5555<br>(555)555-5555<br>(555) 555-5555<br>555 555 5555<br>5555555555<br>1 555 555 5555</blockquote>",
        "For this challenge you will be presented with a string such as <code>800-692-7753</code> or <code>8oo-six427676;laskdjf</code>. Your job is to validate or reject the US phone number based on any combination of the formats provided above. The area code is required. If the country code is provided, you must confirm that the country code is <code>1</code>. Return <code>true</code> if the string is a valid US phone number; otherwise return <code>false</code>.",
        "Remember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code."
      ],
      "solutions": [
        "var re = /^([+]?1[\\s]?)?((?:[(](?:[2-9]1[02-9]|[2-9][02-8][0-9])[)][\\s]?)|(?:(?:[2-9]1[02-9]|[2-9][02-8][0-9])[\\s.-]?)){1}([2-9]1[02-9]|[2-9][02-9]1|[2-9][02-9]{2}[\\s.-]?){1}([0-9]{4}){1}$/;\n\nfunction telephoneCheck(str) {\n  return re.test(str);\n}\n\ntelephoneCheck(\"555-555-5555\");"
      ],
      "tests": [
        {
          "text": "<code>telephoneCheck(\"555-555-5555\")</code> should return a boolean.",
          "testString": "assert(typeof telephoneCheck(\"555-555-5555\") === \"boolean\", '<code>telephoneCheck(\"555-555-5555\")</code> should return a boolean.');"
        },
        {
          "text": "<code>telephoneCheck(\"1 555-555-5555\")</code> should return true.",
          "testString": "assert(telephoneCheck(\"1 555-555-5555\") === true, '<code>telephoneCheck(\"1 555-555-5555\")</code> should return true.');"
        },
        {
          "text": "<code>telephoneCheck(\"1 (555) 555-5555\")</code> should return true.",
          "testString": "assert(telephoneCheck(\"1 (555) 555-5555\") === true, '<code>telephoneCheck(\"1 (555) 555-5555\")</code> should return true.');"
        },
        {
          "text": "<code>telephoneCheck(\"5555555555\")</code> should return true.",
          "testString": "assert(telephoneCheck(\"5555555555\") === true, '<code>telephoneCheck(\"5555555555\")</code> should return true.');"
        },
        {
          "text": "<code>telephoneCheck(\"555-555-5555\")</code> should return true.",
          "testString": "assert(telephoneCheck(\"555-555-5555\") === true, '<code>telephoneCheck(\"555-555-5555\")</code> should return true.');"
        },
        {
          "text": "<code>telephoneCheck(\"(555)555-5555\")</code> should return true.",
          "testString": "assert(telephoneCheck(\"(555)555-5555\") === true, '<code>telephoneCheck(\"(555)555-5555\")</code> should return true.');"
        },
        {
          "text": "<code>telephoneCheck(\"1(555)555-5555\")</code> should return true.",
          "testString": "assert(telephoneCheck(\"1(555)555-5555\") === true, '<code>telephoneCheck(\"1(555)555-5555\")</code> should return true.');"
        },
        {
          "text": "<code>telephoneCheck(\"555-5555\")</code> should return false.",
          "testString": "assert(telephoneCheck(\"555-5555\") === false, '<code>telephoneCheck(\"555-5555\")</code> should return false.');"
        },
        {
          "text": "<code>telephoneCheck(\"5555555\")</code> should return false.",
          "testString": "assert(telephoneCheck(\"5555555\") === false, '<code>telephoneCheck(\"5555555\")</code> should return false.');"
        },
        {
          "text": "<code>telephoneCheck(\"1 555)555-5555\")</code> should return false.",
          "testString": "assert(telephoneCheck(\"1 555)555-5555\") === false, '<code>telephoneCheck(\"1 555)555-5555\")</code> should return false.');"
        },
        {
          "text": "<code>telephoneCheck(\"1 555 555 5555\")</code> should return true.",
          "testString": "assert(telephoneCheck(\"1 555 555 5555\") === true, '<code>telephoneCheck(\"1 555 555 5555\")</code> should return true.');"
        },
        {
          "text": "<code>telephoneCheck(\"1 456 789 4444\")</code> should return true.",
          "testString": "assert(telephoneCheck(\"1 456 789 4444\") === true, '<code>telephoneCheck(\"1 456 789 4444\")</code> should return true.');"
        },
        {
          "text": "<code>telephoneCheck(\"123**&!!asdf#\")</code> should return false.",
          "testString": "assert(telephoneCheck(\"123**&!!asdf#\") === false, '<code>telephoneCheck(\"123**&!!asdf#\")</code> should return false.');"
        },
        {
          "text": "<code>telephoneCheck(\"55555555\")</code> should return false.",
          "testString": "assert(telephoneCheck(\"55555555\") === false, '<code>telephoneCheck(\"55555555\")</code> should return false.');"
        },
        {
          "text": "<code>telephoneCheck(\"(6054756961)\")</code> should return false",
          "testString": "assert(telephoneCheck(\"(6054756961)\") === false, '<code>telephoneCheck(\"(6054756961)\")</code> should return false');"
        },
        {
          "text": "<code>telephoneCheck(\"2 (757) 622-7382\")</code> should return false.",
          "testString": "assert(telephoneCheck(\"2 (757) 622-7382\") === false, '<code>telephoneCheck(\"2 (757) 622-7382\")</code> should return false.');"
        },
        {
          "text": "<code>telephoneCheck(\"0 (757) 622-7382\")</code> should return false.",
          "testString": "assert(telephoneCheck(\"0 (757) 622-7382\") === false, '<code>telephoneCheck(\"0 (757) 622-7382\")</code> should return false.');"
        },
        {
          "text": "<code>telephoneCheck(\"-1 (757) 622-7382\")</code> should return false",
          "testString": "assert(telephoneCheck(\"-1 (757) 622-7382\") === false, '<code>telephoneCheck(\"-1 (757) 622-7382\")</code> should return false');"
        },
        {
          "text": "<code>telephoneCheck(\"2 757 622-7382\")</code> should return false.",
          "testString": "assert(telephoneCheck(\"2 757 622-7382\") === false, '<code>telephoneCheck(\"2 757 622-7382\")</code> should return false.');"
        },
        {
          "text": "<code>telephoneCheck(\"10 (757) 622-7382\")</code> should return false.",
          "testString": "assert(telephoneCheck(\"10 (757) 622-7382\") === false, '<code>telephoneCheck(\"10 (757) 622-7382\")</code> should return false.');"
        },
        {
          "text": "<code>telephoneCheck(\"27576227382\")</code> should return false.",
          "testString": "assert(telephoneCheck(\"27576227382\") === false, '<code>telephoneCheck(\"27576227382\")</code> should return false.');"
        },
        {
          "text": "<code>telephoneCheck(\"(275)76227382\")</code> should return false.",
          "testString": "assert(telephoneCheck(\"(275)76227382\") === false, '<code>telephoneCheck(\"(275)76227382\")</code> should return false.');"
        },
        {
          "text": "<code>telephoneCheck(\"2(757)6227382\")</code> should return false.",
          "testString": "assert(telephoneCheck(\"2(757)6227382\") === false, '<code>telephoneCheck(\"2(757)6227382\")</code> should return false.');"
        },
        {
          "text": "<code>telephoneCheck(\"2(757)622-7382\")</code> should return false.",
          "testString": "assert(telephoneCheck(\"2(757)622-7382\") === false, '<code>telephoneCheck(\"2(757)622-7382\")</code> should return false.');"
        },
        {
          "text": "<code>telephoneCheck(\"555)-555-5555\")</code> should return false.",
          "testString": "assert(telephoneCheck(\"555)-555-5555\") === false, '<code>telephoneCheck(\"555)-555-5555\")</code> should return false.');"
        },
        {
          "text": "<code>telephoneCheck(\"(555-555-5555\")</code> should return false.",
          "testString": "assert(telephoneCheck(\"(555-555-5555\") === false, '<code>telephoneCheck(\"(555-555-5555\")</code> should return false.');"
        },
        {
          "text": "<code>telephoneCheck(\"(555)5(55?)-5555\")</code> should return false.",
          "testString": "assert(telephoneCheck(\"(555)5(55?)-5555\") === false, '<code>telephoneCheck(\"(555)5(55?)-5555\")</code> should return false.');"
        }
      ],
      "MDNlinks": [
        "RegExp"
      ],
      "challengeType": 5,
      "isRequired": true,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function telephoneCheck(str) {",
            "  // Good luck!",
            "  return true;",
            "}",
            "",
            "telephoneCheck(\"555-555-5555\");"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "aa2e6f85cab2ab736c9a9b24",
      "title": "Cash Register",
      "description": [
        "Design a cash register drawer function <code>checkCashRegister()</code> that accepts purchase price as the first argument (<code>price</code>), payment as the second argument (<code>cash</code>), and cash-in-drawer (<code>cid</code>) as the third argument.",
        "<code>cid</code> is a 2D array listing available currency.",
        "The <code>checkCashRegister()</code> function should always return an object with a <code>status</code> key and a <code>change</code> key.",
        "Return <code>{status: \"INSUFFICIENT_FUNDS\", change: []}</code> if cash-in-drawer is less than the change due, or if you cannot return the exact change.",
        "Return <code>{status: \"CLOSED\", change: [...]}</code> with cash-in-drawer as the value for the key <code>change</code> if it is equal to the change due.",
        "Otherwise, return <code>{status: \"OPEN\", change: [...]}</code>, with the change due in coins and bills, sorted in highest to lowest order, as the value of the <code>change</code> key.",
        "Remember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code.",
        "<table class='table table-striped'><tr><th>Currency Unit</th><th>Amount</th></tr><tr><td>Penny</td><td>$0.01 (PENNY)</td></tr><tr><td>Nickel</td><td>$0.05 (NICKEL)</td></tr><tr><td>Dime</td><td>$0.1 (DIME)</td></tr><tr><td>Quarter</td><td>$0.25 (QUARTER)</td></tr><tr><td>Dollar</td><td>$1 (DOLLAR)</td></tr><tr><td>Five Dollars</td><td>$5 (FIVE)</td></tr><tr><td>Ten Dollars</td><td>$10 (TEN)</td></tr><tr><td>Twenty Dollars</td><td>$20 (TWENTY)</td></tr><tr><td>One-hundred Dollars</td><td>$100 (ONE HUNDRED)</td></tr></table>"
      ],
      "solutions": [
        "var denom = [\n\t{ name: 'ONE HUNDRED', val: 100},\n\t{ name: 'TWENTY', val: 20},\n\t{ name: 'TEN', val: 10},\n\t{ name: 'FIVE', val: 5},\n\t{ name: 'ONE', val: 1},\n\t{ name: 'QUARTER', val: 0.25},\n\t{ name: 'DIME', val: 0.1},\n\t{ name: 'NICKEL', val: 0.05},\n\t{ name: 'PENNY', val: 0.01}\n];\n\nfunction checkCashRegister(price, cash, cid) {\n var output = {status: null, change: []};\n var change = cash - price;\n var register = cid.reduce(function(acc, curr) {\n acc.total += curr[1];\n acc[curr[0]] = curr[1];\n return acc;\n }, {total: 0});\n if(register.total === change) {\n output.status = 'CLOSED';\n output.change = cid;\n return output;\n }\n if(register.total < change) {\n output.status = 'INSUFFICIENT_FUNDS';\n return output;\n }\n var change_arr = denom.reduce(function(acc, curr) {\n var value = 0;\n while(register[curr.name] > 0 && change >= curr.val) {\n change -= curr.val;\n register[curr.name] -= curr.val;\n value += curr.val;\n change = Math.round(change * 100) / 100;\n }\n if(value > 0) {\n acc.push([ curr.name, value ]);\n }\n return acc;\n }, []);\n if(change_arr.length < 1 || change > 0) {\n output.status = 'INSUFFICIENT_FUNDS';\n return output;\n }\n output.status = 'OPEN';\n output.change = change_arr;\n return output;\n}"
      ],
      "tests": [
        {
          "text": "<code>checkCashRegister(19.5, 20, [[\"PENNY\", 1.01], [\"NICKEL\", 2.05], [\"DIME\", 3.1], [\"QUARTER\", 4.25], [\"ONE\", 90], [\"FIVE\", 55], [\"TEN\", 20], [\"TWENTY\", 60], [\"ONE HUNDRED\", 100]])</code> should return an object.",
          "testString": "assert.deepEqual(Object.prototype.toString.call(checkCashRegister(19.5, 20, [[\"PENNY\", 1.01], [\"NICKEL\", 2.05], [\"DIME\", 3.1], [\"QUARTER\", 4.25], [\"ONE\", 90], [\"FIVE\", 55], [\"TEN\", 20], [\"TWENTY\", 60], [\"ONE HUNDRED\", 100]])), '[object Object]', '<code>checkCashRegister(19.5, 20, [[\"PENNY\", 1.01], [\"NICKEL\", 2.05], [\"DIME\", 3.1], [\"QUARTER\", 4.25], [\"ONE\", 90], [\"FIVE\", 55], [\"TEN\", 20], [\"TWENTY\", 60], [\"ONE HUNDRED\", 100]])</code> should return an object.');"
        },
        {
          "text": "<code>checkCashRegister(19.5, 20, [[\"PENNY\", 1.01], [\"NICKEL\", 2.05], [\"DIME\", 3.1], [\"QUARTER\", 4.25], [\"ONE\", 90], [\"FIVE\", 55], [\"TEN\", 20], [\"TWENTY\", 60], [\"ONE HUNDRED\", 100]])</code> should return <code>{status: \"OPEN\", change: [[\"QUARTER\", 0.5]]}</code>.",
          "testString": "assert.deepEqual(checkCashRegister(19.5, 20, [[\"PENNY\", 1.01], [\"NICKEL\", 2.05], [\"DIME\", 3.1], [\"QUARTER\", 4.25], [\"ONE\", 90], [\"FIVE\", 55], [\"TEN\", 20], [\"TWENTY\", 60], [\"ONE HUNDRED\", 100]]), {status: \"OPEN\", change: [[\"QUARTER\", 0.5]]}, '<code>checkCashRegister(19.5, 20, [[\"PENNY\", 1.01], [\"NICKEL\", 2.05], [\"DIME\", 3.1], [\"QUARTER\", 4.25], [\"ONE\", 90], [\"FIVE\", 55], [\"TEN\", 20], [\"TWENTY\", 60], [\"ONE HUNDRED\", 100]])</code> should return <code>{status: \"OPEN\", change: [[\"QUARTER\", 0.5]]}</code>.');"
        },
        {
          "text": "<code>checkCashRegister(3.26, 100, [[\"PENNY\", 1.01], [\"NICKEL\", 2.05], [\"DIME\", 3.1], [\"QUARTER\", 4.25], [\"ONE\", 90], [\"FIVE\", 55], [\"TEN\", 20], [\"TWENTY\", 60], [\"ONE HUNDRED\", 100]])</code> should return <code>{status: \"OPEN\", change: [[\"TWENTY\", 60], [\"TEN\", 20], [\"FIVE\", 15], [\"ONE\", 1], [\"QUARTER\", 0.5], [\"DIME\", 0.2], [\"PENNY\", 0.04]]}</code>.",
          "testString": "assert.deepEqual(checkCashRegister(3.26, 100, [[\"PENNY\", 1.01], [\"NICKEL\", 2.05], [\"DIME\", 3.1], [\"QUARTER\", 4.25], [\"ONE\", 90], [\"FIVE\", 55], [\"TEN\", 20], [\"TWENTY\", 60], [\"ONE HUNDRED\", 100]]), {status: \"OPEN\", change: [[\"TWENTY\", 60], [\"TEN\", 20], [\"FIVE\", 15], [\"ONE\", 1], [\"QUARTER\", 0.5], [\"DIME\", 0.2], [\"PENNY\", 0.04]]}, '<code>checkCashRegister(3.26, 100, [[\"PENNY\", 1.01], [\"NICKEL\", 2.05], [\"DIME\", 3.1], [\"QUARTER\", 4.25], [\"ONE\", 90], [\"FIVE\", 55], [\"TEN\", 20], [\"TWENTY\", 60], [\"ONE HUNDRED\", 100]])</code> should return <code>{status: \"OPEN\", change: [[\"TWENTY\", 60], [\"TEN\", 20], [\"FIVE\", 15], [\"ONE\", 1], [\"QUARTER\", 0.5], [\"DIME\", 0.2], [\"PENNY\", 0.04]]}</code>.');"
        },
        {
          "text": "<code>checkCashRegister(19.5, 20, [[\"PENNY\", 0.01], [\"NICKEL\", 0], [\"DIME\", 0], [\"QUARTER\", 0], [\"ONE\", 0], [\"FIVE\", 0], [\"TEN\", 0], [\"TWENTY\", 0], [\"ONE HUNDRED\", 0]])</code> should return <code>{status: \"INSUFFICIENT_FUNDS\", change: []}</code>.",
          "testString": "assert.deepEqual(checkCashRegister(19.5, 20, [[\"PENNY\", 0.01], [\"NICKEL\", 0], [\"DIME\", 0], [\"QUARTER\", 0], [\"ONE\", 0], [\"FIVE\", 0], [\"TEN\", 0], [\"TWENTY\", 0], [\"ONE HUNDRED\", 0]]), {status: \"INSUFFICIENT_FUNDS\", change: []}, '<code>checkCashRegister(19.5, 20, [[\"PENNY\", 0.01], [\"NICKEL\", 0], [\"DIME\", 0], [\"QUARTER\", 0], [\"ONE\", 0], [\"FIVE\", 0], [\"TEN\", 0], [\"TWENTY\", 0], [\"ONE HUNDRED\", 0]])</code> should return <code>{status: \"INSUFFICIENT_FUNDS\", change: []}</code>.');"
        },
        {
          "text": "<code>checkCashRegister(19.5, 20, [[\"PENNY\", 0.01], [\"NICKEL\", 0], [\"DIME\", 0], [\"QUARTER\", 0], [\"ONE\", 1], [\"FIVE\", 0], [\"TEN\", 0], [\"TWENTY\", 0], [\"ONE HUNDRED\", 0]])</code> should return <code>{status: \"INSUFFICIENT_FUNDS\", change: []}</code>.",
          "testString": "assert.deepEqual(checkCashRegister(19.5, 20, [[\"PENNY\", 0.01], [\"NICKEL\", 0], [\"DIME\", 0], [\"QUARTER\", 0], [\"ONE\", 1], [\"FIVE\", 0], [\"TEN\", 0], [\"TWENTY\", 0], [\"ONE HUNDRED\", 0]]), {status: \"INSUFFICIENT_FUNDS\", change: []}, '<code>checkCashRegister(19.5, 20, [[\"PENNY\", 0.01], [\"NICKEL\", 0], [\"DIME\", 0], [\"QUARTER\", 0], [\"ONE\", 1], [\"FIVE\", 0], [\"TEN\", 0], [\"TWENTY\", 0], [\"ONE HUNDRED\", 0]])</code> should return <code>{status: \"INSUFFICIENT_FUNDS\", change: []}</code>.');"
        },
        {
          "text": "<code>checkCashRegister(19.5, 20, [[\"PENNY\", 0.5], [\"NICKEL\", 0], [\"DIME\", 0], [\"QUARTER\", 0], [\"ONE\", 0], [\"FIVE\", 0], [\"TEN\", 0], [\"TWENTY\", 0], [\"ONE HUNDRED\", 0]])</code> should return <code>{status: \"CLOSED\", change: [[\"PENNY\", 0.5], [\"NICKEL\", 0], [\"DIME\", 0], [\"QUARTER\", 0], [\"ONE\", 0], [\"FIVE\", 0], [\"TEN\", 0], [\"TWENTY\", 0], [\"ONE HUNDRED\", 0]]}</code>.",
          "testString": "assert.deepEqual(checkCashRegister(19.5, 20, [[\"PENNY\", 0.5], [\"NICKEL\", 0], [\"DIME\", 0], [\"QUARTER\", 0], [\"ONE\", 0], [\"FIVE\", 0], [\"TEN\", 0], [\"TWENTY\", 0], [\"ONE HUNDRED\", 0]]), {status: \"CLOSED\", change: [[\"PENNY\", 0.5], [\"NICKEL\", 0], [\"DIME\", 0], [\"QUARTER\", 0], [\"ONE\", 0], [\"FIVE\", 0], [\"TEN\", 0], [\"TWENTY\", 0], [\"ONE HUNDRED\", 0]]}, '<code>checkCashRegister(19.5, 20, [[\"PENNY\", 0.5], [\"NICKEL\", 0], [\"DIME\", 0], [\"QUARTER\", 0], [\"ONE\", 0], [\"FIVE\", 0], [\"TEN\", 0], [\"TWENTY\", 0], [\"ONE HUNDRED\", 0]])</code> should return <code>{status: \"CLOSED\", change: [[\"PENNY\", 0.5], [\"NICKEL\", 0], [\"DIME\", 0], [\"QUARTER\", 0], [\"ONE\", 0], [\"FIVE\", 0], [\"TEN\", 0], [\"TWENTY\", 0], [\"ONE HUNDRED\", 0]]}</code>.');"
        }
      ],
      "isRequired": true,
      "MDNlinks": [
        "Global Object",
        "Floating Point Guide"
      ],
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function checkCashRegister(price, cash, cid) {",
            "  var change;",
            "  // Here is your change, ma'am.",
            "  return change;",
            "}",
            "",
            "// Example cash-in-drawer array:",
            "// [[\"PENNY\", 1.01],",
            "// [\"NICKEL\", 2.05],",
            "// [\"DIME\", 3.1],",
            "// [\"QUARTER\", 4.25],",
            "// [\"ONE\", 90],",
            "// [\"FIVE\", 55],",
            "// [\"TEN\", 20],",
            "// [\"TWENTY\", 60],",
            "// [\"ONE HUNDRED\", 100]]",
            "",
            "checkCashRegister(19.5, 20, [[\"PENNY\", 1.01], [\"NICKEL\", 2.05], [\"DIME\", 3.1], [\"QUARTER\", 4.25], [\"ONE\", 90], [\"FIVE\", 55], [\"TEN\", 20], [\"TWENTY\", 60], [\"ONE HUNDRED\", 100]]);"
          ],
          "head": [],
          "tail": []
        }
      }
    }
  ]
}