{
  "name": "Basic JavaScript",
  "time": "10 hours",
  "order": 1,
  "helpRoom": "HelpJavaScript",
  "challenges": [
    {
      "id": "bd7123c9c441eddfaeb4bdef",
      "title": "Comment Your JavaScript Code",
      "description": [
        "被注释的代码块在 JavaScript 之中是不会执行的。注释是一个非常好的方式让你自己以及其他人明白这段代码是怎么执行的。",
        "JavaScript 中的注释方式有以下两种：",
        "使用<code>//</code>来告诉 JavaScript 来忽略当前行的代码",
        "<blockquote>// 这是一条单行注释。</blockquote>",
        "你也可以使用多行注释来注释你的代码，以<code>/*</code>开始，用<code>*/</code>来结束，就像下面这样：",
        "<blockquote>/* 这是一个<br>多行注释 */</blockquote>",
        "<strong>最佳实践</strong><br>给你写的代码添加注释，让你的代码看起来更加清晰易懂。良好的注释能够清晰地传达你写代码的意图——无论是别人看你的代码还是以后你自己再看的时候。",
        "<hr>",
        "尝试创建这两种类型的注释。"
      ],
      "solutions": [
        "// Fake Comment\n/* Another Comment */"
      ],
      "tests": [
        {
          "text": "创建一个<code>//</code>样式的注释, 被注释的文本至少要包含 5 个字符。",
          "testString": "assert(code.match(/(\\/\\/)...../g), '创建一个<code>//</code>样式的注释, 被注释的文本至少要包含 5 个字符。');"
        },
        {
          "text": "创建一个<code>/* */</code>样式的注释, 被注释的文本至少要包含 5 个字符。",
          "testString": "assert(code.match(/(\\/\\*)([^\\/]{5,})(?=\\*\\/)/gm), '创建一个<code>/* */</code>样式的注释, 被注释的文本至少要包含 5 个字符。');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "bd7123c9c443eddfaeb5bdef",
      "title": "Declare JavaScript Variables",
      "description": [
        "在计算机科学中,<code>data</code>(数据)就是一切，它对于计算机意义重大。JavaScript 提供七种不同的<dfn>data types</dfn>(数据类型)，它们是<code>undefined</code>（未定义）， <code>null</code>（空），<code>boolean</code>（布尔型），<code>string</code>（字符串），<code>symbol</code>(符号)，<code>number</code>（数字），和<code>object</code>（对象）。",
        "例如，计算机区分数字（例如数字<code>12</code>）和字符集合的字符串<code>strings</code>（例如<code>\"12\"</code>，<code>\"dog\"</code>或<code>\"123 cats\"</code>）。计算机可以对数字执行数学运算，但不能对字符串执行数学运算。",
        "<code>Variables</code>（变量）允许计算机以一种动态的形式来存储和操作数据，通过操作指向数据的指针而不是数据本身来避免了内存泄露，以上的七种数据类型都可以存储到一个变量（variable）中。",
        "<code>Variables</code> 非常类似于你在数学中使用的 x，y 变量，都是以一个简单命名的名称来代替我们赋值给它的数据。计算机中的<code>variables</code>（变量）与数学中的变量不同的是，计算机可以在不同的时间存储不同类型的变量。",
        "通过在变量的前面使用关键字<code>var</code>，声明一个变量，例如：",
        "<blockquote>var ourName;</blockquote>",
        "上面代码的意思是创建一个名为<code>ourName</code>的<code>variable</code>（变量），在 JavaScript 中我们以分号结束语句。",
        "<code>Variable</code>（变量）名称可以由数字、字母、<code>$</code> 或者 <code>_</code>组成，但是不能包含空格或者以数字为开头。",
        "<hr>",
        "使用<code>var</code> 关键字来创建一个名为<code>myName</code>的变量。",
        "<strong>提示</strong><br>如果遇到困难了，请看下<code>ourName</code>的例子是怎么写的。"
      ],
      "solutions": [
        "var myName;"
      ],
      "tests": [
        {
          "text": "你需要使用<code>var</code>关键字定义一个变量<code>myName</code>，并使用分号结尾。",
          "testString": "assert(/var\\s+myName\\s*;/.test(code), '你需要使用<code>var</code>关键字定义一个变量<code>myName</code>。并使用分号结尾。');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// 举例",
            "var ourName;",
            "",
            "// 请在这条注释以下定义 myName 变量",
            ""
          ],
          "head": [],
          "tail": [
            "if(typeof myName !== \"undefined\"){(function(v){return v;})(myName);}"
          ]
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244a8",
      "title": "Storing Values with the Assignment Operator",
      "description": [
        "在 JavaScript 中，你可以使用赋值运算符将值存储在变量中。",
        "<code>myVariable = 5;</code>",
        "这条语句把<code>Number</code>值<code>5</code>赋给变量<code>myVariable</code>。",
        "赋值过程是从右到左进行的。在将值分配给运算符左侧的变量之前，将解析<code>=</code>运算符右侧的所有内容。",
        "<blockquote>myVar = 5;<br>myNum = myVar;</blockquote>",
        "数值<code>5</code>被赋给变量<code>myVar</code>中，然后再次将变量<code>myVar</code>解析为 5 并将其赋给<code>myNum</code>变量。",
        "<hr>",
        "把数值<code>7</code>赋给变量 <code>a</code>。",
        "把变量<code>a</code>中的内容赋给变量<code>b</code>。"
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "var a;\nvar b = 2;\na = 7;\nb = a;"
      ],
      "tests": [
        {
          "text": "不要修改注释上方的代码",
          "testString": "assert(/var a;/.test(code) && /var b = 2;/.test(code), '不要修改注释上方的代码');"
        },
        {
          "text": "<code>a</code>的值应该是 7",
          "testString": "assert(typeof a === 'number' && a === 7, '<code>a</code>的值应该是 7');"
        },
        {
          "text": "<code>b</code>的值应该是 7",
          "testString": "assert(typeof b === 'number' && b === 7, '<code>b</code>的值应该是 7');"
        },
        {
          "text": "你需要用<code>=</code>把<code>a</code>的值赋给<code>b</code>",
          "testString": "assert(/b\\s*=\\s*a\\s*;/g.test(code), '你需要用<code>=</code>把<code>a</code>的值赋给<code>b</code>');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// 举例",
            "var a;",
            "var b = 2;",
            "",
            "// 请把你的代码写在这条注释以下",
            ""
          ],
          "head": [
            "if (typeof a != 'undefined') {",
            "  a = undefined;",
            "}",
            "if (typeof b != 'undefined') {",
            "  b = undefined;",
            "}"
          ],
          "tail": [
            "(function(a,b){return \"a = \" + a + \", b = \" + b;})(a,b);"
          ]
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244a9",
      "title": "Initializing Variables with the Assignment Operator",
      "description": [
        "通常地我们会在<dfn>initialize</dfn>开始声明变量的时候就会给变量赋一个初始值。",
        "<code>var myVar = 0;</code>",
        "创建一个名为<code>myVar</code>的变量并指定一个初始值<code>0</code>。",
        "<hr>",
        "通过关键字<code>var</code>定义一个变量<code>a</code>并且给它一个初始值<code>9</code>。"
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "var a = 9;"
      ],
      "tests": [
        {
          "text": "你需要初始化<code>a</code>的值为<code>9</code>",
          "testString": "assert(/var\\s+a\\s*=\\s*9\\s*/.test(code), '你需要初始化<code>a</code>的值为<code>9</code>');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// 举例",
            "var ourVar = 19;",
            "",
            "// 请把你的代码写在这条注释以下", 
            ""
          ],
          "head": [],
          "tail": [
            "if(typeof a !== 'undefined') {(function(a){return \"a = \" + a;})(a);} else { (function() {return 'a is undefined';})(); }"
          ]
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244aa",
      "title": "Understanding Uninitialized Variables",
      "description": [
        "当 JavaScript 中的变量被声明的时候，程序内部会给它一个初始值<code>undefined</code>。当你对一个值为<code>undefined</code>的变量进行运算操作的时候，算出来的结果将会是<code>NaN</code>，<code>NaN</code>的意思是<dfn>\"Not a Number\"</dfn>。当你用一个值是<code>undefined</code>的变量来做字符串拼接操作的时候，它会输出字符串<code>\"undefined\"</code>。",
        "<hr>",
        "定义 3 个变量<code>a</code>、<code>b</code>、<code>c</code>，并且分别给他们赋值：<code>5</code>、<code>10</code>、<code>\"I am a\"</code>，这样它们值就不会是<code>undefined</code>了。"
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "var a = 5;\nvar b = 10;\nvar c = \"I am a\";\na = a + 1;\nb = b + 5;\nc = c + \" String!\";"
      ],
      "tests": [
        {
          "text": "<code>a</code>应该被定义，并且值为<code>6</code>",
          "testString": "assert(typeof a === 'number' && a === 6, '<code>a</code>应该被定义，并且值为<code>6</code>');"
        },
        {
          "text": "<code>a</code>应该被定义，并且值为<code>15</code>",
          "testString": "assert(typeof b === 'number' && b === 15, '<code>a</code>应该被定义，并且值为<code>15</code>');"
        },
        {
          "text": "<code>c</code>的值不能包含<code>undefined</code>，应该为 \"I am a String!\"",
          "testString": "assert(!/undefined/.test(c) && c === \"I am a String!\", '<code>c</code>的值不能包含<code>undefined</code>，应该为 \"I am a String!\"');"
        },
        {
          "text": "不要修改第二条注释下的代码",
          "testString": "assert(/a = a \\+ 1;/.test(code) && /b = b \\+ 5;/.test(code) && /c = c \\+ \" String!\";/.test(code), '不要修改第二条注释下的代码');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// 初始化变量",
            "var a;",
            "var b;",
            "var c;",
            "",
            "// 请只修改这条注释以上的代码",
            "",
            "a = a + 1;",
            "b = b + 5;",
            "c = c + \" String!\";",
            ""
          ],
          "head": [],
          "tail": [
            "(function(a,b,c){ return \"a = \" + a + \", b = \" + b + \", c = '\" + c + \"'\"; })(a,b,c);"
          ]
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244ab",
      "title": "Understanding Case Sensitivity in Variables",
      "description": [
        "在 JavaScript 中所有的变量和函数名都是大小写敏感的。要区别对待大写字母和小写字母。",
        "<code>MYVAR</code>与<code>MyVar</code>和<code>myvar</code>是截然不同的变量。这就有可能导致多个截然不同的变量却有着有相似的名字。正是由于以上原因所以强烈地建议你，<em>不要</em>使用这一特性。（以免给自己带来麻烦）",
        "<h4>最佳实践</h4>",
        "使用<dfn>驼峰命名法</dfn>来书写一个 Javascript 变量，在<dfn>驼峰命名法</dfn>中，变量名的第一个单词的首写字母小写，后面的单词的第一个字母大写。",
        "<strong>示例：</strong>",
        "<blockquote>var someVariable;<br>var anotherVariableName;<br>var thisVariableNameIsTooLong;</blockquote>",
        "<hr>",
        "修改已声明的变量，让它们的命名符合<dfn>驼峰命名法</dfn>的规范。"
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "var studlyCapVar;\nvar properCamelCase;\nvar titleCaseOver;\n\nstudlyCapVar = 10;\nproperCamelCase = \"A String\";\ntitleCaseOver = 9000;"
      ],
      "tests": [
        {
          "text": "<code>studlyCapVar</code>应该被定义并且值为<code>10</code>",
          "testString": "assert(typeof studlyCapVar !== 'undefined' && studlyCapVar === 10, '<code>studlyCapVar</code>应该被定义并且值为<code>10</code>');"
        },
        {
          "text": "<code>properCamelCase</code>应该被定义并且值为<code>\"A String\"</code>",
          "testString": "assert(typeof properCamelCase !== 'undefined' && properCamelCase === \"A String\", '<code>properCamelCase</code>应该被定义并且值为<code>\"A String\"</code>');"
        },
        {
          "text": "<code>titleCaseOver</code>应该被定义并且值为<code>9000</code>",
          "testString": "assert(typeof titleCaseOver !== 'undefined' && titleCaseOver === 9000, '<code>titleCaseOver</code>应该被定义并且值为<code>9000</code>');"
        },
        {
          "text": "<code>studlyCapVar</code>在声明和赋值时都应该使用驼峰命名法。",
          "testString": "assert(code.match(/studlyCapVar/g).length === 2, '<code>studlyCapVar</code>在声明和赋值时都应该使用驼峰命名法。');"
        },
        {
          "text": "<code>properCamelCase</code> 在声明和赋值时都应该使用驼峰命名法。",
          "testString": "assert(code.match(/properCamelCase/g).length === 2, '<code>properCamelCase</code>在声明和赋值时都应该使用驼峰命名法。');"
        },
        {
          "text": "<code>titleCaseOver</code> 在声明和赋值时都应该使用驼峰命名法。",
          "testString": "assert(code.match(/titleCaseOver/g).length === 2, '<code>titleCaseOver</code>在声明和赋值时都应该使用驼峰命名法。');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// 初始化变量",
            "var StUdLyCapVaR;",
            "var properCamelCase;",
            "var TitleCaseOver;",
            "",
            "// 给变量赋值",
            "STUDLYCAPVAR = 10;",
            "PRoperCAmelCAse = \"A String\";",
            "tITLEcASEoVER = 9000;"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "cf1111c1c11feddfaeb3bdef",
      "title": "Add Two Numbers with JavaScript",
      "description": [
        "<code>Number</code>是 JavaScript 中的数据类型，表示数值。",
        "现在让我们来尝试在 JavaScript 中做加法运算。",
        "JavaScript 中使用<code>+</code>号来让两个数字执行加法运算。",
        "<strong>示例</strong>",
        "<blockquote>myVar = 5 + 10; // assigned 15</blockquote>",
        "<hr>",
        "改变数字<code>0</code>让变量 sum 的值为<code>20</code>。"
      ],
      "solutions": [
        "var sum = 10 + 10;"
      ],
      "tests": [
        {
          "text": "<code>sum</code>应该等于<code>20</code>",
          "testString": "assert(sum === 20, '<code>sum</code>应该等于<code>20</code>');"
        },
        {
          "text": "要使用<code>+</code>运算符",
          "testString": "assert(/\\+/.test(code), '要使用<code>+</code>运算符');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "var sum = 10 + 0;",
            ""
          ],
          "head": [],
          "tail": [
            "(function(z){return 'sum = '+z;})(sum);"
          ]
        }
      }
    },
    {
      "id": "cf1111c1c11feddfaeb4bdef",
      "title": "Subtract One Number from Another with JavaScript",
      "description": [
        "我们也可以在 JavaScript 中执行减法运算。",
        "JavaScript 中使用<code>-</code>来做减法运算。",
        "",
        "<strong>示例</strong>",
        "<blockquote>myVar = 12 - 6; // 等于 6</blockquote>",
        "",
        "<hr>",
        "改变数字<code>0</code>让变量 difference 的值为<code>12</code>。"
      ],
      "solutions": [
        "var difference = 45 - 33;"
      ],
      "tests": [
        {
          "text": "要使<code>difference</code>的值等于 12。",
          "testString": "assert(difference === 12, '要使<code>difference</code>的值等于 12。');"
        },
        {
          "text": "只用 45 减去一个数。",
          "testString": "assert(/var\\s*difference\\s*=\\s*45\\s*-\\s*[0-9]*;(?!\\s*[a-zA-Z0-9]+)/.test(code),'只用 45 减去一个数。');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "var difference = 45 - 0;",
            "",
            ""
          ],
          "head": [],
          "tail": [
            "(function(z){return 'difference = '+z;})(difference);"
          ]
        }
      }
    },
    {
      "id": "cf1231c1c11feddfaeb5bdef",
      "title": "Multiply Two Numbers with JavaScript",
      "description": [
        "我们也可在 JavaScript 中使用乘法运算。",
        "JavaScript 使用<code>*</code>符号表示两数相乘。",
        "",
        "<strong>示例</strong>",
        "<blockquote>myVar = 13 * 13; // 把 169 赋值给 myVar</blockquote>",
        "",
        "<hr>",
        "改变数值<code>0</code>来让变量 product 的值等于<code>80</code>。"
      ],
      "solutions": [
        "var product = 8 * 10;"
      ],
      "tests": [
        {
          "text": "要使<code>product</code>的值等于 80",
          "testString": "assert(product === 80,'要使<code>product</code>的值等于 80');"
        },
        {
          "text": "Use the <code>*</code> operator",
          "testString": "assert(/\\*/.test(code), '使用<code>*</code>运算符');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "var product = 8 * 0;",
            "",
            ""
          ],
          "head": [],
          "tail": [
            "(function(z){return 'product = '+z;})(product);"
          ]
        }
      }
    },
    {
      "id": "cf1111c1c11feddfaeb6bdef",
      "title": "Divide One Number by Another with JavaScript",
      "description": [
        "我们可以在 JavaScript 中做除法运算。",
        "JavaScript 中使用<code>/</code>符号做除法运算。",
        "",
        "<strong>示例</strong>",
        "<blockquote>myVar = 16 / 2; // 把 8 赋值给 myVar</blockquote>",
        "",
        "<hr>",
        "改变数值<code>0</code>来让变量<code>quotient</code>的值等于<code>2</code>。"
      ],
      "solutions": [
        "var quotient = 66 / 33;"
      ],
      "tests": [
        {
          "text": "要使<code>quotient</code>的值等于 2。",
          "testString": "assert(quotient === 2, '要使<code>quotient</code>的值等于 2。');"
        },
        {
          "text": "使用<code>/</code>运算符。",
          "testString": "assert(/\\d+\\s*\\/\\s*\\d+/.test(code), '使用<code>/</code>运算符。');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "var quotient = 66 / 0;",
            "",
            ""
          ],
          "head": [],
          "tail": [
            "(function(z){return 'quotient = '+z;})(quotient);"
          ]
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244ac",
      "title": "Increment a Number with JavaScript",
      "description": [
        "使用<code>++</code>，我们可以很容易地对变量进行自增或者<code>+1</code>运算。",
        "<code>i++;</code>",
        "等效于",
        "<code>i = i + 1;</code>",
        "<strong>注意</strong><br><code>i++;</code>这种写法，省去了书写 = 符号的必要。",
        "<hr>",
        "重写代码，使用<code>++</code>来对变量<code>myVar</code>进行自增操作。",
        "<strong>提示</strong><br>了解更多关于<a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Increment_()\" target=\"_blank\">Arithmetic operators - Increment (++)</a>."
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "var myVar = 87;\nmyVar++;"
      ],
      "tests": [
        {
          "text": "<code>myVar</code>应该等于<code>88</code>",
          "testString": "assert(myVar === 88, '<code>myVar</code>应该等于<code>88</code>');"
        },
        {
          "text": "<code>myVar = myVar + 1;</code>语句应该被修改",
          "testString": "assert(/var\\s*myVar\\s*=\\s*87;\\s*\\/*.*\\s*myVar\\+\\+;/.test(code), '<code>myVar = myVar + 1;</code> 语句应该被修改');"
        },
        {
          "text": "使用<code>++</code>运算符",
          "testString": "assert(/[+]{2}\\s*myVar|myVar\\s*[+]{2}/.test(code), '使用<code>++</code>运算符');"
        },
        {
          "text": "不要修改注释上方的代码",
          "testString": "assert(/var myVar = 87;/.test(code), '不要修改注释上方的代码');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "var myVar = 87;",
            "",
            "// 请只修改这条注释以下的代码",
            "myVar = myVar + 1;",
            ""
          ],
          "head": [],
          "tail": [
            "(function(z){return 'myVar = ' + z;})(myVar);"
          ]
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244ad",
      "title": "Decrement a Number with JavaScript",
      "description": [
        "使用自减符号<code>--</code>，你可以很方便地对一个变量执行<dfn>自减</dfn>或者减 1 操作。",
        "<code>i--;</code>",
        "等效于",
        "<code>i = i - 1;</code>",
        "<strong>提示</strong><br><code>i--;</code>这种写法，省去了书写等号的必要。",
        "<hr>",
        "重写代码，使用<code>--</code>符号对<code>myVar</code>执行自减操作。"
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "var myVar = 11;\nmyVar--;"
      ],
      "tests": [
        {
          "text": "<code>myVar</code>应该等于<code>10</code>",
          "testString": "assert(myVar === 10, '<code>myVar</code>应该等于<code>10</code>');"
        },
        {
          "text": "<code>myVar = myVar - 1;</code>语句应该被修改",
          "testString": "assert(/var\\s*myVar\\s*=\\s*11;\\s*\\/*.*\\s*myVar--;/.test(code), '<code>myVar = myVar - 1;</code>语句应该被修改');"
        },
        {
          "text": "对<code>myVar</code>使用<code>--</code>运算符",
          "testString": "assert(/[-]{2}\\s*myVar|myVar\\s*[-]{2}/.test(code), '对<code>myVar</code>使用<code>--</code>运算符');"
        },
        {
          "text": "不要修改注释上面的代码",
          "testString": "assert(/var myVar = 11;/.test(code), '不要修改注释上面的代码');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "var myVar = 11;",
            "",
            "// 请只修改这条注释以下的代码",
            "myVar = myVar - 1;",
            ""
          ],
          "head": [],
          "tail": [
            "(function(z){return 'myVar = ' + z;})(myVar);"
          ]
        }
      }
    },
    {
      "id": "cf1391c1c11feddfaeb4bdef",
      "title": "Create Decimal Numbers with JavaScript",
      "description": [
        "我们也可以把小数存储到变量中。小数也被称作<dfn>浮点数</dfn> 。",
        "<strong>提示</strong><br>不是所有的实数都可以用 <dfn>浮点数</dfn> 来表示。因为可能存在四舍五入的错误，<a href=\"https://en.wikipedia.org/wiki/Floating_point#Accuracy_problems\" target=\"_blank\">详情查看</a>。",
        "<hr>",
        "创建一个变量<code>myDecimal</code>并给它赋值一个浮点数。(例如<code>5.21</code>)。"
      ],
      "solutions": [
        "var myDecimal = 9.9;"
      ],
      "tests": [
        {
          "text": "<code>myDecimal</code>应该是一个数字",
          "testString": "assert(typeof myDecimal === \"number\", '<code>myDecimal</code>应该是一个数字');"
        },
        {
          "text": "<code>myDecimal</code>应该包含小数点",
          "testString": "assert(myDecimal % 1 != 0, '<code>myDecimal</code>应该包含小数点'); "
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "var ourDecimal = 5.7;",
            "",
            "// 请把你的代码写在这条注释以下",
            "",
            ""
          ],
          "head": [],
          "tail": [
            "(function(){if(typeof myDecimal !== \"undefined\"){return myDecimal;}})();"
          ]
        }
      }
    },
    {
      "id": "bd7993c9c69feddfaeb7bdef",
      "title": "Multiply Two Decimals with JavaScript",
      "description": [
        "在 JavaScript 中，你也可以用小数进行计算，就像整数一样。",
        "把两个小数相乘，并得到它们乘积。",
        "<hr>",
        "改变<code>0.0</code>的数值让变量<code>product</code>的值等于<code>5.0</code>。"
    ],
      "solutions": [
        "var product = 2.0 * 2.5;"
      ],
      "tests": [
        {
          "text": "变量<code>product</code>应该等于<code>5.0</code>.",
          "testString": "assert(product === 5.0, '变量<code>product</code>应该等于<code>5.0</code>.');"
        },
        {
          "text": "要使用<code>*</code>运算符",
          "testString": "assert(/\\*/.test(code), '要使用<code>*</code>运算符');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "var product = 2.0 * 0.0;",
            "",
            ""
          ],
          "head": [],
          "tail": [
            "(function(y){return 'product = '+y;})(product);"
          ]
        }
      }
    },
    {
      "id": "bd7993c9ca9feddfaeb7bdef",
      "title": "Divide One Decimal by Another with JavaScript",
      "description": [
        "现在让我们将一个小数除以另一个小数。",
        "<hr>",
        "改变数值<code>0.0</code>的值让变量<code>quotient</code>的值等于<code>2.2</code>."
      ],
      "solutions": [],
      "tests": [
        {
          "text": "<code>quotient</code>的值应该等于<code>2.2</code>",
          "testString": "assert(quotient === 2.2, '<code>quotient</code>的值应该等于<code>2.2</code>');"
        },
        {
          "text": "使用<code>/</code>运算符将 4.4 除以 2",
          "testString": "assert(/4\\.40*\\s*\\/\\s*2\\.*0*/.test(code), '使用<code>/</code>运算符将 4.4 除以 2');"
        },
        {
          "text": "quotient 变量应该只被赋值一次",
          "testString": "assert(code.match(/quotient/g).length === 1, 'quotient 变量应该只被赋值一次');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "var quotient = 0.0 / 2.0; // 修改这一行",
            "",
            ""
          ],
          "head": [],
          "tail": [
            "(function(y){return 'quotient = '+y;})(quotient);"
          ]
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244ae",
      "title": "Finding a Remainder in JavaScript",
      "description": [
        "<dfn>remainder</dfn>余数运算符<code>%</code>对两个数取余。",
        "<strong>示例</strong>",
        "<blockquote>5 % 2 = 1 因为<br>Math.floor(5 / 2) = 2 （商）<br>2 * 2 = 4<br>5 - 4 = 1 （余数）</blockquote>",
        "<strong>用法</strong><br>在数学中，看一个数是奇数还是偶数，只需要看这个数除以 2 得到的余数是 0 还是 1。  ",
        "<blockquote>17 % 2 = 1（17 是奇数）<br>48 % 2 = 0（48 是偶数）</blockquote>",
        "<strong>提示<strong><br><dfn>remainder</dfn>余数运算符有时被错误地称为“模数”运算符。它与模数非常相似，但在负数下不能正常工作。",
        "<hr>",
        "使用<code>%</code>运算符，计算 11 除以 3 的余数，并把余数赋给变量remainder。"
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "var remainder =  11 % 3;"
      ],
      "tests": [
        {
          "text": "变量<code>remainder</code>应该被初始化",
          "testString": "assert(/var\\s+?remainder/.test(code), '变量<code>remainder</code>应该被初始化');"
        },
        {
          "text": "<code>remainder</code>的值应该等于<code>2</code>",
          "testString": "assert(remainder === 2, '<code>remainder</code>的值应该等于<code>2</code>');"
        },
        {
          "text": "你应该使用<code>%</code>运算符",
          "testString": "assert(/\\s+?remainder\\s*?=\\s*?.*%.*;/.test(code), '你应该使用<code>%</code>运算符');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// 请只修改这条注释以下的代码",
            "",
            "var remainder;",
            ""
          ],
          "head": [],
          "tail": [
            "(function(y){return 'remainder = '+y;})(remainder);"
          ]
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244af",
      "title": "Compound Assignment With Augmented Addition",
      "description": [
        "在编程当中，通常通过赋值来修改变量的内容。请记住，先计算<code>=</code>右边，然后把计算出来的结果赋给左边。",
        "<code>myVar = myVar + 5;</code>",
        "以上是最常见的运算赋值语句，先运算、再赋值。还有一类操作符是一步到位既做运算也赋值的。",
        "这类操作符的其中一种就是<code>+=</code>运算符。",
        "<blockquote>var myVar = 1;<br>myVar += 5;<br>console.log(myVar); // 返回 6</blockquote>",
        "<hr>>",
        "使用<code>+=</code>操作符实现同样的效果。"
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "var a = 3;\nvar b = 17;\nvar c = 12;\n\na += 12;\nb += 9;\nc += 7;"
      ],
      "tests": [
        {
          "text": "<code>a</code>应该等于<code>15</code>",
          "testString": "assert(a === 15, '<code>a</code>应该等于<code>15</code>');"
        },
        {
          "text": "<code>b</code>应该等于<code>26</code>",
          "testString": "assert(b === 26, '<code>b</code>应该等于<code>26</code>');"
        },
        {
          "text": "<code>c</code>应该等于<code>19</code>",
          "testString": "assert(c === 19, '<code>c</code>应该等于<code>19</code>');"
        },
        {
          "text": "你应该对每个变量使用<code>+=</code>操作符",
          "testString": "assert(code.match(/\\+=/g).length === 3, '你应该对每个变量使用<code>+=</code>操作符');"
        },
        {
          "text": "不要修改注释上面的代码",
          "testString": "assert(/var a = 3;/.test(code) && /var b = 17;/.test(code) && /var c = 12;/.test(code), '不要修改注释上面的代码');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "var a = 3;",
            "var b = 17;",
            "var c = 12;",
            "",
            "// 请只修改这条注释以下的代码",
            "",
            "a = a + 12;",
            "b = 9 + b;",
            "c = c + 7;",
            ""
          ],
          "head": [],
          "tail": [
            "(function(a,b,c){ return \"a = \" + a + \", b = \" + b + \", c = \" + c; })(a,b,c);"
          ]
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244b0",
      "title": "Compound Assignment With Augmented Subtraction",
      "description": [
        "与<code>+=</code>操作符类似，<code>-=</code>操作符用来对一个变量进行减法赋值操作。",
        "<code>myVar = myVar - 5;</code>",
        "将会从变量<code>myVar</code>中减去数值<code>5</code>。也可以写成这种形式：",
        "<code>myVar -= 5;</code>",
        "<hr>",
        "使用<code>-=</code>操作符实现同样的效果。"
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "var a = 11;\nvar b = 9;\nvar c = 3;\n\na -= 6;\nb -= 15;\nc -= 1;\n\n"
      ],
      "tests": [
        {
          "text": "<code>a</code>应该等于<code>5</code>",
          "testString": "assert(a === 5, '<code>a</code>应该等于<code>5</code>');"
        },
        {
          "text": "<code>b</code>应该等于<code>-6</code>",
          "testString": "assert(b === -6, '<code>b</code>应该等于<code>-6</code>');"
        },
        {
          "text": "<code>c</code>应该等于<code>2</code>",
          "testString": "assert(c === 2, '<code>c</code>应该等于<code>2</code>');"
        },
        {
          "text": "应该对每个变量使用<code>-=</code>操作符",
          "testString": "assert(code.match(/-=/g).length === 3, '应该对每个变量使用<code>-=</code>操作符');"
        },
        {
          "text": "不要修改注释上面的代码",
          "testString": "assert(/var a = 11;/.test(code) && /var b = 9;/.test(code) && /var c = 3;/.test(code), '不要修改注释上面的代码');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "var a = 11;",
            "var b = 9;",
            "var c = 3;",
            "",
            "// 请只修改这条注释以下的代码",
            "",
            "a = a - 6;",
            "b = b - 15;",
            "c = c - 1;",
            "",
            ""
          ],
          "head": [],
          "tail": [
            "(function(a,b,c){ return \"a = \" + a + \", b = \" + b + \", c = \" + c; })(a,b,c);"
          ]
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244b1",
      "title": "Compound Assignment With Augmented Multiplication",
      "description": [
        "<code>*=</code>操作符是让变量与一个数相乘并赋值。",
        "<code>myVar = myVar * 5;</code>",
        "将会把变量<code>myVar</code>与数值<code>5</code>相乘。也可以写作这样的形式: ",
        "<code>myVar *= 5;</code>",
        "<hr>",
        "使用<code>*=</code>操作符实现同样的效果。"
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "var a = 5;\nvar b = 12;\nvar c = 4.6;\n\na *= 5;\nb *= 3;\nc *= 10;"
      ],
      "tests": [
        {
          "text": "<code>a</code>应该等于<code>25</code>",
          "testString": "assert(a === 25, '<code>a</code>应该等于<code>25</code>');"
        },
        {
          "text": "<code>b</code>应该等于<code>36</code>",
          "testString": "assert(b === 36, '<code>b</code>应该等于<code>36</code>');"
        },
        {
          "text": "<code>c</code>应该等于<code>46</code>",
          "testString": "assert(c === 46, '<code>c</code>应该等于<code>46</code>');"
        },
        {
          "text": "应该对每个变量使用<code>*=</code>操作符",
          "testString": "assert(code.match(/\\*=/g).length === 3, '应该对每个变量使用<code>*=</code>操作符');"
        },
        {
          "text": "不要修改注释上面的代码",
          "testString": "assert(/var a = 5;/.test(code) && /var b = 12;/.test(code) && /var c = 4\\.6;/.test(code), '不要修改注释上面的代码');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "var a = 5;",
            "var b = 12;",
            "var c = 4.6;",
            "",
            "// 请只修改这条注释以下的代码",
            "",
            "a = a * 5;",
            "b = 3 * b;",
            "c = c * 10;",
            "",
            ""
          ],
          "head": [],
          "tail": [
            "(function(a,b,c){ return \"a = \" + a + \", b = \" + b + \", c = \" + c; })(a,b,c);"
          ]
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244b2",
      "title": "Compound Assignment With Augmented Division",
      "description": [
        "<code>/=</code>操作符是让变量与另一个数相除并赋值。",
        "<code>myVar = myVar / 5;</code>",
        "会把变量<code>myVar</code>的值除于<code>5</code>。等价于: ",
        "<code>myVar /= 5;</code>",
        "<hr>",
        "使用<code>/=</code>操作符实现同样的效果。"
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "var a = 48;\nvar b = 108;\nvar c = 33;\n\na /= 12;\nb /= 4;\nc /= 11;"
      ],
      "tests": [
        {
          "text": "<code>a</code>应该等于<code>4</code>",
          "testString": "assert(a === 4, '<code>a</code>应该等于<code>4</code>');"
        },
        {
          "text": "<code>b</code>应该等于<code>27</code>",
          "testString": "assert(b === 27, '<code>b</code>应该等于<code>27</code>');"
        },
        {
          "text": "<code>c</code>应该等于<code>3</code>",
          "testString": "assert(c === 3, '<code>c</code>应该等于<code>3</code>');"
        },
        {
          "text": "应该对每个变量使用<code>/=</code>操作符",
          "testString": "assert(code.match(/\\/=/g).length === 3, '应该对每个变量使用<code>/=</code>操作符');"
        },
        {
          "text": "不要修改注释上面的代码",
          "testString": "assert(/var a = 48;/.test(code) && /var b = 108;/.test(code) && /var c = 33;/.test(code), '不要修改注释上面的代码');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "var a = 48;",
            "var b = 108;",
            "var c = 33;",
            "",
            "// 请只修改这条注释以下的代码",
            "",
            "a = a / 12;",
            "b = b / 4;",
            "c = c / 11;",
            ""
          ],
          "head": [],
          "tail": [
            "(function(a,b,c){ return \"a = \" + a + \", b = \" + b + \", c = \" + c; })(a,b,c);"
          ]
        }
      }
    },
    {
      "id": "bd7123c9c444eddfaeb5bdef",
      "title": "Declare String Variables",
      "description": [
        "先前我们使用过的代码：",
        "<code>var myName = \"your name\";</code>",
        "<code>\"your name\"</code>被称作<dfn>字符串</dfn>。字符串是用单引号或双引号包裹起来的一连串的零个或多个字符。",
        "<hr>",
        "创建两个新的<code>字符串</code>变量：<code>myFirstName</code>和<code>myLastName</code>分别为它们赋上你的姓和名的值。"
      ],
      "solutions": [
        "var myFirstName = \"Alan\";\nvar myLastName = \"Turing\";"
      ],
      "tests": [
        {
          "text": "<code>myFirstName</code>应该是一个字符串,并且至少包含一个字符。",
          "testString": "assert((function(){if(typeof myFirstName !== \"undefined\" && typeof myFirstName === \"string\" && myFirstName.length > 0){return true;}else{return false;}})(), '<code>myFirstName</code>应该是一个字符串,并且至少包含一个字符。');"
        },
        {
          "text": "<code>myLastName</code>应该是一个字符串,并且至少包含一个字符。",
          "testString": "assert((function(){if(typeof myLastName !== \"undefined\" && typeof myLastName === \"string\" && myLastName.length > 0){return true;}else{return false;}})(), '<code>myLastName</code>应该是一个字符串,并且至少包含一个字符。');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// 示例",
            "var firstName = \"Alan\";",
            "var lastName = \"Turing\";",
            "",
            "// 请把你的代码写在这条注释以下",
            "",
            ""
          ],
          "head": [],
          "tail": [
            "if(typeof myFirstName !== \"undefined\" && typeof myLastName !== \"undefined\"){(function(){return myFirstName + ', ' + myLastName;})();}"
          ]
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244b5",
      "title": "Escaping Literal Quotes in Strings",
      "description": [
        "当你定义一个字符串必须要用单引号或双引号来包裹它。那么当你需要在字符串中使用一个：<code>\"</code>或者<code>'</code>时该怎么办呢?",
        "在 JavaScript 中，你可以通过在引号前面使用 <dfn>反斜杠</dfn> (<code>\\</code>) 来转义引号。",
        "<code>var sampleStr = \"Alan said, \\\"Peter is learning JavaScript\\\".\";</code>",
        "这标志着提醒 JavaScript 单引号或双引号并不是字符串的结尾，而是出现在字符串内的字符。所以，如果你要打印字符串到控制台，你将得到：",
        "<code>Alan said, \"Peter is learning JavaScript\".</code>",
        "<hr>",
        "使用 <dfn>反斜杠</dfn> 将一个字符串赋值给变量<code>myStr</code>，以便如果你要打印到控制台，你会看到：",
        "<code>I am a \"double quoted\" string inside \"double quotes\"</code>"
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "var myStr = \"I am a \\\"double quoted\\\" string inside \\\"double quotes\\\".\";"
      ],
      "tests": [
        {
          "text": "你的代码中应该包含两个双引号 (<code>&quot;</code>) 以及四个转义的双引 (<code>&#92;&quot;</code>).",
          "testString": "assert(code.match(/\\\\\"/g).length === 4 && code.match(/[^\\\\]\"/g).length === 2, '你的代码中应该包含两个双引号 (<code>&quot;</code>) 以及四个转义的双引 (<code>&#92;&quot;</code>).');"
        },
        {
          "text": "变量 myStr 应该包含字符串<code>I am a \"double quoted\" string inside \"double quotes\".</code>",
          "testString": "assert(myStr === \"I am a \\\"double quoted\\\" string inside \\\"double quotes\\\".\", '变量 myStr 应该包含字符串<code>I am a \"double quoted\" string inside \"double quotes\".</code>');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "var myStr = \"\"; // 请修改这一行",
            "",
            ""
          ],
          "head": [],
          "tail": [
            "(function(){",
            "  if(typeof myStr === 'string') {",
            "    console.log(\"myStr = \\\"\" + myStr + \"\\\"\");",
            "  } else {",
            "    console.log(\"myStr is undefined\");",
            "  }",
            "})();"
          ]
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244b4",
      "title": "Quoting Strings with Single Quotes",
      "description": [
        "在 JavaScript 中的 <dfn>字符串</dfn> 要用单引号或双引号来包裹它，只要你在开始和结束都使用相同类型的引号，单引号和双引号的功能在JavaScript中是相同的。",
        "<blockquote>doubleQuoteStr = \"This is a string\"; <br/>singleQuoteStr = 'This is also a string';</blockquote>",
        "当你需要在一个字符串中使用多个引号的时候，你可以使用一种类型的引号包裹另一种类型的引号。常见的场景比如在字符串中保存的句子包含对话，需要用引号包裹的时候。另外一个用处是在一个字符串中保存带有用引号包裹的属性的<code>&#60;a&#62;</code>标签的时候。",
        "<blockquote>conversation = 'Finn exclaims to Jake, \"Algebraic!\"';</blockquote>",
        "但是，如果你想值字符串中使用与最外层相同的引号，会有一些问题。要记住，字符串在开头和结尾都有相同的引号，如果在中间使用了相同的引号，字符串将提前中止并抛出错误。",
        "<blockquote>goodStr = 'Jake asks Finn, \"Hey, let\\'s go on an adventure?\"'; <br/>badStr = 'Finn responds, \"Let's go!\"'; // 抛出错误</blockquote>",
        "在上面的<dfn>goodStr</dfn>中，可以使用反斜杠<code>\\</code>转义字符安全地使用两个引号",
        "<strong>提示</strong><br/>不要把反斜杠<code>\\</code> 和斜杠<code>/</code>搞混，它们不是一回事。",
        "<hr>",
        "将字符串更改为在开头和结尾使用单引号的字符串，并且不包含转义字符。",
        "然后字符串中的<code>&#60;a&#62;</code>标签在任何地方都可以使用双引号。你需要将最外层引号更改为单引号，以便删除转义字符。"
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "var myStr = '<a href=\"http://www.example.com\" target=\"_blank\">Link</a>';"
      ],
      "tests": [
        {
          "text": "删除所有<code>反斜杠</code> (<code>\\</code>)",
          "testString": "assert(!/\\\\/g.test(code) && myStr.match('\\\\s*<a href\\\\s*=\\\\s*\"http://www.example.com\"\\\\s*target\\\\s*=\\\\s*\"_blank\">\\\\s*Link\\\\s*</a>\\\\s*'), '删除所有<code>反斜杠</code> (<code>\\</code>)');"
        },
        {
          "text": "应该要有两个单引号<code>&#39;</code>和四个双引号<code>&quot;</code>",
          "testString": "assert(code.match(/\"/g).length === 4 && code.match(/'/g).length === 2, '应该要有两个单引号<code>&#39;</code>和四个双引号<code>&quot;</code>');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "var myStr = \"<a href=\\\"http://www.example.com\\\" target=\\\"_blank\\\">Link</a>\";",
            "",
            ""
          ],
          "head": [],
          "tail": [
            "(function() { return \"myStr = \" + myStr; })();"
          ]
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244b6",
      "title": "Escape Sequences in Strings",
      "description": [
        "引号不是字符串中唯一的可以被转义<dfn>escaped</dfn>的字符。使用转义字符有两个原因：首先是可以让你使用无法输入的字符，例如退格。其次是可以让你在一个字符串中表示多个引号，而不会出错。我们在之前的挑战中学到了这一点。",
        "<table class=\"table table-striped\"><thead><tr><th>代码</th><th>输出</th></tr></thead><tbody><tr><td><code>\\'</code></td><td>单引号</td></tr><tr><td><code>\\\"</code></td><td>双引号</td></tr><tr><td><code>\\\\</code></td><td>反斜杠</td></tr><tr><td><code>\\n</code></td><td>换行符</td></tr><tr><td><code>\\r</code></td><td>回车符</td></tr><tr><td><code>\\t</code></td><td>制表符</td></tr><tr><td><code>\\b</code></td><td>backspace</td></tr><tr><td><code>\\f</code></td><td>换页符</td></tr></tbody></table>",
        "<em>请注意，必须对反斜杠本身进行转义才能显示为反斜杠。</em>",
        "<hr>",
        "使用转义字符将下面三行文本字符串赋给变量<code>myStr</code>。",
        "<blockquote>FirstLine<br/>&nbsp;&nbsp;&nbsp;&nbsp;\\SecondLine<br/>ThirdLine</blockquote>",
        "你需要使用转义字符正确的插入特殊字符，确保间距与上面文本一致并且单词或转义字符之间没有空格。",
        "像这样用转义字符写出来：",
        "<q>FirstLine<code>换行符</code><code>制表符</code><code>反斜杠</code>SecondLine<code>换行符</code>ThirdLine</q>"
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "var myStr = \"FirstLine\\n\\t\\\\SecondLine\\nThirdLine\";"
      ],
      "tests": [
        {
          "text": "<code>myStr</code>不能包含空格",
          "testString": "assert(!/ /.test(myStr), '<code>myStr</code> should not contain any spaces');"
        },
        {
          "text": "<code>myStr</code>应该包含字符串<code>FirstLine</code>, <code>SecondLine</code> and <code>ThirdLine</code> （记得区分大小写）",
          "testString": "assert(/FirstLine/.test(myStr) && /SecondLine/.test(myStr) && /ThirdLine/.test(myStr), '<code>myStr</code>应该包含字符串<code>FirstLine</code>, <code>SecondLine</code> and <code>ThirdLine</code> （记得区分大小写）');"
        },
        {
          "text": "<code>FirstLine</code>后面应该是一个新行<code>\\n</code>",
          "testString": "assert(/FirstLine\\n/.test(myStr), '<code>FirstLine</code>后面应该是一个换行符<code>\\n</code>');"
        },
        {
          "text": "<code>myStr</code>应该包含制表符<code>\\t</code>并且制表符要在换行符后面",
          "testString": "assert(/\\n\\t/.test(myStr), '<code>myStr</code>应该包含制表符<code>\\t</code>并且制表符要在换行符后面');"
        },
        {
          "text": "<code>SecondLine</code>前面应该是反斜杠<code>\\\\</code>",
          "testString": "assert(/\\SecondLine/.test(myStr), '<code>SecondLine</code>前面应该是反斜杠<code>\\\\</code>');"
        },
        {
          "text": "<code>SecondLine</code>和<code>ThirdLine</code>之间应该是换行符",
          "testString": "assert(/SecondLine\\nThirdLine/.test(myStr), '<code>SecondLine</code>和<code>ThirdLine</code>之间该是换行符');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "var myStr; // 请修改这一行",
            "",
            ""
          ],
          "head": [],
          "tail": [
            "(function(){",
            "if (myStr !== undefined){",
            "console.log('myStr:\\n' + myStr);}})();"
          ]
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244b7",
      "title": "Concatenating Strings with Plus Operator",
      "description": [
        "在 JavaScript 中，当对一个<code>String</code>类型的值使用<code>+</code>操作符的时候，它被称作 <dfn>concatenation</dfn> 操作符。你可以通过和其他字符串<dfn>concatenation</dfn>来创建一个新的字符串。",
        "<strong>示例</strong>",
        "<blockquote>'My name is Alan,' + ' I concatenate.'</blockquote>",
        "<strong>提示</strong><br>注意空格。拼接操作不会在两个字符串之间添加空格，所以想加上空格的话，你需要自己在字符串里面添加。",
        "<hr>",
        "使用<code>+</code>操作符，把字符串<code>\"This is the start. \"</code>和<code>\"This is the end.\"</code>连接起来并赋值给变量<code>myStr</code>。"
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "var ourStr = \"I come first. \" + \"I come second.\";\nvar myStr = \"This is the start. \" + \"This is the end.\";"
      ],
      "tests": [
        {
          "text": "<code>myStr</code>的值应该是<code>This is the start. This is the end.</code>",
          "testString": "assert(myStr === \"This is the start. This is the end.\", '<code>myStr</code>的值应该是<code>This is the start. This is the end.</code>');"
        },
        {
          "text": "使用<code>+</code>操作符构建<code>myStr</code>",
          "testString": "assert(code.match(/([\"']).*([\"'])\\s*\\+\\s*([\"']).*([\"'])/g).length > 1, '使用<code>+</code>操作符构建<code>myStr</code>');"
        },
        {
          "text": "<code>myStr</code>应该被<code>var</code>关键字声明",
          "testString": "assert(/var\\s+myStr/.test(code), '<code>myStr</code>应该被<code>var</code>关键字声明');"
        },
        {
          "text": "确保有给<code>myStr</code>赋值",
          "testString": "assert(/myStr\\s*=/.test(code), '确保有给<code>myStr</code>赋值');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// 示例",
            "var ourStr = \"I come first. \" + \"I come second.\";",
            "",
            "// 请把你的代码写在这条注释以下",
            "",
            "var myStr;",
            "",
            ""
          ],
          "head": [],
          "tail": [
            "(function(){",
            "  if(typeof myStr === 'string') {",
            "    return 'myStr = \"' + myStr + '\"';",
            "  } else {",
            "    return 'myStr is not a string';",
            "  }",
            "})();"
          ]
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244b8",
      "title": "Concatenating Strings with the Plus Equals Operator",
      "description": [
        "我们还可以使用<code>+=</code>运算符来<dfn>concatenate</dfn>（拼接）字符串到现有字符串的结尾。对于那些被分割成几段的长的字符串来说，这一操作是非常有用的。",
        "<strong>提示</strong><br>注意空格。连接操作不会添加两个字符串外面的空格，所以如果想要加上空格的话，你需要自己在字符串里面添加。",
        "<hr>",
        "通过使用<code>+=</code>操作符来连接这两个字符串：<br><code>\"This is the first sentence. \"</code>和<code>\"This is the second sentence.\"</code>并赋给变量<code>myStr</code>。"
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "var ourStr = \"I come first. \";\nourStr += \"I come second.\";\n\nvar myStr = \"This is the first sentence. \";\nmyStr += \"This is the second sentence.\";"
      ],
      "tests": [
        {
          "text": "<code>myStr</code>的值应该是<code>This is the first sentence. This is the second sentence.</code>",
          "testString": "assert(myStr === \"This is the first sentence. This is the second sentence.\", '<code>myStr</code>的值应该是<code>This is the first sentence. This is the second sentence.</code>');"
        },
        {
          "text": "使用<code>+=</code>操作符创建<code>myStr</code>变量",
          "testString": "assert(code.match(/\\w\\s*\\+=\\s*[\"']/g).length > 1 && code.match(/\\w\\s*\\=\\s*[\"']/g).length > 1, '使用<code>+=</code>操作符创建<code>myStr</code>变量');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// 示例",
            "var ourStr = \"I come first. \";",
            "ourStr += \"I come second.\";",
            "",
            "// 请把你的代码写在这条注释以下",
            "",
            "var myStr;",
            "",
            ""
          ],
          "head": [],
          "tail": [
            "(function(){",
            "  if(typeof myStr === 'string') {",
            "    return 'myStr = \"' + myStr + '\"';",
            "  } else {",
            "    return 'myStr is not a string';",
            "  }",
            "})();"
          ]
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244b9",
      "title": "Constructing Strings with Variables",
      "description": [
        "有时候你需要创建一个类似<a href=\"https://en.wikipedia.org/wiki/Mad_Libs\" target=\"_blank\">Mad Libs</a>(填词游戏）风格的字符串。通过使用连接运算符<code> + </code>，你可以插入一个或多个变量来组成一个字符串。",
        "<hr>",
        "把你的名字赋值给变量<code>myName</code>，然后把变量<code>myName</code>插入到字符串<code>\"My name is \"</code>和<code>\" and I am well!\"</code>之间，并把连接后的结果赋值给变量<code>myStr</code>。 "
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "var myName = \"Bob\";\nvar myStr = \"My name is \" + myName + \" and I am well!\";"
      ],
      "tests": [
        {
          "text": "<code>myName</code>至少要包含三个字符",
          "testString": "assert(typeof myName !== 'undefined' && myName.length > 2, '<code>myName</code>至少要包含三个字符');"
        },
        {
          "text": "使用两个<code>+</code>操作符创建包含<code>myName</code>的<code>myStr</code>变量",
          "testString": "assert(code.match(/[\"']\\s*\\+\\s*myName\\s*\\+\\s*[\"']/g).length > 0, '使用两个<code>+</code>操作符创建包含<code>myName</code>的<code>myStr</code>变量');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// 示例",
            "var ourName = \"freeCodeCamp\";",
            "var ourStr = \"Hello, our name is \" + ourName + \", how are you?\";",
            "",
            "// 请把你的代码写在这条注释以下",
            "var myName;",
            "var myStr;",
            "",
            ""
          ],
          "head": [],
          "tail": [
            "(function(){",
            "  var output = [];",
            "  if(typeof myName === 'string') {",
            "    output.push('myName = \"' + myName + '\"');",
            "  } else {",
            "    output.push('myName is not a string');",
            "  }",
            "  if(typeof myStr === 'string') {",
            "    output.push('myStr = \"' + myStr + '\"');",
            "  } else {",
            "    output.push('myStr is not a string');",
            "  }",
            "  return output.join('\\n');",
            "})();"
          ]
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244ed",
      "title": "Appending Variables to Strings",
      "description": [
        "我们不仅可以创建出多行的字符串，还可以使用加等号(<code>+=</code>)运算符来追加变量到字符串上。",
        "<hr>",
        "设置变量<code>someAdjective</code>的值，并使用<code>+=</code>运算符把它追加到变量<code>myStr</code>上。"
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "var anAdjective = \"awesome!\";\nvar ourStr = \"freeCodeCamp is \";\nourStr += anAdjective;\n\nvar someAdjective = \"neat\";\nvar myStr = \"Learning to code is \";\nmyStr += someAdjective;"
      ],
      "tests": [
        {
          "text": "<code>someAdjective</code>应该是一个至少包含三个字符的字符串",
          "testString": "assert(typeof someAdjective !== 'undefined' && someAdjective.length > 2, '<code>someAdjective</code>应该是一个至少包含三个字符的字符串');"
        },
        {
          "text": "使用<code>+=</code>操作符把<code>someAdjective</code>追加到<code>myStr</code>的后面",
          "testString": "assert(code.match(/myStr\\s*\\+=\\s*someAdjective\\s*/).length > 0, '使用<code>+=</code>操作符把<code>someAdjective</code>追加到<code>myStr</code>的后面');"
        }
      ],
      "challengeType": 1,
      "guideUrl": "https://guide.freecodecamp.org/certificates/appending-variables-to-strings",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// 示例",
            "var anAdjective = \"awesome!\";",
            "var ourStr = \"freeCodeCamp is \";",
            "ourStr += anAdjective;",
            "",
            "// 请把你的代码写在这条注释以下",
            "",
            "var someAdjective;",
            "var myStr = \"Learning to code is \";",
            ""
          ],
          "head": [],
          "tail": [
            "(function(){",
            "  var output = [];",
            "  if(typeof someAdjective === 'string') {",
            "    output.push('someAdjective = \"' + someAdjective + '\"');",
            "  } else {",
            "    output.push('someAdjective is not a string');",
            "  }",
            "  if(typeof myStr === 'string') {",
            "    output.push('myStr = \"' + myStr + '\"');",
            "  } else {",
            "    output.push('myStr is not a string');",
            "  }",
            "  return output.join('\\n');",
            "})();"
          ]
        }
      }
    },
    {
      "id": "bd7123c9c448eddfaeb5bdef",
      "title": "Find the Length of a String",
      "description": [
        "你可以通过在字符串变量或字符串后面写上<code>.length</code>来获得字符串变量<code>字符串</code>值的长度。",
        "<code>\"Alan Peter\".length; // 10</code>",
        "例如，我们创建了一个变量<code>var firstName = \"Charles\"</code>，我们就可以通过使用<code>firstName.length</code>来获得<code>\"Charles\"</code>字符串的长度。",
        "<hr>",
        "使用<code>.length</code>属性来获得变量<code>lastName</code>的长度，并把它赋值给变量<code>lastNameLength</code>。"
      ],
      "solutions": [
        "var firstNameLength = 0;\nvar firstName = \"Ada\";\nfirstNameLength = firstName.length;\n\nvar lastNameLength = 0;\nvar lastName = \"Lovelace\";\nlastNameLength = lastName.length;"
      ],
      "tests": [
        {
          "text": "<code>lastNameLength</code>应该等于 8",
          "testString": "assert((function(){if(typeof lastNameLength !== \"undefined\" && typeof lastNameLength === \"number\" && lastNameLength === 8){return true;}else{return false;}})(), '<code>lastNameLength</code>应该等于 8');"
        },
        {
          "text": "你应该使用<code>.length</code>获取<code>lastName</code>的长度, 像这样：<code>lastName.length</code>",
          "testString": "assert((function(){if(code.match(/\\.length/gi) && code.match(/\\.length/gi).length >= 2 && code.match(/var lastNameLength \\= 0;/gi) && code.match(/var lastNameLength \\= 0;/gi).length >= 1){return true;}else{return false;}})(), '你应该使用<code>.length</code>获取<code>lastName</code>的长度, 像这样：<code>lastName.length</code>');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// 示例",
            "var firstNameLength = 0;",
            "var firstName = \"Ada\";",
            "",
            "firstNameLength = firstName.length;",
            "",
            "// 初始化",
            "var lastNameLength = 0;",
            "var lastName = \"Lovelace\";",
            "",
            "// 请把你的代码写在这条注释以下",
            "",
            "lastNameLength = lastName;",
            "",
            ""
          ],
          "head": [],
          "tail": [
            "if(typeof lastNameLength !== \"undefined\"){(function(){return lastNameLength;})();}"
          ]
        }
      }
    },
    {
      "id": "bd7123c9c549eddfaeb5bdef",
      "title": "Use Bracket Notation to Find the First Character in a String",
      "description": [
        "方括号表示法是一种在字符串中的特定<code>index</code>（索引）处获取字符的方法。",
        "大多数现代编程语言，如JavaScript，不同于人类从 1 开始计数。它们是从 0 开始计数，这被称为 <dfn>基于零</dfn> 的索引。",
        "例如, 在单词 \"Charles\" 中索引 0 上的字符为 \"C\"，所以在<code>var firstName = \"Charles\"</code>中，你可以使用<code>firstName[0]</code>来获得第一个位置上的字符。",
        "<hr>",
        "使用方括号获取变量<code>lastName</code>中的第一个字符，并赋给变量<code>firstLetterOfLastName</code>。",
        "<strong>提示</strong><br>如果你遇到困难了，不妨看看变量<code>firstLetterOfFirstName</code>是如何赋值的。"
      ],
      "solutions": [
        "var firstLetterOfLastName = \"\";\nvar lastName = \"Lovelace\";\n\n// 请把你的代码写在这条注释以下\nfirstLetterOfLastName = lastName[0];"
      ],
      "tests": [
        {
          "text": "<code>firstLetterOfLastName</code>的值应该是<code>L</code>",
          "testString": "assert(firstLetterOfLastName === 'L', '<code>firstLetterOfLastName</code>的值应该是<code>L</code>');"
        },
        {
          "text": "你应该使用中括号",
          "testString": "assert(code.match(/firstLetterOfLastName\\s*?=\\s*?lastName\\[.*?\\]/), '你应该使用中括号');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// 示例",
            "var firstLetterOfFirstName = \"\";",
            "var firstName = \"Ada\";",
            "",
            "firstLetterOfFirstName = firstName[0];",
            "",
            "// 初始化",
            "var firstLetterOfLastName = \"\";",
            "var lastName = \"Lovelace\";",
            "",
            "// 请把你的代码写在这条注释以下",
            "firstLetterOfLastName = lastName;",
            "",
            ""
          ],
          "head": [],
          "tail": [
            "(function(v){return v;})(firstLetterOfLastName);"
          ]
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244ba",
      "title": "Understand String Immutability",
      "description": [
        "在 JavaScript 中，<code>字符串</code>的值是 <dfn>不可变的</dfn>，这意味着一旦字符串被创建就不能被改变。",
        "例如，下面的代码：",
        "<blockquote>var myStr = \"Bob\";<br>myStr[0] = \"J\";</blockquote>",
        "是不会把变量<code>myStr</code>的值改变成 \"Job\" 的，因为变量<code>myStr</code>是不可变的。注意，这<em>并不</em>意味着<code>myStr</code>永远不能被改变，只是字符串字面量 <dfn>string literal</dfn> 的各个字符不能被改变。改变<code>myStr</code>中的唯一方法是重新给它赋一个值，例如：",
        "<blockquote>var myStr = \"Bob\";<br>myStr = \"Job\";</blockquote>",
        "<hr>",
        "把<code>myStr</code>的值改为<code>Hello World</code>。"
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "var myStr = \"Jello World\";\nmyStr = \"Hello World\";"
      ],
      "tests": [
        {
          "text": "message:<code>myStr</code>的值应该是<code>Hello World</code>",
          "testString": "assert(myStr === \"Hello World\", 'message:<code>myStr</code>的值应该是<code>Hello World</code>');"
        },
        {
          "text": "Do not change the code above the line",
          "testString": "assert(/myStr = \"Jello World\"/.test(code), '不要修改注释上面的代码');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// 初始化变量",
            "var myStr = \"Jello World\";",
            "",
            "// 请把你的代码写在这条注释以下",
            "",
            "myStr[0] = \"H\"; // Fix Me",
            "",
            ""
          ],
          "head": [],
          "tail": [
            "(function(v){return \"myStr = \" + v;})(myStr);"
          ]
        }
      }
    },
    {
      "id": "bd7123c9c450eddfaeb5bdef",
      "title": "Use Bracket Notation to Find the Nth Character in a String",
      "description": [
        "你也可以使用方括号来获得一个字符串中的其他位置的字符。",
        "请记住，程序是从<code>0</code>开始计数，所以获取第一个字符实际上是[0]。",
        "<hr>",
        "让我们使用方括号，把<code>lastName</code>变量的第三个字符赋值给<code>thirdLetterOfLastName</code>。",
        "<strong>提示</strong><br>如果你遇到困难了，看看<code>secondLetterOfFirstName</code>变量是如何做的。"
      ],
      "solutions": [
        "var lastName = \"Lovelace\";\nvar thirdLetterOfLastName = lastName[2];"
      ],
      "tests": [
        {
          "text": "<code>thirdLetterOfLastName</code>的值应该是<code>v</code>",
          "testString": "assert(thirdLetterOfLastName === 'v', '<code>thirdLetterOfLastName</code>的值应该是<code>v</code>');"
        },
        {
          "text": "你应该使用方括号",
          "testString": "assert(code.match(/thirdLetterOfLastName\\s*?=\\s*?lastName\\[.*?\\]/), '你应该使用方括号');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// 示例",
            "var firstName = \"Ada\";",
            "var secondLetterOfFirstName = firstName[1];",
            "",
            "// 初始化变量",
            "var lastName = \"Lovelace\";",
            "",
            "// 请把你的代码写在这条注释以下",
            "var thirdLetterOfLastName = lastName;",
            "",
            ""
          ],
          "head": [],
          "tail": [
            "(function(v){return v;})(thirdLetterOfLastName);"
          ]
        }
      }
    },
    {
      "id": "bd7123c9c451eddfaeb5bdef",
      "title": "Use Bracket Notation to Find the Last Character in a String",
      "description": [
        "要获取字符串的最后一个字符，可以用字符串的长度减 1 的索引值。",
        "例如，在<code>var firstName = \"Charles\"</code>中，你可以这样操作<code>firstName[firstName.length - 1]</code>来得到字符串的最后的一个字符。",
        "<hr>",
        "使用<dfn>方括号<dfn来取得<code>lastName</code>变量中的最后一个字符。",
        "<strong>提示</strong><br>如果你遇到困难了，不妨看看在<code>lastLetterOfFirstName</code>变量上是怎么做的。"
      ],
      "solutions": [
        "var firstName = \"Ada\";\nvar lastLetterOfFirstName = firstName[firstName.length - 1];\n\nvar lastName = \"Lovelace\";\nvar lastLetterOfLastName = lastName[lastName.length - 1];"
      ],
      "tests": [
        {
          "text": "<code>lastLetterOfLastName</code>应该是\"e\".",
          "testString": "assert(lastLetterOfLastName === \"e\", '<code>lastLetterOfLastName</code>应该是 \"e\".');"
        },
        {
          "text": "你需要使用<code>.length</code>获取最后一个字符",
          "testString": "assert(code.match(/\\.length/g).length === 2, '你需要使用<code>.length</code>获取最后一个字符');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// 示例",
            "var firstName = \"Ada\";",
            "var lastLetterOfFirstName = firstName[firstName.length - 1];",
            "",
            "// 初始化变量",
            "var lastName = \"Lovelace\";",
            "",
            "// 请把你的代码写在这条注释以下",
            "var lastLetterOfLastName = lastName;",
            "",
            ""
          ],
          "head": [],
          "tail": [
            "(function(v){return v;})(lastLetterOfLastName);"
          ]
        }
      }
    },
    {
      "id": "bd7123c9c452eddfaeb5bdef",
      "title": "Use Bracket Notation to Find the Nth-to-Last Character in a String",
      "description": [
        "我们既可以获取字符串的最后一个字符，也可以用获取字符串的倒数第N个字符。",
        "例如，你可以这样<code>firstName[firstName.length - 3]</code>操作来获得<code>var firstName = \"Charles\"</code>字符串中的倒数第三个字符。",
        "<hr>",
        "使用<dfn>方括号</dfn>来获得<code>lastName</code>字符串中的倒数第二个字符。",
        "<strong>提示</strong><br>如果你遇到困难了，不妨看看<code>thirdToLastLetterOfFirstName</code>变量是如何做到的。"
      ],
      "solutions": [
        "var firstName = \"Ada\";\nvar thirdToLastLetterOfFirstName = firstName[firstName.length - 3];\n\nvar lastName = \"Lovelace\";\nvar secondToLastLetterOfLastName = lastName[lastName.length - 2];"
      ],
      "tests": [
        {
          "text": "<code>secondToLastLetterOfLastName</code>应该是\"c\".",
          "testString": "assert(secondToLastLetterOfLastName === 'c', '<code>secondToLastLetterOfLastName</code>应该是\"c\".');"
        },
        {
          "text": "你需要使用<code>.length</code>获取倒数第二个字符",
          "testString": "assert(code.match(/\\.length/g).length === 2, '你需要使用<code>.length</code>获取倒数第二个字符');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// 示例",
            "var firstName = \"Ada\";",
            "var thirdToLastLetterOfFirstName = firstName[firstName.length - 3];",
            "",
            "// 初始化变量",
            "var lastName = \"Lovelace\";",
            "",
            "// 请把你的代码写在这条注释以下",
            "var secondToLastLetterOfLastName = lastName;",
            "",
            ""
          ],
          "head": [],
          "tail": [
            "(function(v){return v;})(secondToLastLetterOfLastName);"
          ]
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244bb",
      "title": "Word Blanks",
      "description": [
        "现在，我们来用字符串的相关知识实现一个 \"<a href='https://en.wikipedia.org/wiki/Mad_Libs' target='_blank'>Mad Libs</a>\" 类的文字游戏，称为 \"Word Blanks\"。 你将创建一个（可选幽默的）“填空”样式句子。",
        "在 \"Mad Libs\" 游戏中，提供一个缺少一些单词的句子，缺少的单词包括名词，动词，形容词和副词等。然后，你选择一些单词填写句子缺失的地方，使句子完整并且有意义。",
        "思考一下这句话 - \"It was really <strong>____</strong>, and we <strong>____</strong> ourselves <strong>____</strong>\"。这句话有三个缺失的部分 - 形容词，动词和副词，选择合适单词填入完成它。然后将完成的句子赋值给变量，如下所示：",
        "<blockquote>var sentence = \"It was really\" + \"hot\" + \", and we\" + \"laughed\" + \"ourselves\" + \"silly.\";</blockquote>",
        "<hr>",
        "在这个挑战中，我们为你提供名词，动词，形容词和副词。你需要使用合适单词以及我们提供的单词来形成完整的句子。",
        "你需要使用字符串连接运算符<code>+</code>来拼接字符串变量：<code>myNoun</code>，<code>myAdjective</code>，<code>myVerb</code>，和<code>myAdverb</code>来构建一个新字符串。然后，将新字符串赋给<code>result</code>变量。",
        "你还需要考虑字符串中的空格，确保句子的所有单词之间有空格。结果应该是一个完整的句子。"
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "function wordBlanks(myNoun, myAdjective, myVerb, myAdverb) {\n  var result = \"\";\n\n  result = \"Once there was a \" + myNoun + \" which was very \" + myAdjective + \". \";\n  result += \"It \" + myVerb + \" \" + myAdverb + \" around the yard.\";\n\n  return result;\n}"
      ],
      "tests": [
        {
          "text": "<code>wordBlanks(\"\",\"\",\"\",\"\")</code>应该返回一个字符串",
          "testString": "assert(typeof wordBlanks(\"\",\"\",\"\",\"\") === 'string', '<code>wordBlanks(\"\",\"\",\"\",\"\")</code>应该返回一个字符串');"
        },
        {
          "text": "<code>wordBlanks(\"dog\", \"big\", \"ran\", \"quickly\")</code>应包含由非单词字符（以及 madlib 中的其他单词）分隔的所有传入的单词。",
          "testString": "assert(/\\bdog\\b/.test(test1) && /\\bbig\\b/.test(test1) && /\\bran\\b/.test(test1) && /\\bquickly\\b/.test(test1),'<code>wordBlanks(\"dog\", \"big\", \"ran\", \"quickly\")</code>应包含由非单词字符（以及 madlib 中的其他单词）分隔的所有传入的单词。');"
        },
        {
          "text": "<code>wordBlanks(\"cat\", \"little\", \"hit\", \"slowly\")</code>应包含由非单词字符（以及 madlib 中的其他单词）分隔的所有传入的单词。",
          "testString": "assert(/\\bcat\\b/.test(test2) && /\\blittle\\b/.test(test2) && /\\bhit\\b/.test(test2) && /\\bslowly\\b/.test(test2),'<code>wordBlanks(\"cat\", \"little\", \"hit\", \"slowly\")</code>应包含由非单词字符（以及 madlib 中的其他单词）分隔的所有传入的单词。');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function wordBlanks(myNoun, myAdjective, myVerb, myAdverb) {",
            "  // 请把你的代码写在这条注释以下",
            "  var result = \"\";",
            "",
            "  // 请把你的代码写在这条注释以上",
            "  return result;",
            "}",
            "",
            "// 修改单词来测试函数",
            "wordBlanks(\"dog\", \"big\", \"ran\", \"quickly\");"
          ],
          "head": [],
          "tail": [
            "var test1 = wordBlanks(\"dog\", \"big\", \"ran\", \"quickly\");",
            "var test2 = wordBlanks(\"cat\", \"little\", \"hit\", \"slowly\");"
          ]
        }
      }
    },
    {
      "id": "bd7993c9c69feddfaeb8bdef",
      "title": "Store Multiple Values in one Variable using JavaScript Arrays",
      "description": [
        "使用<code>数组</code>，我们可以在一个地方存储多个数据。",
        "以左方括号<code>[</code>开始定义一个数组，以右方括号<code>]</code>结束，里面每个元素之间用逗号隔开，例如：",
        "<code>var sandwich = [\"peanut butter\", \"jelly\", \"bread\"]</code>.",
        "<hr>",
        "创建一个包含<code>字符串</code>和<code>数字</code>的数组<code>myArray</code>。",
        "<strong>提示</strong><br>如果你遇到困难，请参考文本编辑器中的示例代码。"
      ],
      "solutions": [
        "var myArray = [\"The Answer\", 42];"
      ],
      "tests": [
        {
          "text": "<code>myArray</code>应该是一个<code>数组</code>",
          "testString": "assert(typeof myArray == 'object', '<code>myArray</code>应该是一个<code>数组</code>');"
        },
        {
          "text": "<code>myArray</code>数组的第一个元素应该是一个<code>字符串</code>",
          "testString": "assert(typeof myArray[0] !== 'undefined' && typeof myArray[0] == 'string', '<code>myArray</code>数组的第一个元素应该是一个<code>字符串</code>');"
        },
        {
          "text": "<code>myArray</code>数组的第二个元素应该是一个<code>数字</code>",
          "testString": "assert(typeof myArray[1] !== 'undefined' && typeof myArray[1] == 'number', '<code>myArray</code>数组的第二个元素应该是一个<code>数字</code>');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// 示例",
            "var ourArray = [\"John\", 23];",
            "",
            "// 请把你的代码写在这条注释以下",
            "var myArray = [];",
            ""
          ],
          "head": [],
          "tail": [
            "(function(z){return z;})(myArray);"
          ]
        }
      }
    },
    {
      "id": "cf1111c1c11feddfaeb7bdef",
      "title": "Nest one Array within Another Array",
      "description": [
        "你也可以在数组中包含其他数组，例如：<code>[[\"Bulls\", 23], [\"White Sox\", 45]]</code>。这被称为一个<dfn>多维数组<dfn>。",
        "<hr>",
        "创建一个名为<code>myArray</code>的多维数组。"
      ],
      "solutions": [
        "var myArray = [[1,2,3]];"
      ],
      "tests": [
        {
          "text": "应该包含至少一个嵌入的数组",
          "testString": "assert(Array.isArray(myArray) && myArray.some(Array.isArray), '应该包含至少一个嵌入的数组');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// 示例",
            "var ourArray = [[\"the universe\", 42], [\"everything\", 101010]];",
            "",
            "// 请把你的代码写在这条注释以下",
            "var myArray = [];",
            ""
          ],
          "head": [],
          "tail": [
            "if(typeof myArray !== \"undefined\"){(function(){return myArray;})();}"
          ]
        }
      }
    },
    {
      "id": "56bbb991ad1ed5201cd392ca",
      "title": "Access Array Data with Indexes",
      "description": [
        "我们可以像操作字符串一样通过数组索引<code>[index]</code>来访问数组中的数据。",
        "数组索引的使用与字符串索引一样，不同的是，通过字符串的索引得到的是一个字符，通过数组索引得到的是一个元素。与字符串类似，数组也是<dfn>基于零</dfn>的索引，因此数组的第一个元素的索引是<code>0</code>。",
        "<strong>示例</strong>",
        "<blockquote>var array = [50,60,70];<br>array[0]; // equals 50<br>var data = array[1];  // equals 60</blockquote>",
        "<strong>提示</strong><br>数组名称和方括号之间不应有任何空格，如<code>array [0]</code>尽管 JavaScript 能够正确处理，但可能会让看你代码的其他程序员感到困惑",
        "<hr>",
        "创建一个名为<code>myData</code>的变量，并把<code>myArray</code>的第一个索引上的值赋给它。"
      ],
      "solutions": [
        "var myArray = [50,60,70];\nvar myData = myArray[0];"
      ],
      "tests": [
        {
          "text": "变量<code>myData</code>的值应该等于<code>myArray</code>的第一个值",
          "testString": "assert((function(){if(typeof myArray !== 'undefined' && typeof myData !== 'undefined' && myArray[0] === myData){return true;}else{return false;}})(), '变量<code>myData</code>的值应该等于<code>myArray</code>的第一个值');"
        },
        {
          "text": "应使用方括号访问变量<code>myArray</code>中的数据",
          "testString": "assert((function(){if(code.match(/\\s*=\\s*myArray\\[0\\]/g)){return true;}else{return false;}})(), '应使用方括号访问变量<code>myArray</code>中的数据');"
        }
      ],
      "challengeType": 1,
      "guideUrl": "https://guide.freecodecamp.org/certificates/access-array-data-with-indexes",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// 示例",
            "var ourArray = [50,60,70];",
            "var ourData = ourArray[0]; // equals 50",
            "",
            "// 初始化变量",
            "var myArray = [50,60,70];",
            "",
            "// 请把你的代码写在这条注释以下",
            ""
          ],
          "head": [],
          "tail": [
            "if(typeof myArray !== \"undefined\" && typeof myData !== \"undefined\"){(function(y,z){return 'myArray = ' + JSON.stringify(y) + ', myData = ' + JSON.stringify(z);})(myArray, myData);}"
          ]
        }
      }
    },
    {
      "id": "cf1111c1c11feddfaeb8bdef",
      "title": "Modify Array Data With Indexes",
      "description": [
        "与字符串的数据不可变不同，数组的数据是可变的，并且可以自由地改变。",
        "<strong>示例</strong>",
        "<blockquote>var ourArray = [50,40,30];<br>ourArray[0] = 15; // 等于 [15,40,30]</blockquote>",
        "<strong>提示</strong><br>数组名称和方括号之间不应有任何空格，如<code>array [0]</code>尽管 JavaScript 能够正确处理，但可能会让看你代码的其他程序员感到困惑。",
        "<hr>",
        "修改数组<code>myArray</code>中索引0上的值为<code>45</code>。"
      ],
      "solutions": [
        "var myArray = [18,64,99];\nmyArray[0] = 45;"
      ],
      "tests": [
        {
          "text": "<code>myArray</code>的值应该 [45,64,99]",
          "testString": "assert((function(){if(typeof myArray != 'undefined' && myArray[0] == 45 && myArray[1] == 64 && myArray[2] == 99){return true;}else{return false;}})(), '<code>myArray</code>的值应该 [45,64,99]');"
        },
        {
          "text": "你应该使用正确的索引修改<code>myArray</code>的值",
          "testString": "assert((function(){if(code.match(/myArray\\[0\\]\\s*=\\s*/g)){return true;}else{return false;}})(), '你应该使用正确的索引修改<code>myArray</code>的值');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// 示例",
            "var ourArray = [18,64,99];",
            "ourArray[1] = 45; // ourArray now equals [18,45,99].",
            "",
            "// 初始化变量",
            "var myArray = [18,64,99];",
            "",
            "// 请把你的代码写在这条注释以下",
            "",
            ""
          ],
          "head": [],
          "tail": [
            "if(typeof myArray !== \"undefined\"){(function(){return myArray;})();}"
          ]
        }
      }
    },
    {
      "id": "56592a60ddddeae28f7aa8e1",
      "title": "Access Multi-Dimensional Arrays With Indexes",
      "description": [
        "可以把 <dfn>多维</dfn> 数组看作成是一个 <em>数组中的数组</em>。当使用方括号去访问数组的时候，第一个<code>[index]</code>访问的是第 N 个子数组，第二个<code>[index]</code>访问的是第 N 个子数组的第N个元素。",
        "<strong>示例</strong>",
        "<blockquote>var arr = [<br>&nbsp;&nbsp;[1,2,3],<br>&nbsp;&nbsp;[4,5,6],<br>&nbsp;&nbsp;[7,8,9],<br>&nbsp;&nbsp;[[10,11,12], 13, 14]<br>];<br>arr[3]; // 等于 [[10,11,12], 13, 14]<br>arr[3][0]; // 等于 [10,11,12]<br>arr[3][0][1]; // 等于 11</blockquote>",
        "<strong>提示</strong><br>T数组名称和方括号之间不应该有任何空格，如<code>array [0][0]</code>甚至是这样<code>array [0] [0]</code>尽管 JavaScript 能够正确处理，但可能会让看你代码的其他程序员感到困惑。",
        "<hr>",
        "使用恰当的<code>[index]</code>访问<code>myArray</code>，使得<code>myData</code>的值为<code>8</code>"
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "var myArray = [[1,2,3],[4,5,6], [7,8,9], [[10,11,12], 13, 14]];\nvar myData = myArray[2][1];"
      ],
      "tests": [
        {
          "text": "<code>myData</code>应该等于<code>8</code>.",
          "testString": "assert(myData === 8, '<code>myData</code>应该等于<code>8</code>.');"
        },
        {
          "text": "你应该使用方括号从<code>myArray</code>中取值",
          "testString": "assert(/myArray\\[2\\]\\[1\\]/g.test(code) && !/myData\\s*=\\s*(?:.*[-+*/%]|\\d)/g.test(code), '你应该使用方括号从<code>myArray</code>中取值');"
        }
      ],
      "challengeType": 1,
      "guideUrl": "https://guide.freecodecamp.org/certificates/access-array-data-with-indexes",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// 初始化变量",
            "var myArray = [[1,2,3], [4,5,6], [7,8,9], [[10,11,12], 13, 14]];",
            "",
            "// 请把你的代码写在这条注释以下",
            "var myData = myArray[0][0];",
            ""
          ],
          "head": [],
          "tail": [
            "if(typeof myArray !== \"undefined\"){(function(){return \"myData: \" + myData + \" myArray: \" + JSON.stringify(myArray);})();}"
          ]
        }
      }
    },
    {
      "id": "56bbb991ad1ed5201cd392cb",
      "title": "Manipulate Arrays With push()",
      "description": [
        "一个简单的方法将数据添加到一个数组的末尾是通过<code>push()</code>函数。",
        "<code>.push()</code>接受把一个或多个参数，并把它“推”入到数组的末尾。",
        "<blockquote>var arr = [1,2,3];<br>arr.push(4);<br>// 现在arr的值为 [1,2,3,4]</blockquote>",
        "<hr>",
        "把<code>[\"dog\", 3]</code>“推”入到<code>myArray</code>变量的末尾。"
      ],
      "solutions": [
        "var myArray = [[\"John\", 23], [\"cat\", 2]];\nmyArray.push([\"dog\",3]);"
      ],
      "tests": [
        {
          "text": "<code>myArray</code>应该等于<code>[[\"John\", 23], [\"cat\", 2], [\"dog\", 3]]</code>.",
          "testString": "assert((function(d){if(d[2] != undefined && d[0][0] == 'John' && d[0][1] === 23 && d[2][0] == 'dog' && d[2][1] === 3 && d[2].length == 2){return true;}else{return false;}})(myArray), '<code>myArray</code>应该等于<code>[[\"John\", 23], [\"cat\", 2], [\"dog\", 3]]</code>.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// 示例",
            "var ourArray = [\"Stimpson\", \"J\", \"cat\"];",
            "ourArray.push([\"happy\", \"joy\"]); ",
            "// 经过 push 操作后，ourArray 的值为 [\"Stimpson\", \"J\", \"cat\", [\"happy\", \"joy\"]]",
            "",
            "// 初始化变量",
            "var myArray = [[\"John\", 23], [\"cat\", 2]];",
            "",
            "// 请把你的代码写在这条注释以下",
            "",
            ""
          ],
          "head": [],
          "tail": [
            "(function(z){return 'myArray = ' + JSON.stringify(z);})(myArray);"
          ]
        }
      }
    },
    {
      "id": "56bbb991ad1ed5201cd392cc",
      "title": "Manipulate Arrays With pop()",
      "description": [
        "改变数组中数据的另一种方法是用<code>.pop()</code>函数。",
        "<code>.pop()</code>函数用来“抛出”一个数组末尾的值。我们可以把这个“抛出”的值赋给一个变量存储起来。换句话说就是<code>.pop()</code>函数移除数组末尾的元素并返回这个元素。",
        "数组中任何类型的元素（数值，字符串，甚至是数组）可以被“抛出来” 。",
        "<code>var oneDown = [1, 4, 6].pop();</code><br> console.log(oneDown); // 返回 6<br> console.log(threeArr); // 返回的值为<code>6</code>，数组变成了<code>[1, 4]</code>。",
        "<hr>",
        "使用<code>.pop()</code>函数移除<code>myArray</code>中的最后一个元素，并且把“抛出”的值赋给<code>removedFromMyArray</code>。"
      ],
      "solutions": [
        "var myArray = [[\"John\", 23], [\"cat\", 2]];\nvar removedFromMyArray = myArray.pop();"
      ],
      "tests": [
        {
          "text": "<code>myArray</code>应该只包含<code>[[\"John\", 23]]</code>.",
          "testString": "assert((function(d){if(d[0][0] == 'John' && d[0][1] === 23 && d[1] == undefined){return true;}else{return false;}})(myArray), '<code>myArray</code>应该只包含<code>[[\"John\", 23]]</code>.');"
        },
        {
          "text": "对<code>myArray</code>使用<code>pop()</code>函数 ",
          "testString": "assert(/removedFromMyArray\\s*=\\s*myArray\\s*.\\s*pop\\s*(\\s*)/.test(code), '对<code>myArray</code>使用<code>pop()</code>函数 ');"
        },
        {
          "text": "<code>removedFromMyArray</code>应该只包含<code>[\"cat\", 2]</code>.",
          "testString": "assert((function(d){if(d[0] == 'cat' && d[1] === 2 && d[2] == undefined){return true;}else{return false;}})(removedFromMyArray), '<code>removedFromMyArray</code>应该只包含<code>[\"cat\", 2]</code>.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// 示例",
            "var ourArray = [1,2,3];",
            "var removedFromOurArray = ourArray.pop(); ",
            "// 经过 pop 操作之后，removedFromOurArray 的值为 3，ourArray 的值为 [1,2]",
            "",
            "// 初始化变量",
            "var myArray = [[\"John\", 23], [\"cat\", 2]];",
            "",
            "// 请把你的代码写在这条注释以下",
            "var removedFromMyArray;",
            "",
            ""
          ],
          "head": [],
          "tail": [
            "(function(y, z){return 'myArray = ' + JSON.stringify(y) + ' & removedFromMyArray = ' + JSON.stringify(z);})(myArray, removedFromMyArray);"
          ]
        }
      }
    },
    {
      "id": "56bbb991ad1ed5201cd392cd",
      "title": "Manipulate Arrays With shift()",
      "description": [
        "<code>pop()</code>函数用来移出数组中最后一个元素。如果想要移出第一个元素要怎么办呢？",
        "这就是<code>.shift()</code>的用武之地。它的工作原理就像<code>.pop()</code>，但它移除的是第一个元素，而不是最后一个。",
        "<hr>",
        "使用<code>.shift()</code>函数移出<code>myArray</code>中的第一项，并把“移出”的值赋给<code>removedFromMyArray</code>。"
      ],
      "solutions": [
        "var myArray = [[\"John\", 23], [\"dog\", 3]];\n\n// 请把你的代码写在这条注释以下\nvar removedFromMyArray = myArray.shift();"
      ],
      "tests": [
        {
          "text": "<code>myArray</code>应该等于<code>[[\"dog\", 3]]</code>.",
          "testString": "assert((function(d){if(d[0][0] == 'dog' && d[0][1] === 3 && d[1] == undefined){return true;}else{return false;}})(myArray), '<code>myArray</code>应该等于<code>[[\"dog\", 3]]</code>.');"
        },
        {
          "text": "<code>removedFromMyArray</code>应该包含<code>[\"John\", 23]</code>.",
          "testString": "assert((function(d){if(d[0] == 'John' && d[1] === 23 && typeof removedFromMyArray === 'object'){return true;}else{return false;}})(removedFromMyArray), '<code>removedFromMyArray</code>应该包含<code>[\"John\", 23]</code>.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// 示例",
            "var ourArray = [\"Stimpson\", \"J\", [\"cat\"]];",
            "var removedFromOurArray = ourArray.shift();",
            "// removedFromOurArray now equals \"Stimpson\" and ourArray now equals [\"J\", [\"cat\"]].",
            "",
            "// 初始化变量",
            "var myArray = [[\"John\", 23], [\"dog\", 3]];",
            "",
            "// 请把你的代码写在这条注释以下",
            "var removedFromMyArray;",
            "",
            ""
          ],
          "head": [],
          "tail": [
            "(function(y, z){return 'myArray = ' + JSON.stringify(y) + ' & removedFromMyArray = ' + JSON.stringify(z);})(myArray, removedFromMyArray);"
          ]
        }
      }
    },
    {
      "id": "56bbb991ad1ed5201cd392ce",
      "title": "Manipulate Arrays With unshift()",
      "description": [
        "你不仅可以<code>shift</code>（移出）数组中的第一个元素，你也可以<code>unshift</code>（移入）一个元素到数组的头部。",
        "<code>.unshift()</code>函数用起来就像<code>.push()</code>函数一样, 但不是在数组的末尾添加元素，而是在数组的头部添加元素。",
        "<hr>",
        "使用<code>unshift()</code>函数把<code>[\"Paul\",35]</code>加入到<code>myArray</code>的头部。"
      ],
      "solutions": [
        "var myArray = [[\"John\", 23], [\"dog\", 3]];\nmyArray.shift();\nmyArray.unshift([\"Paul\", 35]);"
      ],
      "tests": [
        {
          "text": "<code>myArray</code>应该包含[[\"Paul\", 35], [\"dog\", 3]].",
          "testString": "assert((function(d){if(typeof d[0] === \"object\" && d[0][0] == 'Paul' && d[0][1] === 35 && d[1][0] != undefined && d[1][0] == 'dog' && d[1][1] != undefined && d[1][1] == 3){return true;}else{return false;}})(myArray), '<code>myArray</code>应该包含[[\"Paul\", 35], [\"dog\", 3]].');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// 示例",
            "var ourArray = [\"Stimpson\", \"J\", \"cat\"];",
            "ourArray.shift(); // 经过 shift 操作后，ourArray 的值为 [\"J\", \"cat\"]",
            "ourArray.unshift(\"Happy\"); ",
            "// 经过 unshift 操作后，ourArray 的值为 [\"Happy\", \"J\", \"cat\"]",
            "",
            "// 初始化变量",
            "var myArray = [[\"John\", 23], [\"dog\", 3]];",
            "myArray.shift();",
            "",
            "// 请把你的代码写在这条注释以下",
            "",
            ""
          ],
          "head": [],
          "tail": [
            "(function(y, z){return 'myArray = ' + JSON.stringify(y);})(myArray);"
          ]
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244bc",
      "title": "Shopping List",
      "description": [
        "创建一个名叫<code>myList</code>的购物清单，清单的数据格式就是多维数组。",
        "每个子数组中的第一个元素应该是购买的物品名称，第二个元素应该是物品的数量，类似于：",
        "<code>[\"Chocolate Bar\", 15]</code>",
        "任务：你的购物清单至少应该有 5 个子数组。"
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "var myList = [\n  [\"Candy\", 10],\n  [\"Potatoes\", 12],\n  [\"Eggs\", 12],\n  [\"Catfood\", 1],\n  [\"Toads\", 9]\n];"
      ],
      "tests": [
        {
          "text": "<code>myList</code>应该一个数组",
          "testString": "assert(isArray, '<code>myList</code>应该一个数组');"
        },
        {
          "text": "你的每个子数组的第一个元素的类型都应该是字符串",
          "testString": "assert(hasString, '你的每个子数组的第一个元素的类型都应该是字符串');"
        },
        {
          "text": "你的每个子数组的第二个元素的类型都应该是字符串",
          "testString": "assert(hasNumber, '你的每个子数组的第二个元素的类型都应该是字符串');"
        },
        {
          "text": "你的列表中至少要包含 5 个元素",
          "testString": "assert(count > 4, '你的列表中至少要包含 5 个元素');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "var myList = [];",
            "",
            ""
          ],
          "head": [],
          "tail": [
            "var count = 0;",
            "var isArray = false;",
            "var hasString = false;",
            "var hasNumber = false;",
            "(function(list){",
            "  if(Array.isArray(myList)) {",
            "    isArray = true;",
            "    if(myList.length > 0) {",
            "      hasString = true;",
            "      hasNumber = true;",
            "      myList.forEach(function(elem) {",
            "        if(typeof elem[0] !== 'string') {",
            "          hasString = false;",
            "        }",
            "        if(typeof elem[1] !== 'number') {",
            "          hasNumber = false;",
            "        }",
            "      });",
            "    }",
            "    count = myList.length;",
            "    return JSON.stringify(myList);",
            "  } else {",
            "    return \"myList is not an array\";",
            "  }",
            "",
            "})(myList);"
          ]
        }
      }
    },
    {
      "id": "56bbb991ad1ed5201cd392cf",
      "title": "Write Reusable JavaScript with Functions",
      "description": [
        "在 JavaScript 中，我们可以把代码的重复部分抽取出来，放到一个<dfn>函数</dfn>（functions）中。",
        "这是一个函数（function）的例子：",
        "<blockquote>function functionName() {<br>  console.log(\"Hello World\");<br>}</blockquote>",
        "你可以通过函数名称<code>functionName</code>加上后面的小括号来调用这个函数（function），就像这样：",
        "<code>functionName();</code>",
        "每次调用函数时它会打印出消息“Hello World”到开发的控制台上。所有的大括号之间的代码将在每次函数调用时执行。",
        "<hr>",
        "<ol><li>创建一个名为<code>myFunction</code>的函数，这个函数可以打印“Hi World”到开发控制台上。</li><li>调用这个函数。</li></ol>"
      ],
      "solutions": [
        "function reusableFunction() {\n  console.log(\"Hi World\");\n}\nreusableFunction();"
      ],
      "tests": [
        {
          "text": "<code>myFunction</code>应该是一个函数",
          "testString": "assert(typeof reusableFunction === 'function', '<code>myFunction</code>应该是一个函数');"
        },
        {
          "text": "<code>myFunction</code>应该在控制台中输出 \"Hi World\"",
          "testString": "assert(\"Hi World\" === logOutput, '<code>myFunction</code>应该在控制台中输出 \"Hi World\"');"
        },
        {
          "text": "在你定义<code>myFunction</code>之后记得调用它",
          "testString": "assert(/^\\s*reusableFunction\\(\\)\\s*;/m.test(code), '在你定义<code>myFunction</code>之后记得调用它');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// 示例",
            "function ourReusableFunction() {",
            "  console.log(\"Heyya, World\");",
            "}",
            "",
            "ourReusableFunction();",
            "",
            "// 请把你的代码写在这条注释以下",
            ""
          ],
          "head": [
            "var logOutput = \"\";",
            "var originalConsole = console",
            "function capture() {",
            "    var nativeLog = console.log;",
            "    console.log = function (message) {",
            "        if(message && message.trim) logOutput = message.trim();",
            "        if(nativeLog.apply) {",
            "          nativeLog.apply(originalConsole, arguments);",
            "        } else {",
            "          var nativeMsg = Array.prototype.slice.apply(arguments).join(' ');",
            "          nativeLog(nativeMsg);",
            "        }",
            "    };",
            "}",
            "",
            "function uncapture() {",
            "  console.log = originalConsole.log;",
            "}",
            "",
            "capture();"
          ],
          "tail": [
            "uncapture();",
            "",
            "if (typeof reusableFunction !== \"function\") { ",
            "  (function() { return \"reusableFunction is not defined\"; })();",
            "} else {",
            "  (function() { return logOutput || \"console.log never called\"; })();",
            "}"
          ]
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244bd",
      "title": "Passing Values to Functions with Arguments",
      "description": [
        "函数的参数<code>parameters</code>在函数中充当占位符(也叫形参)的作用，参数可以为一个或多个。调用一个函数时所传入的参数为实参，实参决定着形参真正的值。简单理解：形参即形式、实参即内容。",
        "这是带有两个参数的函数，<code>param1</code>和<code>param2</code>：",
        "<blockquote>function testFun(param1, param2) {<br>  console.log(param1, param2);<br>}</blockquote>",
        "接着我们调用<code>testFun</code>：",
        "<code>testFun(\"Hello\", \"World\");</code>",
        "我们传递了两个参数，<code>\"Hello\"</code>和<code>\"World\"</code>。在函数内部，<code>param1</code>等于“Hello”，<code>param2</code>等于“World”。请注意，<code>testFun</code>函数可以多次调用，每次调用时传递的参数会决定形参的实际值。",
        "<hr>",
        "<ol><li>创建一个名为<code>myFunction</code>的函数，它可以接收两个参数，计算参数的和，将结果输出到控制台。</li><li>调用这个函数。</li></ol>"
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "function functionWithArgs(a, b) {\n  console.log(a + b);\n}\nfunctionWithArgs(10, 5);"
      ],
      "tests": [
        {
          "text": "<code>functionWithArgs</code>应该是一个函数",
          "testString": "assert(typeof functionWithArgs === 'function', '<code>functionWithArgs</code>应该是一个函数');"
        },
        {
          "text": "<code>functionWithArgs(1,2)</code>应该输出<code>3</code>",
          "testString": "if(typeof functionWithArgs === \"function\") { capture(); functionWithArgs(1,2); uncapture(); } assert(logOutput == 3, '<code>functionWithArgs(1,2)</code>应该输出<code>3</code>');"
        },
        {
          "text": "<code>functionWithArgs(7,9)</code>应该输出<code>16</code>",
          "testString": "if(typeof functionWithArgs === \"function\") { capture(); functionWithArgs(7,9); uncapture(); } assert(logOutput == 16, '<code>functionWithArgs(7,9)</code>应该输出<code>16</code>');"
        },
        {
          "text": "在你定义<code>myFunction</code>之后记得调用它",
          "testString": "assert(/^\\s*functionWithArgs\\s*\\(\\s*\\d+\\s*,\\s*\\d+\\s*\\)\\s*;/m.test(code), '在你定义<code>myFunction</code>之后记得调用它');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// 示例",
            "function ourFunctionWithArgs(a, b) {",
            "  console.log(a - b);",
            "}",
            "ourFunctionWithArgs(10, 5); // Outputs 5",
            "",
            "// 请把你的代码写在这条注释以下",
            "",
            ""
          ],
          "head": [
            "var logOutput = \"\";",
            "var originalConsole = console",
            "function capture() {",
            "    var nativeLog = console.log;",
            "    console.log = function (message) {",
            "        if(message) logOutput = JSON.stringify(message).trim();",
            "        if(nativeLog.apply) {",
            "          nativeLog.apply(originalConsole, arguments);",
            "        } else {",
            "          var nativeMsg = Array.prototype.slice.apply(arguments).join(' ');",
            "          nativeLog(nativeMsg);",
            "        }",
            "    };",
            "}",
            "",
            "function uncapture() {",
            "  console.log = originalConsole.log;",
            "}",
            "",
            "capture();"
          ],
          "tail": [
            "uncapture();",
            "",
            "if (typeof functionWithArgs !== \"function\") { ",
            "  (function() { return \"functionWithArgs is not defined\"; })();",
            "} else {",
            "  (function() { return logOutput || \"console.log never called\"; })();",
            "}"
          ]
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244be",
      "title": "Global Scope and Functions",
      "description": [
        "在 JavaScript 中，<dfn>作用域</dfn>涉及到变量的作用范围。在函数外定义的变量具有 <dfn>全局</dfn> 作用域。这意味着，具有全局作用域的变量可以在代码的任何地方被调用。",
        "这些没有使用<code>var</code>关键字定义的变量，会被自动创建在全局作用域中，形成全局变量。当在代码其他地方无意间定义了一个变量，刚好变量名与全局变量相同，这时会产生意想不到的后果。因此你应该总是使用var关键字来声明你的变量。",
        "<hr>",
        "在函数外声明一个<code>全局</code>变量<code>myGlobal</code>，并给它一个初始值<code>10</code>",
        "在函数<code>fun1</code>的内部，<strong>不</strong>使用<code>var</code>关键字来声明<code>oopsGlobal</code>，并赋值为<code>5</code>。"
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "// Declare your variable here\nvar myGlobal = 10;\n\nfunction fun1() {\n  // Assign 5 to oopsGlobal Here\n  oopsGlobal = 5;\n}\n\n// 请把你的代码写在这条注释以上\nfunction fun2() {\n  var output = \"\";\n  if(typeof myGlobal != \"undefined\") {\n    output += \"myGlobal: \" + myGlobal;\n  }\n  if(typeof oopsGlobal != \"undefined\") {\n    output += \" oopsGlobal: \" + oopsGlobal;\n  }\n  console.log(output);\n}"
      ],
      "tests": [
        {
          "text": "<code>myGlobal</code> should be defined",
          "testString": "assert(typeof myGlobal != \"undefined\", '<code>myGlobal</code> should be defined');"
        },
        {
          "text": "<code>myGlobal</code> should have a value of <code>10</code>",
          "testString": "assert(myGlobal === 10, '<code>myGlobal</code> should have a value of <code>10</code>');"
        },
        {
          "text": "<code>myGlobal</code> should be declared using the <code>var</code> keyword",
          "testString": "assert(/var\\s+myGlobal/.test(code), '<code>myGlobal</code> should be declared using the <code>var</code> keyword');"
        },
        {
          "text": "<code>oopsGlobal</code> should be a global variable and have a value of <code>5</code>",
          "testString": "assert(typeof oopsGlobal != \"undefined\" && oopsGlobal === 5, '<code>oopsGlobal</code> should be a global variable and have a value of <code>5</code>');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// 声明变量",
            "",
            "",
            "function fun1() {",
            "  // 把 5 赋给 oopsGlobal",
            "  ",
            "}",
            "",
            "// 请把你的代码写在这条注释以上",
            "function fun2() {",
            "  var output = \"\";",
            "  if (typeof myGlobal != \"undefined\") {",
            "    output += \"myGlobal: \" + myGlobal;",
            "  }",
            "  if (typeof oopsGlobal != \"undefined\") {",
            "    output += \" oopsGlobal: \" + oopsGlobal;",
            "  }",
            "  console.log(output);",
            "}"
          ],
          "head": [
            "var logOutput = \"\";",
            "var originalConsole = console",
            "function capture() {",
            "    var nativeLog = console.log;",
            "    console.log = function (message) {",
            "        logOutput = message;",
            "        if(nativeLog.apply) {",
            "          nativeLog.apply(originalConsole, arguments);",
            "        } else {",
            "          var nativeMsg = Array.prototype.slice.apply(arguments).join(' ');",
            "          nativeLog(nativeMsg);",
            "        }",
            "    };",
            "}",
            "",
            "function uncapture() {",
            "  console.log = originalConsole.log;",
            "}",
            "var oopsGlobal;",
            "capture();"
          ],
          "tail": [
            "fun1();",
            "fun2();",
            "uncapture();",
            "(function() { return logOutput || \"console.log never called\"; })();"
          ]
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244bf",
      "title": "Local Scope and Functions",
      "description": [
        "在一个函数内声明的变量，以及该函数的参数都是局部变量，意味着它们只在该函数内可见。",
        "这是在函数<code>myTest</code>内声明局部变量<code>loc</code>的例子：",
        "<blockquote>function myTest() {<br>  var loc = \"foo\";<br>  console.log(loc);<br>}<br>myTest(); // 打印出 \"foo\"<br>console.log(loc); // loc 没有定义</blockquote>",
        "在函数外，<code>loc</code>是未定义的。",
        "<hr>",
        "在函数<code>myFunction</code>内部声明一个局部变量<code>myVar</code>，并删除外部的 console.log。"
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "function myLocalScope() {\n  'use strict';\n  \n  var myVar;\n  console.log(myVar);\n}\nmyLocalScope();"
      ],
      "tests": [
        {
          "text": "未找到全局的<code>myVar</code>变量",
          "testString": "assert(typeof myVar === 'undefined', '未找到全局的<code>myVar</code>变量');"
        },
        {
          "text": "需要定义局部的<code>myVar</code>变量",
          "testString": "assert(/var\\s+myVar/.test(code), '需要定义局部的<code>myVar</code>变量');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function myLocalScope() {",
            "  'use strict'; // 请不要修改这一行",
            "  ",
            "  console.log(myVar);",
            "}",
            "myLocalScope();",
            "",
            "// 请先运行这段代码，并在输出区域或浏览器的控制台中查看输出",
            "// 由于 myVar 在 myLocalScope 内外均没有定义，因此才会有报错",
            "console.log(myVar);",
            "",
            "// 现在，在 myLocalScope 中定义 myVar，并删掉 myLocalScope 外面的 console.log 以通过测试",
            ""
          ],
          "head": [
            "var logOutput = \"\";",
            "var originalConsole = console",
            "function capture() {",
            "  var nativeLog = console.log;",
            "  console.log = function (message) {",
            "    logOutput = message;",
            "    if(nativeLog.apply) {",
            "      nativeLog.apply(originalConsole, arguments);",
            "    } else {",
            "      var nativeMsg = Array.prototype.slice.apply(arguments).join(' ');",
            "      nativeLog(nativeMsg);",
            "    }",
            "  };",
            "}",
            "",
            "function uncapture() {",
            "  console.log = originalConsole.log;",
            "}",
            ""
          ],
          "tail": [
            "typeof myLocalScope === 'function' && (capture(), myLocalScope(), uncapture());",
            "(function() { return logOutput || \"console.log never called\"; })();"
          ]
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244c0",
      "title": "Global vs. Local Scope in Functions",
      "description": [
        "一个程序中有可能具有相同名称的<dfn>局部</dfn>变量 和<dfn>全局</dfn>变量。在这种情况下，<code>局部</code>变量将会优先于<code>全局</code>变量。",
        "下面为例：",
        "<blockquote>var someVar = \"Hat\";<br>function myFun() {<br>  var someVar = \"Head\";<br>  return someVar;<br>}</blockquote>",
        "函数<code>myFun</code>将会返回<code>\"Head\"</code>，因为<code>局部变量</code>优先级更高。",
        "<hr>",
        "给<code>myOutfit</code>添加一个局部变量来覆盖<code>outerWear</code>的值为<code>\"sweater\"</code>。"
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "var outerWear = \"T-Shirt\";\nfunction myOutfit() {\n  var outerWear = \"sweater\";\n  return outerWear;\n}"
      ],
      "tests": [
        {
          "text": "不要修改全局变量<code>outerWear</code>的值",
          "testString": "assert(outerWear === \"T-Shirt\", '不要修改全局变量<code>outerWear</code>的值');"
        },
        {
          "text": "<code>myOutfit</code>应该返回<code>\"sweater\"</code>",
          "testString": "assert(myOutfit() === \"sweater\", '<code>myOutfit</code>应该返回<code>\"sweater\"</code>');"
        },
        {
          "text": "不要修改<code>return</code>语句",
          "testString": "assert(/return outerWear/.test(code), '不要修改<code>return</code>语句');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// 初始化变量",
            "var outerWear = \"T-Shirt\";",
            "",
            "function myOutfit() {",
            "  // 请把你的代码写在这条注释以下",
            "  ",
            "  ",
            "  ",
            "  // 请把你的代码写在这条注释以上",
            "  return outerWear;",
            "}",
            "",
            "myOutfit();"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244c2",
      "title": "Return a Value from a Function with Return",
      "description": [
        "我们可以通过函数的<dfn>参数</dfn>把值传入函数，也可以使用<code>return</code>语句把数据从一个函数中传出来。",
        "<strong>示例</strong>",
        "<blockquote>function plusThree(num) {<br>  return num + 3;<br>}<br>var answer = plusThree(5); // 8</blockquote>",
        "<code>plusThree</code>带有一个<code>num</code>的<dfn>参数</dfn>并且返回（returns）一个等于<code>num + 3</code>的值。",
        "<hr>",
        "创建一个函数<code>timesFive</code>接收一个参数, 把它乘以<code>5</code>之后返回，关于如何测试timesFive 函数，可以参考编辑器中最后一行的示例。"
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "function timesFive(num) {\n  return num * 5;\n}\ntimesFive(10);"
      ],
      "tests": [
        {
          "text": "<code>timesFive</code>应是一个函数",
          "testString": "assert(typeof timesFive === 'function', '<code>timesFive</code>应是一个函数');"
        },
        {
          "text": "<code>timesFive(5)</code>应该返回<code>25</code>",
          "testString": "assert(timesFive(5) === 25, '<code>timesFive(5)</code>应该返回<code>25</code>');"
        },
        {
          "text": "<code>timesFive(2)</code>应该返回<code>10</code>",
          "testString": "assert(timesFive(2) === 10, '<code>timesFive(2)</code>应该返回<code>10</code>');"
        },
        {
          "text": "<code>timesFive(0)</code>应该返回<code>0</code>",
          "testString": "assert(timesFive(0) === 0, '<code>timesFive(0)</code>应该返回<code>0</code>');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// 示例",
            "function minusSeven(num) {",
            "  return num - 7;",
            "}",
            "",
            "// 请把你的代码写在这条注释以下",
            "",
            "",
            "",
            "console.log(minusSeven(10));"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "598e8944f009e646fc236146",
      "title": "Understanding Undefined Value returned from a Function",
      "description": [
        "函数一般用<code>return</code>语句来返回值，但这不是必须的。在函数没有<code>return</code>语句的情况下，当你调用它时，该函数会执行内部代码，返回的值是<code>undefined</code>。",
        "<strong>示例</strong>",
        "<blockquote>var sum = 0;<br>function addSum(num) {<br>&nbsp;&nbsp;sum = sum + num;<br>}<br>var returnedValue = addSum(3); // sum will be modified but returned value is undefined</blockquote>",
        "<code>addSum</code>是一个没有<code>return</code>语句的函数。该函数将更改全局变量<code>sum</code>，函数的返回值为<code>undefined</code>。",
        "<hr>",
        "创建一个没有任何参数的函数<code>addFive</code>。此函数使<code>sum</code>变量加 5，但其返回值是<code>undefined</code>。"
      ],
      "releasedOn": "August 11, 2017",
      "solutions": [
        "function addFive() {\n sum = sum + 5;\n}"
      ],
      "tests": [
        {
          "text": "<code>addFive</code>应该是一个函数",
          "testString": "assert(typeof addFive === 'function', '<code>addFive</code>应该是一个函数');"
        },
        {
          "text": "<code>sum</code>应该等于 8",
          "testString": "assert(sum === 8, '<code>sum</code>应该等于 8');"
        },
        {
          "text": "<code>addFive</code>的返回值应该是<code>undefined</code>",
          "testString": "assert(addFive() === undefined, '<code>addFive</code>的返回值应该是<code>undefined</code>');"
        },
        {
          "text": "Inside of your functions, add 5 to the <code>sum</code> variable",
          "testString": "assert(code.match(/(sum\\s*\\=\\s*sum\\s*\\+\\s*5)|(sum\\s*\\+\\=\\s*5)/g).length === 1, 'Inside of your functions, add 5 to the <code>sum</code> variable');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// 示例",
            "var sum = 0;",
            "function addThree() {",
            "  sum = sum + 3;",
            "}",
            "",
            "// 请把你的代码写在这条注释以下",
            "",
            "",
            "",
            "// 请把你的代码写在这条注释以上",
            "var returnedValue = addFive();"
          ],
          "head": [],
          "tail": [
            "var sum = 0;",
            "function addThree() {sum = sum + 3;}",
            "addThree();",
            "addFive();"
          ]
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244c3",
      "title": "Assignment with a Returned Value",
      "description": [
        "如果你还记得我们在这一节 <a href=\"javascript-algorithms-and-data-structures/basic-javascript/storing-values-with-the-assignment-operator\" target=\"_blank\">Storing Values with the Assignment Operator</a>,的讨论，赋值之前，先完成等号右边的操作。这意味着我们可把一个函数的返回值，赋值给一个变量。",
        "假设我们预先定义的函数<code>sum</code>其功能就是将两个数字相加，那么：",
        "<code>ourSum = sum(5, 12);</code>",
        "将调用<code>sum</code>函数，返回<code>return</code>了一个数值<code>17</code>，然后把它赋值给了<code>ourSum</code>变量。",
        "<hr>",
        "调用<code>processArg</code>函数并给参数一个值<code>7</code>，然后把返回的值赋值给变量<code>processed</code>。"
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "var processed = 0;\n\nfunction processArg(num) {\n  return (num + 3) / 5;\n}\n\nprocessed = processArg(7);"
      ],
      "tests": [
        {
          "text": "<code>processed</code>的值应该是<code>2</code>",
          "testString": "assert(processed === 2, '<code>processed</code>的值应该是<code>2</code>');"
        },
        {
          "text": "你应该把<code>processArg</code>的返回值赋给<code>processed</code>",
          "testString": "assert(/processed\\s*=\\s*processArg\\(\\s*7\\s*\\)\\s*;/.test(code), '你应该把<code>processArg</code>的返回值赋给<code>processed</code>');"
        }
      ],
      "challengeType": 1,
      "guideUrl": "https://guide.freecodecamp.org/certificates/assignment-with-a-returned-value",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// 示例",
            "var changed = 0;",
            "",
            "function change(num) {",
            "  return (num + 5) / 3;",
            "}",
            "",
            "changed = change(10);",
            "",
            "// 初始化变量",
            "var processed = 0;",
            "",
            "function processArg(num) {",
            "  return (num + 3) / 5;",
            "}",
            "",
            "// 请把你的代码写在这条注释以下",
            "",
            ""
          ],
          "head": [],
          "tail": [
            "(function(){return \"processed = \" + processed})();"
          ]
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244c6",
      "title": "Stand in Line",
      "description": [
        "在计算机科学中<dfn>队列</dfn>（queue）是一个抽象的数据结构，队列中的条目都是有秩序的。新的条目会被加到<code>队列</code>的末尾，旧的条目会从<code>队列</code>的头部被移出。",
        "写一个函数<code>nextInLine</code>，用一个数组(<code>arr</code>)和一个数字(<code>item</code>)作为参数。",
        "把数字添加到数组的结尾，然后移出数组的第一个元素。",
        "最后<code>nextInLine</code>函数应该返回被删除的元素。"
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "var testArr = [ 1,2,3,4,5];\n\nfunction nextInLine(arr, item) {\n    arr.push(item);\n    return arr.shift();\n}"
      ],
      "tests": [
        {
          "text": "<code>nextInLine([], 5)</code>应该返回一个数字",
          "testString": "assert.isNumber(nextInLine([],5), '<code>nextInLine([], 5)</code>应该返回一个数字');"
        },
        {
          "text": "<code>nextInLine([], 1)</code>应该返回<code>1</code>",
          "testString": "assert(nextInLine([],1) === 1, '<code>nextInLine([], 1)</code>应该返回<code>1</code>');"
        },
        {
          "text": "<code>nextInLine([2], 1)</code>应该返回<code>2</code>",
          "testString": "assert(nextInLine([2],1) === 2, '<code>nextInLine([2], 1)</code>应该返回<code>2</code>');"
        },
        {
          "text": "<code>nextInLine([5,6,7,8,9], 1)</code>应该返回<code>5</code>",
          "testString": "assert(nextInLine([5,6,7,8,9],1) === 5, '<code>nextInLine([5,6,7,8,9], 1)</code>应该返回<code>5</code>');"
        },
        {
          "text": "在<code>nextInLine(testArr, 10)</code>执行后<code>testArr[4]</code>应该是<code>10</code>",
          "testString": "nextInLine(testArr, 10); assert(testArr[4] === 10, '在<code>nextInLine(testArr, 10)</code>执行后<code>testArr[4]</code>应该是<code>10</code>');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function nextInLine(arr, item) {",
            "  // 请把你的代码写在这里",
            "  ",
            "  return item;  // 请修改这一行",
            "}",
            "",
            "// 初始化测试数据",
            "var testArr = [1,2,3,4,5];",
            "",
            "// 控制台输出",
            "console.log(\"Before: \" + JSON.stringify(testArr));",
            "console.log(nextInLine(testArr, 6)); // Modify this line to test",
            "console.log(\"After: \" + JSON.stringify(testArr));"
          ],
          "head": [
            "var logOutput = [];",
            "var originalConsole = console",
            "function capture() {",
            "    var nativeLog = console.log;",
            "    console.log = function (message) {",
            "        logOutput.push(message);",
            "        if(nativeLog.apply) {",
            "          nativeLog.apply(originalConsole, arguments);",
            "        } else {",
            "          var nativeMsg = Array.prototype.slice.apply(arguments).join(' ');",
            "          nativeLog(nativeMsg);",
            "        }",
            "    };",
            "}",
            "",
            "function uncapture() {",
            "  console.log = originalConsole.log;",
            "}",
            "",
            "capture();"
          ],
          "tail": [
            "uncapture();",
            "testArr = [1,2,3,4,5];",
            "(function() { return logOutput.join(\"\\n\");})();"
          ]
        }
      }
    },
    {
      "id": "bd7123c9c441eddfaeb5bdef",
      "title": "Understanding Boolean Values",
      "description": [
        "另一种数据类型是<dfn>布尔</dfn>（Boolean）。<code>布尔</code>值要么是<code>true</code>要么是<code>false</code>。它非常像电路开关，<code>true</code>是“开”，<code>false</code>是“关”。这两种状态是互斥的。",
        "<strong>注意</strong><br><code>Boolean</code>值绝不会写被引号包裹起来的形式。<code>字符串</code>的<code>\"true\"</code>和<code>\"false\"</code>不是<code>布尔值</code>，在 JavaScript 中也没有特殊含义。",
        "<hr>",
        "修改<code>welcomeToBooleans</code>函数，让它返回<code>true</code>而不是<code>false</code>。"
     ],
      "solutions": [
        "function welcomeToBooleans() {\n  return true; // 请修改这一行\n}"
      ],
      "tests": [
        {
          "text": "<code>welcomeToBooleans()</code>函数应该返回一个布尔值 &#40;true/false&#41; ",
          "testString": "assert(typeof welcomeToBooleans() === 'boolean', '<code>welcomeToBooleans()</code>函数应该返回一个布尔值 &#40;true/false&#41; ');"
        },
        {
          "text": "<code>welcomeToBooleans()</code>应该返回 true",
          "testString": "assert(welcomeToBooleans() === true, '<code>welcomeToBooleans()</code>应该返回 true');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function welcomeToBooleans() {",
            "",
            "// 请把你的代码写在这条注释以下",
            "",
            "return false; // 请修改这一行",
            "",
            "// 请把你的代码写在这条注释以上.",
            "}"
          ],
          "head": [],
          "tail": [
            "welcomeToBooleans();"
          ]
        }
      }
    },
    {
      "id": "cf1111c1c12feddfaeb3bdef",
      "title": "Use Conditional Logic with If Statements",
      "description": [
        "<code>If</code>语句用于在代码中做条件判断。关键字<code>if</code>告诉 JavaScript 在小括号中的条件为真的情况下去执行定义在大括号里面的代码。这种条件被称为<code>Boolean</code>条件，因为他们只可能是<code>true</code>（真）或<code>false</code>（假）。",
        "当条件的计算结果为<code>true</code>，程序执行大括号内的语句。当布尔条件的计算结果为<code>false</code>，大括号内的代码将不会执行。",
        "<strong>伪代码</strong>",
        "<blockquote>if(<i>条件为真</i>){<br>  <i>语句被执行</i><br>}</blockquote>",
        "<strong>示例</strong>",
        "<blockquote>function test (myCondition) {<br>  if (myCondition) {<br>     return \"It was true\";<br>  }<br>  return \"It was false\";<br>}<br>test(true);  // 返回 \"It was true\"<br>test(false); // 返回 \"It was false\"</blockquote>",
        "当<code>test</code>被调用，并且传递进来的参数值为<code>true</code>，<code>if</code>语句会计算<code>myCondition</code>的结果，看它是真还是假。如果条件为<code>true</code>，函数会返回<code>\"It was true\"</code>。当<code>test</code>被调用，并且传递进来的参数值为<code>false</code>，<code>myCondition</code><em>不</em> 为<code>true</code>，并且不执行大括号后面的语句，函数返回<code>\"It was false\"</code>。",
        "<hr>",
        "在函数内部创建一个<code>if</code>语句，如果该参数<code>wasThatTrue</code>值为<code>true</code>，返回<code>\"That was true\"</code>，否则，并返回<code>\"That was false\"</code>。"
      ],
      "solutions": [
        "function trueOrFalse(wasThatTrue) {\n  if (wasThatTrue) {\n    return \"Yes, that was true\";\n  }\n  return \"No, that was false\";\n}"
      ],
      "tests": [
        {
          "text": "<code>trueOrFalse</code>应该是一个函数",
          "testString": "assert(typeof trueOrFalse === \"function\", '<code>trueOrFalse</code>应该是一个函数');"
        },
        {
          "text": "<code>trueOrFalse(true)</code>应该返回一个字符串",
          "testString": "assert(typeof trueOrFalse(true) === \"string\", '<code>trueOrFalse(true)</code>应该返回一个字符串');"
        },
        {
          "text": "<code>trueOrFalse(false)</code>应该返回一个字符串",
          "testString": "assert(typeof trueOrFalse(false) === \"string\", '<code>trueOrFalse(false)</code>应该返回一个字符串');"
        },
        {
          "text": "<code>trueOrFalse(true)</code>应该返回 \"Yes, that was true\"",
          "testString": "assert(trueOrFalse(true) === \"Yes, that was true\", '<code>trueOrFalse(true)</code>应该返回 \"Yes, that was true\"');"
        },
        {
          "text": "<code>trueOrFalse(false)</code>应该返回 \"No, that was false\"",
          "testString": "assert(trueOrFalse(false) === \"No, that was false\", '<code>trueOrFalse(false)</code>应该返回 \"No, that was false\"');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// 示例",
            "function ourTrueOrFalse(isItTrue) {",
            "  if (isItTrue) { ",
            "    return \"Yes, it's true\";",
            "  }",
            "  return \"No, it's false\";",
            "}",
            "",
            "// 初始化变量",
            "function trueOrFalse(wasThatTrue) {",
            "",
            "  // 请把你的代码写在这条注释以下",
            "  ",
            "  ",
            "  ",
            "  // 请把你的代码写在这条注释以上.",
            "",
            "}",
            "",
            "// 你可以修改这一行来测试你的代码",
            "trueOrFalse(true);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244d0",
      "title": "Comparison with the Equality Operator",
      "description": [
        "在 JavaScript 中，有很多<dfn>相互比较的操作</dfn>。所有这些操作符都返回一个<code>true</code>或<code>false</code>值。",
        "最基本的运算符是相等运算符：<code>==</code>。相等运算符比较两个值，如果它们是同等，返回<code>true</code>，如果它们不等，返回<code>false</code>。值得注意的是相等运算符不同于赋值运算符（<code>=</code>），赋值运算符是把等号右边的值赋给左边的变量。",
        "<blockquote>function equalityTest(myVal) {<br>  if (myVal == 10) {<br>     return \"Equal\";<br>  }<br>  return \"Not Equal\";<br>}</blockquote>",
        "如果<code>myVal</code>等于<code>10</code>，相等运算符会返回<code>true</code>，因此大括号里面的代码会被执行，函数将返回<code>\"Equal\"</code>。否则，函数返回<code>\"Not Equal\"</code>。",
        "在 JavaScript 中，为了让两个不同的<code>数据类型</code>（例如<code>数字</code>和<code>字符串</code>）的值可以作比较，它必须把一种类型转换为另一种类型。然而一旦这样做，它可以像下面这样来比较：",
        "<blockquote>   1   ==  1    // true<br>   1   ==  2    // false<br>   1   == '1'   // true<br>  \"3\"  ==  3    // true</blockquote>",
        "<hr>",
        "把<code>相等运算符</code>添加到指定的行，这样当<code>val</code>的值为<code>12</code>的时候，函数会返回\"Equal\"。"
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "function testEqual(val) {\n  if (val == 12) {\n    return \"Equal\";\n  }\n  return \"Not Equal\";\n}"
      ],
      "tests": [
        {
          "text": "<code>testEqual(10)</code>应该返回 \"Not Equal\"",
          "testString": "assert(testEqual(10) === \"Not Equal\", '<code>testEqual(10)</code>应该返回 \"Not Equal\"');"
        },
        {
          "text": "<code>testEqual(12)</code>应该返回 \"Equal\"",
          "testString": "assert(testEqual(12) === \"Equal\", '<code>testEqual(12)</code>应该返回 \"Equal\"');"
        },
        {
          "text": "<code>testEqual(\"12\")</code>应该返回 \"Equal\"",
          "testString": "assert(testEqual(\"12\") === \"Equal\", '<code>testEqual(\"12\")</code>应该返回 \"Equal\"');"
        },
        {
          "text": "你应该使用<code>==</code>运算符",
          "testString": "assert(code.match(/==/g) && !code.match(/===/g), '你应该使用<code>==</code>运算符');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// 初始化变量",
            "function testEqual(val) {",
            "  if (val) { // 请修改这一行",
            "    return \"Equal\";",
            "  }",
            "  return \"Not Equal\";",
            "}",
            "",
            "// 你可以修改这一行来测试你的代码",
            "testEqual(10);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244d1",
      "title": "Comparison with the Strict Equality Operator",
      "description": [
        "严格相等运算符（<code>===</code>）是相对相等操作符（<code>==</code>）的另一种比较操作符。与相等操作符不同的是，它会同时比较元素的值和<code>数据类型</code>。",
        "<strong>示例</strong>",
        "<blockquote>3 === 3   // true<br>3 === '3' // false</blockquote>",
        "<code>3</code>是一个<code>数字</code>类型的，而<code>'3'</code>是一个<code>字符串</code>类型的，所以 3 不全等于 '3'。",
        "<hr>",
        "在<code>if</code>语句值使用严格相等运算符，这样当<code>val</code>严格等于7的时候，函数会返回\"Equal\"。"
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "function testStrict(val) {\n  if (val === 7) {\n    return \"Equal\";\n  }\n  return \"Not Equal\";\n}"
      ],
      "tests": [
        {
          "text": "<code>testStrict(10)</code>应该返回 \"Not Equal\"",
          "testString": "assert(testStrict(10) === \"Not Equal\", '<code>testStrict(10)</code>应该返回 \"Not Equal\"');"
        },
        {
          "text": "<code>testStrict(7)</code>应该返回 \"Equal\"",
          "testString": "assert(testStrict(7) === \"Equal\", '<code>testStrict(7)</code>应该返回 \"Equal\"');"
        },
        {
          "text": "<code>testStrict(\"7\")</code>应该返回 \"Not Equal\"",
          "testString": "assert(testStrict(\"7\") === \"Not Equal\", '<code>testStrict(\"7\")</code>应该返回 \"Not Equal\"');"
        },
        {
          "text": "你应该使用<code>===</code>运算符",
          "testString": "assert(code.match(/(val\\s*===\\s*\\d+)|(\\d+\\s*===\\s*val)/g).length > 0, '你应该使用<code>===</code>运算符');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// 初始化变量",
            "function testStrict(val) {",
            "  if (val) { // 请修改这一行",
            "    return \"Equal\";",
            "  }",
            "  return \"Not Equal\";",
            "}",
            "",
            "// 你可以修改这一行来测试你的代码",
            "testStrict(10);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "599a789b454f2bbd91a3ff4d",
      "title": "Practice comparing different values",
      "description": [
        "在上两个挑战中，我们学习了相等运算符 (<code>==</code>) 和严格相等运算符 (<code>===</code>)。让我们快速回顾并实践一下。",
        "如果要比较的值不是同一类型，则相等运算符将执行类型转换，然后计算值。严格相等运算符则直接比较数据类型和值，不会进行类型换。",
        "<strong>示例</strong>",
        "<blockquote>3 == '3'  // 返回 true，因为 JavaScript 会执行类型转换把字符串 '3' 转化成数字<br>3 === '3' // 返回 false，因为类型不同，而这里不会进行类型转换</blockquote>",
        "<strong>提示</strong><br>在JavaScript中，您可以使用<code>typeof</code>运算符确定变量的类型或值，如下所示：",
        "<blockquote>typeof 3   // 返回 'number'<br>typeof '3' // 返回 'string'</blockquote>",
        "<hr>",
        "编辑器中的<code>compareEquality</code>函数使用相等运算符比较两个值。修改函数，使其仅在值严格相等时返回 \"Equal\" 。"
      ],
      "releasedOn": "August 21, 2017",
      "solutions": [
        "function compareEquality(a,b) {\n  if (a === b) {\n    return \"Equal\";\n  }\n  return \"Not Equal\";\n}"
      ],
      "tests": [
        {
          "text": "<code>compareEquality(10, \"10\")</code>应该返回 \"Not Equal\"",
          "testString": "assert(compareEquality(10, \"10\") === \"Not Equal\", '<code>compareEquality(10, \"10\")</code>应该返回 \"Not Equal\"');"
        },
        {
          "text": "<code>compareEquality(\"20\", 20)</code>应该返回 \"Not Equal\"",
          "testString": "assert(compareEquality(\"20\", 20) === \"Not Equal\", '<code>compareEquality(\"20\", 20)</code>应该返回 \"Not Equal\"');"
        },
        {
          "text": "你应该使用 <code>===</code> 运算符",
          "testString": "assert(code.match(/===/g), '你应该使用<code>===</code>运算符');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// 初始化变量",
            "function compareEquality(a, b) {",
            "  if (a == b) { // 请修改这一行",
            "    return \"Equal\";",
            "  }",
            "  return \"Not Equal\";",
            "}",
            "",
            "// 你可以修改这一行来测试你的代码",
            "compareEquality(10, \"10\");"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244d2",
      "title": "Comparison with the Inequality Operator",
      "description": [
        "不相等运算符（<code>!=</code>）与相等运算符是相反的。这意味着不相等运算符中，如果“不为真”并且返回<code>false</code>的地方，在相等运算符中会返回<code>true</code>，<em>反之亦然</em>。与相等运算符类似，不相等运算符在比较的时候也会转换值的数据类型。",
        "<strong>例如</strong>",
        "<blockquote>1 != 2      // true<br>1 != \"1\"    // false<br>1 != '1'    // false<br>1 != true   // false<br>0 != false  // false</blockquote>",
        "<hr>",
        "在<code>if</code>语句中，添加不相等运算符<code>!=</code>，这样函数在当<code>val</code>不等于 <code>99</code>的时候，会返回 \"Not Equal\"。"
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "function testNotEqual(val) {\n  if (val != 99) {\n    return \"Not Equal\";\n  }\n  return \"Equal\";\n}"
      ],
      "tests": [
        {
          "text": "<code>testNotEqual(99)</code>应该返回 \"Equal\"",
          "testString": "assert(testNotEqual(99) === \"Equal\", '<code>testNotEqual(99)</code>应该返回 \"Equal\"');"
        },
        {
          "text": "<code>testNotEqual(\"99\")</code>应该返回 \"Equal\"",
          "testString": "assert(testNotEqual(\"99\") === \"Equal\", '<code>testNotEqual(\"99\")</code>应该返回 \"Equal\"');"
        },
        {
          "text": "<code>testNotEqual(12)</code>应该返回 \"Not Equal\"",
          "testString": "assert(testNotEqual(12) === \"Not Equal\", '<code>testNotEqual(12)</code>应该返回 \"Not Equal\"');"
        },
        {
          "text": "<code>testNotEqual(\"12\")</code>应该返回 \"Not Equal\"",
          "testString": "assert(testNotEqual(\"12\") === \"Not Equal\", '<code>testNotEqual(\"12\")</code>应该返回 \"Not Equal\"');"
        },
        {
          "text": "<code>testNotEqual(\"bob\")</code>应该返回 \"Not Equal\"",
          "testString": "assert(testNotEqual(\"bob\") === \"Not Equal\", '<code>testNotEqual(\"bob\")</code>应该返回 \"Not Equal\"');"
        },
        {
          "text": "你应该使用<code>!=</code>运算符",
          "testString": "assert(code.match(/(?!!==)!=/), '你应该使用<code>!=</code>运算符');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// 初始化变量",
            "function testNotEqual(val) {",
            "  if (val) { // 请修改这一行",
            "    return \"Not Equal\";",
            "  }",
            "  return \"Equal\";",
            "}",
            "",
            "// 你可以修改这一行来测试你的代码",
            "testNotEqual(10);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244d3",
      "title": "Comparison with the Strict Inequality Operator",
      "description": [
        "严格不相等运算符（<code>!==</code>）与全等运算符是相反的。这意味着严格不相等并返回<code>false</code>的地方，用严格相等运算符会返回<code>true</code>，<em>反之亦然</em>。严格相等运算符不会转换值的数据类型。",
        "<strong>示例</strong>",
        "<blockquote>3 !== 3   // false<br>3 !== '3' // true<br>4 !== 3   // true</blockquote>",
        "<hr>",
        "在<code>if</code>语句中，添加严格不相等运算符<code>!==</code>，这样如果<code>val</code>与<code>17</code>严格不相等的时候，函数会返回 \"Not Equal\"。"
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "function testStrictNotEqual(val) {\n  if (val !== 17) {\n    return \"Not Equal\";\n  }\n  return \"Equal\";\n}"
      ],
      "MDNlinks": [
        "Strict Inequality Operator"
      ],
      "tests": [
        {
          "text": "<code>testStrictNotEqual(17)</code>应该返回 \"Equal\"",
          "testString": "assert(testStrictNotEqual(17) === \"Equal\", '<code>testStrictNotEqual(17)</code>应该返回 \"Equal\"');"
        },
        {
          "text": "<code>testStrictNotEqual(\"17\")</code>应该返回 \"Not Equal\"",
          "testString": "assert(testStrictNotEqual(\"17\") === \"Not Equal\", '<code>testStrictNotEqual(\"17\")</code>应该返回 \"Not Equal\"');"
        },
        {
          "text": "<code>testStrictNotEqual(12)</code>应该返回 \"Not Equal\"",
          "testString": "assert(testStrictNotEqual(12) === \"Not Equal\", '<code>testStrictNotEqual(12)</code>应该返回 \"Not Equal\"');"
        },
        {
          "text": "<code>testStrictNotEqual(\"bob\")</code>应该返回 \"Not Equal\"",
          "testString": "assert(testStrictNotEqual(\"bob\") === \"Not Equal\", '<code>testStrictNotEqual(\"bob\")</code>应该返回 \"Not Equal\"');"
        },
        {
          "text": "You should use the <code>!==</code> operator",
          "testString": "assert(code.match(/(val\\s*!==\\s*\\d+)|(\\d+\\s*!==\\s*val)/g).length > 0, '你应该使用<code>!==</code>运算符');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// 初始化变量",
            "function testStrictNotEqual(val) {",
            "  // 请把你的代码写在这条注释以下",
            "  ",
            "  if (val) {",
            "",
            "  // 请把你的代码写在这条注释以上",
            "",
            "    return \"Not Equal\";",
            "  }",
            "  return \"Equal\";",
            "}",
            "",
            "// 你可以修改这一行来测试你的代码",
            "testStrictNotEqual(10);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244d4",
      "title": "Comparison with the Greater Than Operator",
      "description": [
        "使用大于运算符（<code>&gt;</code>）来比较两个数字。如果大于运算符左边的数字大于右边的数字，将会返回<code>true</code>。否则，它返回<code>false</code>。",
        "与相等运算符一样，大于运算符在比较的时候，会转换值的数据类型。",
        "<strong>例如</strong>",
        "<blockquote> 5 > 3   // true<br> 7 > '3' // true<br> 2 > 3   // false<br>'1' > 9  // false</blockquote>",
        "<hr>",
        "添加<code>大于</code>运算符到指定的行，使得返回的语句是有意义的。"
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "function testGreaterThan(val) {\n  if (val > 100) {  // 请修改这一行\n    return \"Over 100\";\n  }\n  if (val > 10) {  // 请修改这一行\n    return \"Over 10\";\n  }\n  return \"10 or Under\";\n}"
      ],
      "tests": [
        {
          "text": "<code>testGreaterThan(0)</code>应该返回 \"10 or Under\"",
          "testString": "assert(testGreaterThan(0) === \"10 or Under\", '<code>testGreaterThan(0)</code>应该返回 \"10 or Under\"');"
        },
        {
          "text": "<code>testGreaterThan(10)</code>应该返回 \"10 or Under\"",
          "testString": "assert(testGreaterThan(10) === \"10 or Under\", '<code>testGreaterThan(10)</code>应该返回 \"10 or Under\"');"
        },
        {
          "text": "<code>testGreaterThan(11)</code>应该返回 \"Over 10\"",
          "testString": "assert(testGreaterThan(11) === \"Over 10\", '<code>testGreaterThan(11)</code>应该返回 \"Over 10\"');"
        },
        {
          "text": "<code>testGreaterThan(99)</code>应该返回 \"Over 10\"",
          "testString": "assert(testGreaterThan(99) === \"Over 10\", '<code>testGreaterThan(99)</code>应该返回 \"Over 10\"');"
        },
        {
          "text": "<code>testGreaterThan(100)</code>应该返回 \"Over 10\"",
          "testString": "assert(testGreaterThan(100) === \"Over 10\", '<code>testGreaterThan(100)</code>应该返回 \"Over 10\"');"
        },
        {
          "text": "<code>testGreaterThan(101)</code>应该返回 \"Over 100\"",
          "testString": "assert(testGreaterThan(101) === \"Over 100\", '<code>testGreaterThan(101)</code>应该返回 \"Over 100\"');"
        },
        {
          "text": "<code>testGreaterThan(150)</code>应该返回 \"Over 100\"",
          "testString": "assert(testGreaterThan(150) === \"Over 100\", '<code>testGreaterThan(150)</code>应该返回 \"Over 100\"');"
        },
        {
          "text": "你应该使用<code>&gt;</code>运算符至少两次",
          "testString": "assert(code.match(/val\\s*>\\s*('|\")*\\d+('|\")*/g).length > 1, '你应该使用<code>&gt;</code>运算符至少两次');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function testGreaterThan(val) {",
            "  if (val) {  // 请修改这一行",
            "    return \"Over 100\";",
            "  }",
            "  ",
            "  if (val) {  // 请修改这一行",
            "    return \"Over 10\";",
            "  }",
            "",
            "  return \"10 or Under\";",
            "}",
            "",
            "// 你可以修改这一行来测试你的代码",
            "testGreaterThan(10);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244d5",
      "title": "Comparison with the Greater Than Or Equal To Operator",
      "description": [
        "使用<code>大于等于</code>运算符（<code>&gt;=</code>）来比较两个数字的大小。如果大于等于运算符左边的数字比右边的数字大或者相等，它会返回<code>true</code>。否则，它会返回<code>false</code>。",
        "与相等运算符相似，<code>大于等于</code>运算符在比较的时候会转换值的数据类型。",
        "<strong>例如</strong>",
        "<blockquote> 6  >=  6  // true<br> 7  >= '3' // true<br> 2  >=  3  // false<br>'7' >=  9  // false</blockquote>",
        "<hr>",
        "添加<code>大于等于</code>运算符到指定行，使得函数的返回语句有意义。"
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "function testGreaterOrEqual(val) {\n  if (val >= 20) {  // 请修改这一行\n    return \"20 or Over\";\n  }\n  \n  if (val >= 10) {  // 请修改这一行\n    return \"10 or Over\";\n  }\n\n  return \"Less than 10\";\n}"
      ],
      "tests": [
        {
          "text": "<code>testGreaterOrEqual(0)</code>应该返回 \"Less than 10\"",
          "testString": "assert(testGreaterOrEqual(0) === \"Less than 10\", '<code>testGreaterOrEqual(0)</code>应该返回 \"Less than 10\"');"
        },
        {
          "text": "<code>testGreaterOrEqual(9)</code>应该返回 \"Less than 10\"",
          "testString": "assert(testGreaterOrEqual(9) === \"Less than 10\", '<code>testGreaterOrEqual(9)</code>应该返回 \"Less than 10\"');"
        },
        {
          "text": "<code>testGreaterOrEqual(10)</code>应该返回 \"10 or Over\"",
          "testString": "assert(testGreaterOrEqual(10) === \"10 or Over\", '<code>testGreaterOrEqual(10)</code>应该返回 \"10 or Over\"');"
        },
        {
          "text": "<code>testGreaterOrEqual(11)</code>应该返回 \"10 or Over\"",
          "testString": "assert(testGreaterOrEqual(11) === \"10 or Over\", '<code>testGreaterOrEqual(11)</code>应该返回 \"10 or Over\"');"
        },
        {
          "text": "<code>testGreaterOrEqual(19)</code>应该返回 \"10 or Over\"",
          "testString": "assert(testGreaterOrEqual(19) === \"10 or Over\", '<code>testGreaterOrEqual(19)</code>应该返回 \"10 or Over\"');"
        },
        {
          "text": "<code>testGreaterOrEqual(100)</code>应该返回 \"20 or Over\"",
          "testString": "assert(testGreaterOrEqual(100) === \"20 or Over\", '<code>testGreaterOrEqual(100)</code>应该返回 \"20 or Over\"');"
        },
        {
          "text": "<code>testGreaterOrEqual(21)</code>应该返回 \"20 or Over\"",
          "testString": "assert(testGreaterOrEqual(21) === \"20 or Over\", '<code>testGreaterOrEqual(21)</code>应该返回 \"20 or Over\"');"
        },
        {
          "text": "你应该使用<code>&gt;=</code>运算符至少两次",
          "testString": "assert(code.match(/val\\s*>=\\s*('|\")*\\d+('|\")*/g).length > 1, '你应该使用<code>&gt;=</code>运算符至少两次');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function testGreaterOrEqual(val) {",
            "  if (val) {  // 请修改这一行",
            "    return \"20 or Over\";",
            "  }",
            "  ",
            "  if (val) {  // 请修改这一行",
            "    return \"10 or Over\";",
            "  }",
            "",
            "  return \"Less than 10\";",
            "}",
            "",
            "// 你可以修改这一行来测试你的代码",
            "testGreaterOrEqual(10);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244d6",
      "title": "Comparison with the Less Than Operator",
      "description": [
        "使用<dfn>小于</dfn>运算符（<code>&lt;</code>）比较两个数字的大小。如果小于运算符左边的数字比右边的数字小，它会返回<code>true</code>。否则，他会返回<code>false</code>。与相等运算符类似，<dfn>小于</dfn> 运算符在做比较的时候会转换值的数据类型。",
        "<strong>例如</strong>",
        "<blockquote>  2 &lt; 5  // true<br>'3' &lt; 7  // true<br>  5 &lt; 5  // false<br>  3 &lt; 2  // false<br>'8' &lt; 4  // false</blockquote>",
        "<hr>",
        "添加<code>小于</code>运算符到指定行，使得函数的返回语句有意义。"
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "function testLessThan(val) {\n  if (val < 25) {  // 请修改这一行\n    return \"Under 25\";\n  }\n  \n  if (val < 55) {  // 请修改这一行\n    return \"Under 55\";\n  }\n\n  return \"55 or Over\";\n}"
      ],
      "tests": [
        {
          "text": "<code>testLessThan(0)</code>应该返回 \"Under 25\"",
          "testString": "assert(testLessThan(0) === \"Under 25\", '<code>testLessThan(0)</code>应该返回 \"Under 25\"');"
        },
        {
          "text": "<code>testLessThan(24)</code>应该返回 \"Under 25\"",
          "testString": "assert(testLessThan(24) === \"Under 25\", '<code>testLessThan(24)</code>应该返回 \"Under 25\"');"
        },
        {
          "text": "<code>testLessThan(25)</code>应该返回 \"Under 55\"",
          "testString": "assert(testLessThan(25) === \"Under 55\", '<code>testLessThan(25)</code>应该返回 \"Under 55\"');"
        },
        {
          "text": "<code>testLessThan(54)</code>应该返回 \"Under 55\"",
          "testString": "assert(testLessThan(54) === \"Under 55\", '<code>testLessThan(54)</code>应该返回 \"Under 55\"');"
        },
        {
          "text": "<code>testLessThan(55)</code>应该返回 \"55 or Over\"",
          "testString": "assert(testLessThan(55) === \"55 or Over\", '<code>testLessThan(55)</code>应该返回 \"55 or Over\"');"
        },
        {
          "text": "<code>testLessThan(99)</code>应该返回 \"55 or Over\"",
          "testString": "assert(testLessThan(99) === \"55 or Over\", '<code>testLessThan(99)</code>应该返回 \"55 or Over\"');"
        },
        {
          "text": "你应该使用<code>&lt;</code>运算符至少两次",
          "testString": "assert(code.match(/val\\s*<\\s*('|\")*\\d+('|\")*/g).length > 1, '你应该使用<code>&lt;</code>运算符至少两次');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function testLessThan(val) {",
            "  if (val) {  // 请修改这一行",
            "    return \"Under 25\";",
            "  }",
            "  ",
            "  if (val) {  // 请修改这一行",
            "    return \"Under 55\";",
            "  }",
            "",
            "  return \"55 or Over\";",
            "}",
            "",
            "// 你可以修改这一行来测试你的代码",
            "testLessThan(10);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244d7",
      "title": "Comparison with the Less Than Or Equal To Operator",
      "description": [
        "使用<code>小于等于</code>运算符（<code>&lt;=</code>）比较两个数字的大小。如果在小于等于运算符，左边的数字小于或者等于右边的数字，它会返回<code>true</code>。如果在小于等于运算符，左边的数字大于或者等于右边的数字，它会返回<code>false</code>。与相等运算符类型，<code>小于等于</code>运算符会转换数据类型。",
        "<strong>例如</strong>",
        "<blockquote>  4 &lt;= 5  // true<br>'7' &lt;= 7  // true<br>  5 &lt;= 5  // true<br>  3 &lt;= 2  // false<br>'8' &lt;= 4  // false</blockquote>",
        "<hr>",
        "添加<code>小于等于</code>运算符到指定行，使得函数的返回语句有意义。"
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "function testLessOrEqual(val) {\n  if (val <= 12) {  // 请修改这一行\n    return \"Smaller Than or Equal to 12\";\n  }\n  \n  if (val <= 24) {  // 请修改这一行\n    return \"Smaller Than or Equal to 24\";\n  }\n\n  return \"More Than 24\";\n}"
      ],
      "tests": [
        {
          "text": "<code>testLessOrEqual(0)</code>应该返回 \"Smaller Than or Equal to 12\"",
          "testString": "assert(testLessOrEqual(0) === \"Smaller Than or Equal to 12\", '<code>testLessOrEqual(0)</code>应该返回 \"Smaller Than or Equal to 12\"');"
        },
        {
          "text": "<code>testLessOrEqual(11)</code>应该返回 \"Smaller Than or Equal to 12\"",
          "testString": "assert(testLessOrEqual(11) === \"Smaller Than or Equal to 12\", '<code>testLessOrEqual(11)</code>应该返回 \"Smaller Than or Equal to 12\"');"
        },
        {
          "text": "<code>testLessOrEqual(12)</code>应该返回 \"Smaller Than or Equal to 12\"",
          "testString": "assert(testLessOrEqual(12) === \"Smaller Than or Equal to 12\", '<code>testLessOrEqual(12)</code>应该返回 \"Smaller Than or Equal to 12\"');"
        },
        {
          "text": "<code>testLessOrEqual(23)</code>应该返回 \"Smaller Than or Equal to 24\"",
          "testString": "assert(testLessOrEqual(23) === \"Smaller Than or Equal to 24\", '<code>testLessOrEqual(23)</code>应该返回 \"Smaller Than or Equal to 24\"');"
        },
        {
          "text": "<code>testLessOrEqual(24)</code>应该返回 \"Smaller Than or Equal to 24\"",
          "testString": "assert(testLessOrEqual(24) === \"Smaller Than or Equal to 24\", '<code>testLessOrEqual(24)</code>应该返回 \"Smaller Than or Equal to 24\"');"
        },
        {
          "text": "<code>testLessOrEqual(25)</code>应该返回 \"More Than 24\"",
          "testString": "assert(testLessOrEqual(25) === \"More Than 24\", '<code>testLessOrEqual(25)</code>应该返回 \"More Than 24\"');"
        },
        {
          "text": "<code>testLessOrEqual(55)</code>应该返回 \"More Than 24\"",
          "testString": "assert(testLessOrEqual(55) === \"More Than 24\", '<code>testLessOrEqual(55)</code>应该返回 \"More Than 24\"');"
        },
        {
          "text": "你应该使用<code>&lt;=</code>运算符至少两",
          "testString": "assert(code.match(/val\\s*<=\\s*('|\")*\\d+('|\")*/g).length > 1, '你应该使用<code>&lt;=</code>运算符至少两');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function testLessOrEqual(val) {",
            "  if (val) {  // 请修改这一行",
            "    return \"Smaller Than or Equal to 12\";",
            "  }",
            "  ",
            "  if (val) {  // 请修改这一行",
            "    return \"Smaller Than or Equal to 24\";",
            "  }",
            "",
            "  return \"More Than 24\";",
            "}",
            "",
            "// 你可以修改这一行来测试你的代码",
            "testLessOrEqual(10);",
            ""
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244d8",
      "title": "Comparisons with the Logical And Operator",
      "description": [
        "有时你需要在一次判断中做多个操作。当且仅当运算符的左边和右边都是<code>true</code>，<dfn>逻辑与</dfn> 运算符（<code>&&</code>）才会返回<code>true</code>。",
        "同样的效果可以通过 if 语句的嵌套来实现：",
        "<blockquote>if (num > 5) {<br>  if (num < 10) {<br>    return \"Yes\";<br>  }<br>}<br>return \"No\";</blockquote>",
        "只有当<code>num</code>的值在 6 和 9 之间（包括 6 和 9）才会返回 \"Yes\"。相同的逻辑可被写为：",
        "<blockquote>if (num > 5 && num < 10) {<br>  return \"Yes\";<br>}<br>return \"No\";</blockquote>",
        "<hr>",
        "结合两个 if 语句为一个语句，如果<code>val</code>小于或等于<code>50</code>并且大于或等于<code>25</code>，返回<code>\"Yes\"</code>。否则，将返回<code>\"No\"</code>。"
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "function testLogicalAnd(val) {\n  if (val >= 25 && val <= 50) {\n    return \"Yes\";\n  }\n  return \"No\";\n}"
      ],
      "tests": [
        {
          "text": "你应该使用<code>&&</code>运算符一次",
          "testString": "assert(code.match(/&&/g).length === 1, '你应该使用<code>&&</code>运算符一次');"
        },
        {
          "text": "你应该只有一个<code>if</code>表达式",
          "testString": "assert(code.match(/if/g).length === 1, '你应该只有一个<code>if</code>表达式');"
        },
        {
          "text": "<code>testLogicalAnd(0)</code>应该返回 \"No\"",
          "testString": "assert(testLogicalAnd(0) === \"No\", '<code>testLogicalAnd(0)</code>应该返回 \"No\"');"
        },
        {
          "text": "<code>testLogicalAnd(24)</code>应该返回 \"No\"",
          "testString": "assert(testLogicalAnd(24) === \"No\", '<code>testLogicalAnd(24)</code>应该返回 \"No\"');"
        },
        {
          "text": "<code>testLogicalAnd(25)</code>应该返回 \"Yes\"",
          "testString": "assert(testLogicalAnd(25) === \"Yes\", '<code>testLogicalAnd(25)</code>应该返回 \"Yes\"');"
        },
        {
          "text": "<code>testLogicalAnd(30)</code>应该返回 \"Yes\"",
          "testString": "assert(testLogicalAnd(30) === \"Yes\", '<code>testLogicalAnd(30)</code>应该返回 \"Yes\"');"
        },
        {
          "text": "<code>testLogicalAnd(50)</code>应该返回 \"Yes\"",
          "testString": "assert(testLogicalAnd(50) === \"Yes\", '<code>testLogicalAnd(50)</code>应该返回 \"Yes\"');"
        },
        {
          "text": "<code>testLogicalAnd(51)</code>应该返回 \"No\"",
          "testString": "assert(testLogicalAnd(51) === \"No\", '<code>testLogicalAnd(51)</code>应该返回 \"No\"');"
        },
        {
          "text": "<code>testLogicalAnd(75)</code>应该返回 \"No\"",
          "testString": "assert(testLogicalAnd(75) === \"No\", '<code>testLogicalAnd(75)</code>应该返回 \"No\"');"
        },
        {
          "text": "<code>testLogicalAnd(80)</code>应该返回 \"No\"",
          "testString": "assert(testLogicalAnd(80) === \"No\", '<code>testLogicalAnd(80)</code>应该返回 \"No\"');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function testLogicalAnd(val) {",
            "  // 请把你的代码写在这条注释以下",
            "",
            "  if (val) {",
            "    if (val) {",
            "      return \"Yes\";",
            "    }",
            "  }",
            "",
            "  // 请把你的代码写在这条注释以上",
            "  return \"No\";",
            "}",
            "",
            "// 你可以修改这一行来测试你的代码",
            "testLogicalAnd(10);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244d9",
      "title": "Comparisons with the Logical Or Operator",
      "description": [
        "如果任何一个操作数是<code>true</code>，<dfn>逻辑或</dfn> 运算符 (<code>||</code>) 返回<code>true</code>。反之，返回<code>false</code>。",
        "<dfn>logical or</dfn>逻辑或运算符由两个管道符号（|）组成。这个按键通常可以在 Backspace 和 Enter 键之间。",
        "下面这样的语句你应该很熟悉：",
        "<blockquote>if (num > 10) {<br>&nbsp;&nbsp;return \"No\";<br>}<br>if (num < 5) {<br>&nbsp;&nbsp;return \"No\";<br>}<br>return \"Yes\";</blockquote>",
        "只有当<code>num</code>大于等于 5 或小于等于 10 时，函数返回\"Yes\"。相同的逻辑可以简写成：",
        "<blockquote>if (num > 10 || num < 5) {<br>  return \"No\";<br>}<br>return \"Yes\";</blockquote>",
        "<hr>",
        "结合两个 if 语句为一个语句，如果<code>val</code>不在 10 和 20 之间(包括 10 和 20)，返回<code>\"Outside\"</code>。反之，返回<code>\"Inside\"</code>。"
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "function testLogicalOr(val) {\n  if (val < 10 || val > 20) {\n    return \"Outside\";\n  }\n  return \"Inside\";\n}"
      ],
      "tests": [
        {
          "text": "你应该使用一次<code>||</code>操作符",
          "testString": "assert(code.match(/\\|\\|/g).length === 1, '你应该使用一次<code>||</code>操作符');"
        },
        {
          "text": "You should only have one <code>if</code> statement",
          "testString": "assert(code.match(/if/g).length === 1, '你应该只有一个<code>if</code>表达式');"
        },
        {
          "text": "<code>testLogicalOr(0)</code>应该返回 \"Outside\"",
          "testString": "assert(testLogicalOr(0) === \"Outside\", '<code>testLogicalOr(0)</code>应该返回 \"Outside\"');"
        },
        {
          "text": "<code>testLogicalOr(9)</code>应该返回 \"Outside\"",
          "testString": "assert(testLogicalOr(9) === \"Outside\", '<code>testLogicalOr(9)</code>应该返回 \"Outside\"');"
        },
        {
          "text": "<code>testLogicalOr(10)</code>应该返回 \"Inside\"",
          "testString": "assert(testLogicalOr(10) === \"Inside\", '<code>testLogicalOr(10)</code>应该返回 \"Inside\"');"
        },
        {
          "text": "<code>testLogicalOr(15)</code>应该返回 \"Inside\"",
          "testString": "assert(testLogicalOr(15) === \"Inside\", '<code>testLogicalOr(15)</code>应该返回 \"Inside\"');"
        },
        {
          "text": "<code>testLogicalOr(19)</code>应该返回 \"Inside\"",
          "testString": "assert(testLogicalOr(19) === \"Inside\", '<code>testLogicalOr(19)</code>应该返回 \"Inside\"');"
        },
        {
          "text": "<code>testLogicalOr(20)</code>应该返回 \"Inside\"",
          "testString": "assert(testLogicalOr(20) === \"Inside\", '<code>testLogicalOr(20)</code>应该返回 \"Inside\"');"
        },
        {
          "text": "<code>testLogicalOr(21)</code>应该返回 \"Outside\"",
          "testString": "assert(testLogicalOr(21) === \"Outside\", '<code>testLogicalOr(21)</code>应该返回 \"Outside\"');"
        },
        {
          "text": "<code>testLogicalOr(25)</code>应该返回 \"Outside\"",
          "testString": "assert(testLogicalOr(25) === \"Outside\", '<code>testLogicalOr(25)</code>应该返回 \"Outside\"');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function testLogicalOr(val) {",
            "  // 请把你的代码写在这条注释以下",
            "",
            "  if (val) {",
            "    return \"Outside\";",
            "  }",
            "",
            "  if (val) {",
            "    return \"Outside\";",
            "  }",
            "",
            "  // 请把你的代码写在这条注释以上",
            "  return \"Inside\";",
            "}",
            "",
            "// 你可以修改这一行来测试你的代码",
            "testLogicalOr(15);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244da",
      "title": "Introducing Else Statements",
      "description": [
        "当<code>if</code>语句的条件为真，大括号里的代码执行，那如果条件为假呢？正常情况下什么也不会发生。使用else语句，可以执行当条件为假时相应的代码。",
        "<blockquote>if (num > 10) {<br>&nbsp;&nbsp;return \"Bigger than 10\";<br>} else {<br>&nbsp;&nbsp;return \"10 or Less\";<br>}</blockquote>",
        "<hr>",
        "合并多个<code>if</code>语句为一个<code>if/else</code>语句。"
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "function testElse(val) {\n  var result = \"\";\n  if(val > 5) {\n    result = \"Bigger than 5\";\n  } else {\n    result = \"5 or Smaller\";\n  }\n  return result;\n}"
      ],
      "tests": [
        {
          "text": "你应该只有一个<code>if</code>表达式",
          "testString": "assert(code.match(/if/g).length === 1, '你应该只有一个<code>if</code>表达式');"
        },
        {
          "text": "你应该使用一个<code>else</code>表达式",
          "testString": "assert(/else/g.test(code), '你应该使用一个<code>else</code>表达式');"
        },
        {
          "text": "<code>testElse(4)</code>应该返回 \"5 or Smaller\"",
          "testString": "assert(testElse(4) === \"5 or Smaller\", '<code>testElse(4)</code>应该返回 \"5 or Smaller\"');"
        },
        {
          "text": "<code>testElse(5)</code>应该返回 \"5 or Smaller\"",
          "testString": "assert(testElse(5) === \"5 or Smaller\", '<code>testElse(5)</code>应该返回 \"5 or Smaller\"');"
        },
        {
          "text": "<code>testElse(6)</code>应该返回 \"Bigger than 5\"",
          "testString": "assert(testElse(6) === \"Bigger than 5\", '<code>testElse(6)</code>应该返回 \"Bigger than 5\"');"
        },
        {
          "text": "<code>testElse(10)</code>应该返回 \"Bigger than 5\"",
          "testString": "assert(testElse(10) === \"Bigger than 5\", '<code>testElse(10)</code>应该返回 \"Bigger than 5\"');"
        },
        {
          "text": "不要修改上面和下面的代码",
          "testString": "assert(/var result = \"\";/.test(code) && /return result;/.test(code), '不要修改上面和下面的代码');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function testElse(val) {",
            "  var result = \"\";",
            "  // 请把你的代码写在这条注释以下",
            "  ",
            "  if (val > 5) {",
            "    result = \"Bigger than 5\";",
            "  }",
            "  ",
            "  if (val <= 5) {",
            "    result = \"5 or Smaller\";",
            "  }",
            "  ",
            "  // 请把你的代码写在这条注释以上",
            "  return result;",
            "}",
            "",
            "// 你可以修改这一行来测试你的代码",
            "testElse(4);",
            ""
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244db",
      "title": "Introducing Else If Statements",
      "description": [
        "如果你有多个条件语句，你可以通过<code>else if</code>语句把<code>if</code>语句链起来。",
        "<blockquote>if (num > 15) {<br>  return \"Bigger than 15\";<br>} else if (num < 5) {<br>  return \"Smaller than 5\";<br>} else {<br>  return \"Between 5 and 15\";<br>}</blockquote>",
        "<hr>",
        "使用<code>else if</code>实现同样的效果。"
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "function testElseIf(val) {\n  if(val > 10) {\n    return \"Greater than 10\";\n  } else if(val < 5) {\n    return \"Smaller than 5\";\n  } else {\n    return \"Between 5 and 10\";\n  }\n}"
      ],
      "tests": [
        {
          "text": "你应该至少有两个<code>else</code>表达式",
          "testString": "assert(code.match(/else/g).length > 1, '你应该至少有两个<code>else</code>表达式');"
        },
        {
          "text": "你应该至少有两个<code>if</code>表达式",
          "testString": "assert(code.match(/if/g).length > 1, '你应该至少有两个<code>if</code>表达式');"
        },
        {
          "text": "<code>testElseIf(0)</code>应该返回 \"Smaller than 5\"",
          "testString": "assert(testElseIf(0) === \"Smaller than 5\", '<code>testElseIf(0)</code>应该返回 \"Smaller than 5\"');"
        },
        {
          "text": "<code>testElseIf(5)</code>应该返回 \"Between 5 and 10\"",
          "testString": "assert(testElseIf(5) === \"Between 5 and 10\", '<code>testElseIf(5)</code>应该返回 \"Between 5 and 10\"');"
        },
        {
          "text": "<code>testElseIf(7)</code>应该返回 \"Between 5 and 10\"",
          "testString": "assert(testElseIf(7) === \"Between 5 and 10\", '<code>testElseIf(7)</code>应该返回 \"Between 5 and 10\"');"
        },
        {
          "text": "<code>testElseIf(10)</code>应该返回 \"Between 5 and 10\"",
          "testString": "assert(testElseIf(10) === \"Between 5 and 10\", '<code>testElseIf(10)</code>应该返回 \"Between 5 and 10\"');"
        },
        {
          "text": "<code>testElseIf(12)</code>应该返回 \"Greater than 10\"",
          "testString": "assert(testElseIf(12) === \"Greater than 10\", '<code>testElseIf(12)</code>应该返回 \"Greater than 10\"');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function testElseIf(val) {",
            "  if (val > 10) {",
            "    return \"Greater than 10\";",
            "  }",
            "  ",
            "  if (val < 5) {",
            "    return \"Smaller than 5\";",
            "  }",
            "  ",
            "  return \"Between 5 and 10\";",
            "}",
            "",
            "// 你可以修改这一行来测试你的代码",
            "testElseIf(7);",
            ""
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "5690307fddb111c6084545d7",
      "title": "Logical Order in If Else Statements",
      "description": [
        "<code>if</code>、<code>else if</code>语句中代码的执行顺序是很重要的。",
        "在条件判断语句中，代码的执行顺序是从上到下，所以你需要考虑清楚先执行哪一句，后执行哪一句。",
        "这有两个例子。",
        "第一个例子：",
        "<blockquote>function foo(x) {<br>  if (x < 1) {<br>    return \"Less than one\";<br>  } else if (x < 2) {<br>    return \"Less than two\";<br>  } else {<br>    return \"Greater than or equal to two\";<br>  }<br>}</blockquote>",
        "第二个例子更改了代码的执行顺序：",
        "<blockquote>function bar(x) {<br>  if (x < 2) {<br>    return \"Less than two\";<br>  } else if (x < 1) {<br>    return \"Less than one\";<br>  } else {<br>    return \"Greater than or equal to two\";<br>  }<br>}</blockquote>",
        "这两个函数看起来几乎一模一样，我们传一个值进去看看它们有什么区别。",
        "<blockquote>foo(0) // \"Less than one\"<br>bar(0) // \"Less than two\"</blockquote>",
        "<hr>",
        "更改函数的逻辑顺序以便通过所有的测试用例。"
      ],
      "solutions": [
        "function orderMyLogic(val) {\n  if(val < 5) {\n    return \"Less than 5\";            \n  } else if (val < 10) {\n    return \"Less than 10\";\n  } else {\n    return \"Greater than or equal to 10\";\n  }\n}"
      ],
      "tests": [
        {
          "text": "<code>orderMyLogic(4)</code>应该返回 \"Less than 5\"",
          "testString": "assert(orderMyLogic(4) === \"Less than 5\", '<code>orderMyLogic(4)</code>应该返回 \"Less than 5\"');"
        },
        {
          "text": "<code>orderMyLogic(6)</code>应该返回 \"Less than 10\"",
          "testString": "assert(orderMyLogic(6) === \"Less than 10\", '<code>orderMyLogic(6)</code>应该返回 \"Less than 10\"');"
        },
        {
          "text": "<code>orderMyLogic(11)</code>应该返回 \"Greater than or equal to 10\"",
          "testString": "assert(orderMyLogic(11) === \"Greater than or equal to 10\", '<code>orderMyLogic(11)</code>应该返回 \"Greater than or equal to 10\"');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function orderMyLogic(val) {",
            "  if (val < 10) {",
            "    return \"Less than 10\";",
            "  } else if (val < 5) {",
            "    return \"Less than 5\";",
            "  } else {",
            "    return \"Greater than or equal to 10\";",
            "  }",
            "}",
            "",
            "// 你可以修改这一行来测试你的代码",
            "orderMyLogic(7);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244dc",
      "title": "Chaining If Else Statements",
      "description": [
        "<code>if/else</code>语句串联在一起可以实现复杂的逻辑，这是多个<code>if/else if</code>语句串联在一起的伪代码：",
        "<blockquote>if (<em>condition1</em>) {<br>  <em>statement1</em><br>} else if (<em>condition2</em>) {<br>  <em>statement2</em><br>} else if (<em>condition3</em>) {<br>  <em>statement3</em><br>. . .<br>} else {<br>  <em>statementN</em><br>}</blockquote>",
        "<hr>",
        "把<code>if</code>/<code>else if</code>语句串联起来实现下面的逻辑：",
        "<code>num &lt;   5</code>- return \"Tiny\"<br><code>num &lt;  10</code>- return \"Small\"<br><code>num &lt; 15</code>- return \"Medium\"<br><code>num &lt; 20</code>- return \"Large\"<br><code>num >= 20</code> - return \"Huge\""
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "function testSize(num) {\n  if (num < 5) {\n    return \"Tiny\";\n  } else if (num < 10) {\n    return \"Small\";\n  } else if (num < 15) {\n    return \"Medium\";\n  } else if (num < 20) {\n    return \"Large\";\n  } else {\n    return \"Huge\";\n  }\n}"
      ],
      "tests": [
        {
          "text": "你应该有至少 4 个<code>else</code>表达式",
          "testString": "assert(code.match(/else/g).length > 3, '你应该有至少 4 个<code>else</code>表达式');"
        },
        {
          "text": "你应该有至少 4 个<code>if</code>表达式",
          "testString": "assert(code.match(/if/g).length > 3, '你应该有至少 4 个<code>if</code>表达式');"
        },
        {
          "text": "你应该有至少 1 个<code>return</code>表达式",
          "testString": "assert(code.match(/return/g).length >= 1, '你应该有至少 1 个<code>return</code>表达式');"
        },
        {
          "text": "<code>testSize(0)</code>应该返回 \"Tiny\"",
          "testString": "assert(testSize(0) === \"Tiny\", '<code>testSize(0)</code>应该返回 \"Tiny\"');"
        },
        {
          "text": "<code>testSize(4)</code>应该返回 \"Tiny\"",
          "testString": "assert(testSize(4) === \"Tiny\", '<code>testSize(4)</code>应该返回 \"Tiny\"');"
        },
        {
          "text": "<code>testSize(5)</code>应该返回 \"Small\"",
          "testString": "assert(testSize(5) === \"Small\", '<code>testSize(5)</code>应该返回 \"Small\"');"
        },
        {
          "text": "<code>testSize(8)</code>应该返回 \"Small\"",
          "testString": "assert(testSize(8) === \"Small\", '<code>testSize(8)</code>应该返回 \"Small\"');"
        },
        {
          "text": "<code>testSize(10)</code>应该返回 \"Medium\"",
          "testString": "assert(testSize(10) === \"Medium\", '<code>testSize(10)</code>应该返回 \"Medium\"');"
        },
        {
          "text": "<code>testSize(14)</code>应该返回 \"Medium\"",
          "testString": "assert(testSize(14) === \"Medium\", '<code>testSize(14)</code>应该返回 \"Medium\"');"
        },
        {
          "text": "<code>testSize(15)</code>应该返回 \"Large\"",
          "testString": "assert(testSize(15) === \"Large\", '<code>testSize(15)</code>应该返回 \"Large\"');"
        },
        {
          "text": "<code>testSize(17)</code>应该返回 \"Large\"",
          "testString": "assert(testSize(17) === \"Large\", '<code>testSize(17)</code>应该返回 \"Large\"');"
        },
        {
          "text": "<code>testSize(20)</code>应该返回 \"Huge\"",
          "testString": "assert(testSize(20) === \"Huge\", '<code>testSize(20)</code>应该返回 \"Huge\"');"
        },
        {
          "text": "<code>testSize(25)</code>应该返回 \"Huge\"",
          "testString": "assert(testSize(25) === \"Huge\", '<code>testSize(25)</code>应该返回 \"Huge\"');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function testSize(num) {",
            "  // 请把你的代码写在这条注释以下",
            "  ",
            "  ",
            "  return \"Change Me\";",
            "  // 请把你的代码写在这条注释以上",
            "}",
            "",
            "// 你可以修改这一行来测试你的代码",
            "testSize(7);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "5664820f61c48e80c9fa476c",
      "title": "Golf Code",
      "description": [
        "在高尔夫<a href=\"https://en.wikipedia.org/wiki/Golf\" target=\"_blank\">golf</a>游戏中，每个洞都有自己的标准杆数<code>par</code>，代表着距离。根据你把球打进洞所挥杆的次数<code>strokes</code>，可以计算出你的高尔夫水平。",
        "函数将会传送 2 个参数，分别是标准杆数<code>par</code>和挥杆次数<code>strokes</code>，根据下面的表格返回正确的水平段位。",
        "<table class=\"table table-striped\"><thead><tr><th>Strokes</th><th>Return</th></tr></thead><tbody><tr><td>1</td><td>\"Hole-in-one!\"</td></tr><tr><td>&lt;= par - 2</td><td>\"Eagle\"</td></tr><tr><td>par - 1</td><td>\"Birdie\"</td></tr><tr><td>par</td><td>\"Par\"</td></tr><tr><td>par + 1</td><td>\"Bogey\"</td></tr><tr><td>par + 2</td><td>\"Double Bogey\"</td></tr><tr><td>&gt;= par + 3</td><td>\"Go Home!\"</td></tr></tbody></table>",
        "<code>par</code>和<code>strokes</code>必须是数字而且是正数。"
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "function golfScore(par, strokes) {\n  if (strokes === 1) {\n    return \"Hole-in-one!\";\n  }\n  \n  if (strokes <= par - 2) {\n    return \"Eagle\";\n  }\n  \n  if (strokes === par - 1) {\n    return \"Birdie\";\n  }\n  \n  if (strokes === par) {\n    return \"Par\";\n  }\n  \n  if (strokes === par + 1) {\n    return \"Bogey\";\n  }\n  \n  if(strokes === par + 2) {\n    return \"Double Bogey\";\n  }\n  \n  return \"Go Home!\";\n}"
      ],
      "tests": [
        {
          "text": "<code>golfScore(4, 1)</code>应该返回 \"Hole-in-one!\"",
          "testString": "assert(golfScore(4, 1) === \"Hole-in-one!\", '<code>golfScore(4, 1)</code>应该返回 \"Hole-in-one!\"');"
        },
        {
          "text": "<code>golfScore(4, 2)</code>应该返回 \"Eagle\"",
          "testString": "assert(golfScore(4, 2) === \"Eagle\", '<code>golfScore(4, 2)</code>应该返回 \"Eagle\"');"
        },
        {
          "text": "<code>golfScore(5, 2)</code>应该返回 \"Eagle\"",
          "testString": "assert(golfScore(5, 2) === \"Eagle\", '<code>golfScore(5, 2)</code>应该返回 \"Eagle\"');"
        },
        {
          "text": "<code>golfScore(4, 3)</code>应该返回 \"Birdie\"",
          "testString": "assert(golfScore(4, 3) === \"Birdie\", '<code>golfScore(4, 3)</code>应该返回 \"Birdie\"');"
        },
        {
          "text": "<code>golfScore(4, 4)</code>应该返回 \"Par\"",
          "testString": "assert(golfScore(4, 4) === \"Par\", '<code>golfScore(4, 4)</code>应该返回 \"Par\"');"
        },
        {
          "text": "<code>golfScore(1, 1)</code>应该返回 \"Hole-in-one!\"",
          "testString": "assert(golfScore(1, 1) === \"Hole-in-one!\", '<code>golfScore(1, 1)</code>应该返回 \"Hole-in-one!\"');"
        },
        {
          "text": "<code>golfScore(5, 5)</code>应该返回 \"Par\"",
          "testString": "assert(golfScore(5, 5) === \"Par\", '<code>golfScore(5, 5)</code>应该返回 \"Par\"');"
        },
        {
          "text": "<code>golfScore(4, 5)</code>应该返回 \"Bogey\"",
          "testString": "assert(golfScore(4, 5) === \"Bogey\", '<code>golfScore(4, 5)</code>应该返回 \"Bogey\"');"
        },
        {
          "text": "<code>golfScore(4, 6)</code>应该返回 \"Double Bogey\"",
          "testString": "assert(golfScore(4, 6) === \"Double Bogey\", '<code>golfScore(4, 6)</code>应该返回 \"Double Bogey\"');"
        },
        {
          "text": "<code>golfScore(4, 7)</code>应该返回 \"Go Home!\"",
          "testString": "assert(golfScore(4, 7) === \"Go Home!\", '<code>golfScore(4, 7)</code>应该返回 \"Go Home!\"');"
        },
        {
          "text": "<code>golfScore(5, 9)</code>应该返回 \"Go Home!\"",
          "testString": "assert(golfScore(5, 9) === \"Go Home!\", '<code>golfScore(5, 9)</code>应该返回 \"Go Home!\"');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "var names = [\"Hole-in-one!\", \"Eagle\", \"Birdie\", \"Par\", \"Bogey\", \"Double Bogey\", \"Go Home!\"];",
            "function golfScore(par, strokes) {",
            "  // 请把你的代码写在这条注释以下",
            "  ",
            "  ",
            "  return \"Change Me\";",
            "  // 请把你的代码写在这条注释以上",
            "}",
            "",
            "// Change these values to test",
            "golfScore(5, 4);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244dd",
      "title": "Selecting from Many Options with Switch Statements",
      "description": [
        "如果你有非常多的选项需要选择，可以使用 switch 语句。根据不同的参数值会匹配上不同的 case 分支，语句会从第一个匹配的 case 分支开始执行，直到碰到 break 就结束。",
        "这是一个伪代码案例：",
        "<blockquote>switch(num) {<br>&nbsp;&nbsp;case value1:<br>&nbsp;&nbsp;&nbsp;&nbsp;statement1;<br>&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;case value2:<br>&nbsp;&nbsp;statement2;<br>&nbsp;&nbsp;&nbsp;&nbsp;break;<br>...<br>&nbsp;&nbsp;case valueN:<br>&nbsp;&nbsp;&nbsp;&nbsp;statementN;<br>&nbsp;&nbsp;&nbsp;&nbsp;break;<br>}</blockquote>",
        "测试<code>case</code>值使用严格相等运算符进行比较，break 关键字告诉 JavaScript 停止执行语句。如果没有 break 关键字，下一个语句会继续执行。",
        "<hr>",
        "写一个测试<code>val</code>的 switch 语句，并且根据下面的条件来设置不同的<code>answer</code>：<br><code>1</code>- \"alpha\"<br><code>2</code> - \"beta\"<br><code>3</code>- \"gamma\"<br><code>4</code> - \"delta\""
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "function caseInSwitch(val) {\n  var answer = \"\";\n\n  switch(val) {\n    case 1:\n      answer = \"alpha\";\n      break;\n    case 2:\n      answer = \"beta\";\n      break;\n    case 3:\n      answer = \"gamma\";\n      break;\n    case 4:\n      answer = \"delta\";\n  }\n  return answer;  \n}"
      ],
      "tests": [
        {
          "text": "<code>caseInSwitch(1)</code> 应该有一个值为 \"alpha\"",
          "testString": "assert(caseInSwitch(1) === \"alpha\", '<code>caseInSwitch(1)</code> 应该有一个值为 \"alpha\"');"
        },
        {
          "text": "<code>caseInSwitch(2)</code> 应该有一个值为 \"beta\"",
          "testString": "assert(caseInSwitch(2) === \"beta\", '<code>caseInSwitch(2)</code> 应该有一个值为 \"beta\"');"
        },
        {
          "text": "<code>caseInSwitch(3)</code> 应该有一个值为 \"gamma\"",
          "testString": "assert(caseInSwitch(3) === \"gamma\", '<code>caseInSwitch(3)</code> 应该有一个值为 \"gamma\"');"
        },
        {
          "text": "<code>caseInSwitch(4)</code> 应该有一个值为 \"delta\"",
          "testString": "assert(caseInSwitch(4) === \"delta\", '<code>caseInSwitch(4)</code> 应该有一个值为 \"delta\"');"
        },
        {
          "text": "不能使用任何<code>if</code>或<code>else</code>表达式",
          "testString": "assert(!/else/g.test(code) || !/if/g.test(code), '不能使用任何<code>if</code>或<code>else</code>表达式');"
        },
        {
          "text": "你应该有至少 3 个<code>break</code>表达式",
          "testString": "assert(code.match(/break/g).length > 2, '你应该有至少 3 个<code>break</code>表达式');"
        }
      ],
      "MDNlinks": [
        "Switch Statement"
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function caseInSwitch(val) {",
            "  var answer = \"\";",
            "  // 请把你的代码写在这条注释以下",
            "  ",
            "  ",
            "  ",
            "  // 请把你的代码写在这条注释以上  ",
            "  return answer;  ",
            "}",
            "",
            "// 你可以修改这一行来测试你的代码",
            "caseInSwitch(1);",
            ""
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244de",
      "title": "Adding a Default Option in Switch Statements",
      "description": [
        "在<code>switch</code>语句中你可能无法用 case 来指定所有情况，这时你可以添加 default 语句。当再也找不到 case 匹配的时候 default 语句会执行，非常类似于 if/else 组合中的 else 语句。",
        "<code>default</code>语句应该是最后一个 case。",
        "<blockquote>switch (num) {<br>&nbsp;&nbsp;case value1:<br>&nbsp;&nbsp;&nbsp;&nbsp;statement1;<br>&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;case value2:<br>&nbsp;&nbsp;&nbsp;&nbsp;statement2;<br>&nbsp;&nbsp;&nbsp;&nbsp;break;<br>...<br>&nbsp;&nbsp;default:<br>&nbsp;&nbsp;&nbsp;&nbsp;defaultStatement;<br>&nbsp;&nbsp;&nbsp;&nbsp;break;<br>}</blockquote>",
        "<hr>",
        "写一个根据下面的条件来设置<code>answer</code>的switch语句：<br><code>\"a\"</code> - \"apple\"<br><code>\"b\"</code> - \"bird\"<br><code>\"c\"</code> - \"cat\"<br><code>default</code> - \"stuff\""
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "function switchOfStuff(val) {\n  var answer = \"\";\n\n  switch(val) {\n    case \"a\":\n      answer = \"apple\";\n      break;\n    case \"b\":\n      answer = \"bird\";\n      break;\n    case \"c\":\n      answer = \"cat\";\n      break;\n    default:\n      answer = \"stuff\";\n  }\n  return answer;  \n}"
      ],
      "tests": [
        {
          "text": "<code>switchOfStuff(\"a\")</code>应该有一个值为 \"apple\"",
          "testString": "assert(switchOfStuff(\"a\") === \"apple\", '<code>switchOfStuff(\"a\")</code>应该有一个值为 \"apple\"');"
        },
        {
          "text": "<code>switchOfStuff(\"b\")</code>应该有一个值为 \"bird\"",
          "testString": "assert(switchOfStuff(\"b\") === \"bird\", '<code>switchOfStuff(\"b\")</code>应该有一个值为 \"bird\"');"
        },
        {
          "text": "<code>switchOfStuff(\"c\")</code>应该有一个值为 \"cat\"",
          "testString": "assert(switchOfStuff(\"c\") === \"cat\", '<code>switchOfStuff(\"c\")</code>应该有一个值为 \"cat\"');"
        },
        {
          "text": "<code>switchOfStuff(\"d\")</code>应该有一个值为 \"stuff\"",
          "testString": "assert(switchOfStuff(\"d\") === \"stuff\", '<code>switchOfStuff(\"d\")</code>应该有一个值为 \"stuff\"');"
        },
        {
          "text": "<code>switchOfStuff(4)</code>应该有一个值为 \"stuff\"",
          "testString": "assert(switchOfStuff(4) === \"stuff\", '<code>switchOfStuff(4)</code>应该有一个值为 \"stuff\"');"
        },
        {
          "text": "不能使用任何<code>if</code>或<code>else</code>表达式",
          "testString": "assert(!/else/g.test(code) || !/if/g.test(code), '不能使用任何<code>if</code>或<code>else</code>表达式');"
        },
        {
          "text": "你应该有一个<code>default</code>表达式",
          "testString": "assert(switchOfStuff(\"string-to-trigger-default-case\") === \"stuff\", '你应该有一个<code>default</code>表达式');"
        },
        {
          "text": "你应该有至少 3 个<code>break</code>表达式",
          "testString": "assert(code.match(/break/g).length > 2, '你应该有至少 3 个<code>break</code>表达式');"
        }
      ],
      "challengeType": 1,
      "guideUrl": "https://guide.freecodecamp.org/certificates/adding-a-default-option-in-switch-statements",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function switchOfStuff(val) {",
            "  var answer = \"\";",
            "  // 请把你的代码写在这条注释以下",
            "  ",
            "  ",
            "  ",
            "  // 请把你的代码写在这条注释以上  ",
            "  return answer;  ",
            "}",
            "",
            "// 你可以修改这一行来测试你的代码",
            "switchOfStuff(1);",
            ""
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244df",
      "title": "Multiple Identical Options in Switch Statements",
      "description": [
        "If the <code>break</code> statement is omitted from a <code>switch</code> statement's <code>case</code>, the following <code>case</code> statement(s) are executed until a <code>break</code> is encountered. If you have multiple inputs with the same output, you can represent them in a <code>switch</code> statement like this:",
        "<blockquote>switch(val) {<br>&nbsp;&nbsp;case 1:<br>&nbsp;&nbsp;case 2:<br>&nbsp;&nbsp;case 3:<br>&nbsp;&nbsp;&nbsp;&nbsp;result = \"1, 2, or 3\";<br>&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;case 4:<br>&nbsp;&nbsp;&nbsp;&nbsp;result = \"4 alone\";<br>}</blockquote>",
        "Cases for 1, 2, and 3 will all produce the same result.",
        "<hr>",
        "Write a switch statement to set <code>answer</code> for the following ranges:<br><code>1-3</code> - \"Low\"<br><code>4-6</code> - \"Mid\"<br><code>7-9</code> - \"High\"",
        "<strong>提示</strong><br>You will need to have a <code>case</code> statement for each number in the range."
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "function sequentialSizes(val) {\n  var answer = \"\";\n  \n  switch(val) {\n    case 1:\n    case 2:\n    case 3:\n      answer = \"Low\";\n      break;\n    case 4:\n    case 5:\n    case 6:\n      answer = \"Mid\";\n      break;\n    case 7:\n    case 8:\n    case 9:\n      answer = \"High\";\n  }\n  \n  return answer;  \n}"
      ],
      "tests": [
        {
          "text": "<code>sequentialSizes(1)</code>应该返回 \"Low\"",
          "testString": "assert(sequentialSizes(1) === \"Low\", '<code>sequentialSizes(1)</code>应该返回 \"Low\"');"
        },
        {
          "text": "<code>sequentialSizes(2)</code>应该返回 \"Low\"",
          "testString": "assert(sequentialSizes(2) === \"Low\", '<code>sequentialSizes(2)</code>应该返回 \"Low\"');"
        },
        {
          "text": "<code>sequentialSizes(3)</code>应该返回 \"Low\"",
          "testString": "assert(sequentialSizes(3) === \"Low\", '<code>sequentialSizes(3)</code>应该返回 \"Low\"');"
        },
        {
          "text": "<code>sequentialSizes(4)</code>应该返回 \"Mid\"",
          "testString": "assert(sequentialSizes(4) === \"Mid\", '<code>sequentialSizes(4)</code>应该返回 \"Mid\"');"
        },
        {
          "text": "<code>sequentialSizes(5)</code>应该返回 \"Mid\"",
          "testString": "assert(sequentialSizes(5) === \"Mid\", '<code>sequentialSizes(5)</code>应该返回 \"Mid\"');"
        },
        {
          "text": "<code>sequentialSizes(6)</code>应该返回 \"Mid\"",
          "testString": "assert(sequentialSizes(6) === \"Mid\", '<code>sequentialSizes(6)</code>应该返回 \"Mid\"');"
        },
        {
          "text": "<code>sequentialSizes(7)</code>应该返回 \"High\"",
          "testString": "assert(sequentialSizes(7) === \"High\", '<code>sequentialSizes(7)</code>应该返回 \"High\"');"
        },
        {
          "text": "<code>sequentialSizes(8)</code>应该返回 \"High\"",
          "testString": "assert(sequentialSizes(8) === \"High\", '<code>sequentialSizes(8)</code>应该返回 \"High\"');"
        },
        {
          "text": "<code>sequentialSizes(9)</code>应该返回 \"High\"",
          "testString": "assert(sequentialSizes(9) === \"High\", '<code>sequentialSizes(9)</code>应该返回 \"High\"');"
        },
        {
          "text": "You should not use any <code>if</code> or <code>else</code> statements",
          "testString": "assert(!/else/g.test(code) || !/if/g.test(code), 'You should not use any <code>if</code> or <code>else</code> statements');"
        },
        {
          "text": "You should have nine <code>case</code> statements",
          "testString": "assert(code.match(/case/g).length === 9, 'You should have nine <code>case</code> statements');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function sequentialSizes(val) {",
            "  var answer = \"\";",
            "  // 请把你的代码写在这条注释以下",
            "  ",
            "  ",
            "  ",
            "  // 请把你的代码写在这条注释以上  ",
            "  return answer;  ",
            "}",
            "",
            "// 你可以修改这一行来测试你的代码",
            "sequentialSizes(1);",
            ""
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244e0",
      "title": "Replacing If Else Chains with Switch",
      "description": [
        "如果你有多个选项需要选择，<code>switch</code>语句写起来会比多个串联的<code>if</code>/<code>if else</code>语句容易些，譬如:",
        "<blockquote>if (val === 1) {<br>&nbsp;&nbsp;answer = \"a\";<br>} else if (val === 2) {<br>&nbsp;&nbsp;answer = \"b\";<br>} else {<br>&nbsp;&nbsp;answer = \"c\";<br>}</blockquote>",
        "可以被下面替代：",
        "<blockquote>switch(val) {<br>&nbsp;&nbsp;case 1:<br>&nbsp;&nbsp;&nbsp;&nbsp;answer = \"a\";<br>&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;case 2:<br>&nbsp;&nbsp;&nbsp;&nbsp;answer = \"b\";<br>&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;default:<br>&nbsp;&nbsp;&nbsp;&nbsp;answer = \"c\";<br>}</blockquote>",
        "<hr>",
        "把串联的<code>if</code>/<code>if else</code>语句改成<code>switch</code>语句。"
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "function chainToSwitch(val) {\n  var answer = \"\";\n\n  switch(val) {\n    case \"bob\":\n      answer = \"Marley\";\n      break;\n    case 42:\n      answer = \"The Answer\";\n      break;\n    case 1:\n      answer = \"There is no #1\";\n      break;\n    case 99:\n      answer = \"Missed me by this much!\";\n      break;\n    case 7:\n      answer = \"Ate Nine\";\n  }\n  return answer;  \n}"
      ],
      "tests": [
        {
          "text": "不要使用<code>else</code>表达式",
          "testString": "assert(!/else/g.test(code), '不要使用<code>else</code>表达式');"
        },
        {
          "text": "不要使用<code>if</code>表达式",
          "testString": "assert(!/if/g.test(code), '不要使用<code>if</code>表达式');"
        },
        {
          "text": "你应该有至少 4 个<code>break</code>表达式",
          "testString": "assert(code.match(/break/g).length >= 4, '你应该有至少 4 个<code>break</code>表达式');"
        },
        {
          "text": "<code>chainToSwitch(\"bob\")</code>应该为 \"Marley\"');",
          "testString": "assert(chainToSwitch(\"bob\") === \"Marley\", '<code>chainToSwitch(\"bob\")</code>应该为 \"Marley\"');');"
        },
        {
          "text": "<code>chainToSwitch(42)</code>应该为 \"The Answer\"",
          "testString": "assert(chainToSwitch(42) === \"The Answer\", '<code>chainToSwitch(42)</code>应该为 \"The Answer\"');"
        },
        {
          "text": "<code>chainToSwitch(1)</code>应该为 \"There is no #1\"",
          "testString": "assert(chainToSwitch(1) === \"There is no #1\", '<code>chainToSwitch(1)</code>应该为 \"There is no #1\"');"
        },
        {
          "text": "<code>chainToSwitch(99)</code>应该为 \"Missed me by this much!\"",
          "testString": "assert(chainToSwitch(99) === \"Missed me by this much!\", '<code>chainToSwitch(99)</code>应该为 \"Missed me by this much!\"');"
        },
        {
          "text": "<code>chainToSwitch(7)</code>应该为 \"Ate Nine\"",
          "testString": "assert(chainToSwitch(7) === \"Ate Nine\", '<code>chainToSwitch(7)</code>应该为 \"Ate Nine\"');"
        },
        {
          "text": "<code>chainToSwitch(\"John\")</code>应该为 \"\" (empty string)",
          "testString": "assert(chainToSwitch(\"John\") === \"\", '<code>chainToSwitch(\"John\")</code>应该为 \"\" (empty string)');"
        },
        {
          "text": "<code>chainToSwitch(156)</code>应该为 \"\" (empty string)",
          "testString": "assert(chainToSwitch(156) === \"\", '<code>chainToSwitch(156)</code>应该为 \"\" (empty string)');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function chainToSwitch(val) {",
            "  var answer = \"\";",
            "  // 请把你的代码写在这条注释以下",
            "  ",
            "  if (val === \"bob\") {",
            "    answer = \"Marley\";",
            "  } else if (val === 42) {",
            "    answer = \"The Answer\";",
            "  } else if (val === 1) {",
            "    answer = \"There is no #1\";",
            "  } else if (val === 99) {",
            "    answer = \"Missed me by this much!\";",
            "  } else if (val === 7) {",
            "    answer = \"Ate Nine\";",
            "  }",
            "  ",
            "  // 请把你的代码写在这条注释以上  ",
            "  return answer;  ",
            "}",
            "",
            "// 你可以修改这一行来测试你的代码",
            "chainToSwitch(7);",
            ""
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "5679ceb97cbaa8c51670a16b",
      "title": "Returning Boolean Values from Functions",
      "description": [
        "你可能会回想起<a href=\"waypoint-comparison-with-the-equality-operator\" target=\"_blank\">，所有的比较操作符返回的都是一个 boolean 值，要么是<code>true</code>要么是<code>false</code>。",
        "有时人们通过 if/else 语句来做比较然后返回<code>true</code>或<code>false</code>。",
        "<blockquote>function isEqual(a,b) {<br>&nbsp;&nbsp;if (a === b) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return true;<br>&nbsp;&nbsp;} else {<br>&nbsp;&nbsp;&nbsp;&nbsp;return false;<br>&nbsp;&nbsp;}<br>}</blockquote>",
        "有一个更好的方法，因为<code>===</code>总是返回<code>true</code>或<code>false</code>，所以我们可以直接返回比较的结果：",
        "<blockquote>function isEqual(a,b) {<br>&nbsp;&nbsp;return a === b;<br>}</blockquote>",
        "<hr>",
        "移除<code>isLess</code>函数的<code>if/else</code>语句但不影响函数的功能。"
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "function isLess(a, b) {\n  return a < b;\n}"
      ],
      "tests": [
        {
          "text": "<code>isLess(10,15)</code>应该返回 <code>true</code>",
          "testString": "assert(isLess(10,15) === true, '<code>isLess(10,15)</code>应该返回 <code>true</code>');"
        },
        {
          "text": "<code>isLess(15,10)</code>应该返回 <code>false</code>",
          "testString": "assert(isLess(15, 10) === false, '<code>isLess(15,10)</code>应该返回 <code>false</code>');"
        },
        {
          "text": "You should not use any <code>if</code> or <code>else</code> statements",
          "testString": "assert(!/if|else/g.test(code), '不要使用<code>if</code>或<code>else</code>表达式');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function isLess(a, b) {",
            "  // 请修改这部分代码",
            "  if (a < b) {",
            "    return true;",
            "  } else {",
            "    return false;",
            "  }",
            "}",
            "",
            "// Change these values to test",
            "isLess(10, 15);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244c4",
      "title": "Return Early Pattern for Functions",
      "description": [
        "当代码执行到 return 语句时，函数返回一个结果就结束运行了，return 后面的语句不会执行。",
        "<strong>示例</strong>",
        "<blockquote>function myFun() {<br>&nbsp;&nbsp;console.log(\"Hello\");<br>&nbsp;&nbsp;return \"World\";<br>&nbsp;&nbsp;console.log(\"byebye\")<br>}<br>myFun();</blockquote>",
        "上面的代码输出\"Hello\"到控制台、返回 \"World\"，但没有输出<code>\"byebye\"</code>，因为函数遇到 return 语句就退出了。",
        "<hr>",
        "修改函数<code>abTest</code>当<code>a</code>或<code>b</code>小于0时，函数立即返回一个<code>undefined</code>并退出。",
        "<strong>提示</strong><br>记住<a href='http://www.freecodecamp.org/challenges/understanding-uninitialized-variables' target='_blank'><code>undefined</code>，是一个关键字，而不是一个字符串。"
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "function abTest(a, b) {\n  if(a < 0 || b < 0) {\n    return undefined;\n  } \n  return Math.round(Math.pow(Math.sqrt(a) + Math.sqrt(b), 2));\n}"
      ],
      "tests": [
        {
          "text": "<code>abTest(2,2)</code>应该返回 a number",
          "testString": "assert(typeof abTest(2,2) === 'number' , '<code>abTest(2,2)</code>应该返回 a number');"
        },
        {
          "text": "<code>abTest(2,2)</code>应该返回 <code>8</code>",
          "testString": "assert(abTest(2,2) === 8 , '<code>abTest(2,2)</code>应该返回 <code>8</code>');"
        },
        {
          "text": "<code>abTest(-2,2)</code>应该返回 <code>undefined</code>",
          "testString": "assert(abTest(-2,2) === undefined , '<code>abTest(-2,2)</code>应该返回 <code>undefined</code>');"
        },
        {
          "text": "<code>abTest(2,-2)</code>应该返回 <code>undefined</code>",
          "testString": "assert(abTest(2,-2) === undefined , '<code>abTest(2,-2)</code>应该返回 <code>undefined</code>');"
        },
        {
          "text": "<code>abTest(2,8)</code>应该返回 <code>18</code>",
          "testString": "assert(abTest(2,8) === 18 , '<code>abTest(2,8)</code>应该返回 <code>18</code>');"
        },
        {
          "text": "<code>abTest(3,3)</code>应该返回 <code>12</code>",
          "testString": "assert(abTest(3,3) === 12 , '<code>abTest(3,3)</code>应该返回 <code>12</code>');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// 初始化变量",
            "function abTest(a, b) {",
            "  // 请把你的代码写在这条注释以下",
            "  ",
            "  ",
            "  ",
            "  // 请把你的代码写在这条注释以上",
            "",
            "  return Math.round(Math.pow(Math.sqrt(a) + Math.sqrt(b), 2));",
            "}",
            "",
            "// 你可以修改这一行来测试你的代码",
            "abTest(2,2);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "565bbe00e9cc8ac0725390f4",
      "title": "Counting Cards",
      "description": [
        "在赌场 21 点游戏中，玩家可以通过计算牌桌上已经发放的卡牌的高低值来让自己在游戏中保持优势，这就叫<a href='https://www.douban.com/note/273781969/' target='_blank'> 21 点算法</a>。",
        "根据下面的表格，每张卡牌都分配了一个值。如果卡牌的值<count>大于 0，那么玩家应该追加赌注。反之，追加少许赌注甚至不追加赌注。",
        "<table class=\"table table-striped\"><thead><tr><th>Count Change</th><th>Cards</th></tr></thead><tbody><tr><td>+1</td><td>2, 3, 4, 5, 6</td></tr><tr><td>0</td><td>7, 8, 9</td></tr><tr><td>-1</td><td>10, 'J', 'Q', 'K', 'A'</td></tr></tbody></table>",
        "你需要写一个函数实现 21 点算法，它根据参数<code>card</code>的值来递增或递减变量<code>count</code>，函数返回一个由当前<code>count</code>和<code>Bet</code>(<code>count>0</code>)或<code>Hold</code>(<code>count<=0</code>) 拼接的字符串。注意<code>count</code>和<code>\"Bet\"</code>或<code>Hold</code>应该用空格分开。",
        "<strong>例如：</strong><br><code>-3 Hold<br>5 Bet</code>",
        "<strong>提示</strong><br>既然 card 的值为 7、8、9 时，count 值不变，那我们就可以忽略这种情况。"
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "var count = 0;\nfunction cc(card) {\n  switch(card) {\n    case 2:\n    case 3:\n    case 4:\n    case 5:\n    case 6:\n      count++;\n      break;\n    case 10:\n    case 'J':\n    case 'Q':\n    case 'K':\n    case 'A':\n      count--;\n  }\n  if(count > 0) {\n    return count + \" Bet\";\n  } else {\n    return count + \" Hold\";\n  }\n}"
      ],
      "tests": [
        {
          "text": "Cards Sequence 2, 3, 4, 5, 6 应该返回<code>5 Bet</code>",
          "testString": "assert((function(){ count = 0; cc(2);cc(3);cc(4);cc(5);var out = cc(6); if(out === \"5 Bet\") {return true;} return false; })(), 'Cards Sequence 2, 3, 4, 5, 6 应该返回 <code>5 Bet</code>');"
        },
        {
          "text": "Cards Sequence 7, 8, 9 应该返回 <code>0 Hold</code>",
          "testString": "assert((function(){ count = 0; cc(7);cc(8);var out = cc(9); if(out === \"0 Hold\") {return true;} return false; })(), 'Cards Sequence 7, 8, 9 应该返回 <code>0 Hold</code>');"
        },
        {
          "text": "Cards Sequence 10, J, Q, K, A 应该返回 <code>-5 Hold</code>",
          "testString": "assert((function(){ count = 0; cc(10);cc('J');cc('Q');cc('K');var out = cc('A'); if(out === \"-5 Hold\") {return true;} return false; })(), 'Cards Sequence 10, J, Q, K, A 应该返回 <code>-5 Hold</code>');"
        },
        {
          "text": "Cards Sequence 3, 7, Q, 8, A 应该返回 <code>-1 Hold</code>",
          "testString": "assert((function(){ count = 0; cc(3);cc(7);cc('Q');cc(8);var out = cc('A'); if(out === \"-1 Hold\") {return true;} return false; })(), 'Cards Sequence 3, 7, Q, 8, A 应该返回 <code>-1 Hold</code>');"
        },
        {
          "text": "Cards Sequence 2, J, 9, 2, 7 应该返回 <code>1 Bet</code>",
          "testString": "assert((function(){ count = 0; cc(2);cc('J');cc(9);cc(2);var out = cc(7); if(out === \"1 Bet\") {return true;} return false; })(), 'Cards Sequence 2, J, 9, 2, 7 应该返回 <code>1 Bet</code>');"
        },
        {
          "text": "Cards Sequence 2, 2, 10 应该返回 <code>1 Bet</code>",
          "testString": "assert((function(){ count = 0; cc(2);cc(2);var out = cc(10); if(out === \"1 Bet\") {return true;} return false; })(), 'Cards Sequence 2, 2, 10 应该返回 <code>1 Bet</code>');"
        },
        {
          "text": "Cards Sequence 3, 2, A, 10, K 应该返回 <code>-1 Hold</code>",
          "testString": "assert((function(){ count = 0; cc(3);cc(2);cc('A');cc(10);var out = cc('K'); if(out === \"-1 Hold\") {return true;} return false; })(), 'Cards Sequence 3, 2, A, 10, K 应该返回 <code>-1 Hold</code>');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "var count = 0;",
            "",
            "function cc(card) {",
            "  // 请把你的代码写在这条注释以下",
            "  ",
            "  ",
            "  return \"Change Me\";",
            "  // 请把你的代码写在这条注释以上",
            "}",
            "",
            "// 你可以在这里添加/删除 cc 方法的调用来测试结果",
            "// 提示: 左边只会显示最后一次执行的返回值",
            "cc(2); cc(3); cc(7); cc('K'); cc('A');"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "56bbb991ad1ed5201cd392d0",
      "title": "Build JavaScript Objects",
      "description": [
        "你之前可能听说过对象<code>object</code>。",
        "对象和数组很相似，数组是通过索引来访问和修改数据，对象是通过属性来访问和修改数据的。",
        "对象适合用来存储结构化数据，就和真实世界的对象一模一样，比如一只猫。",
        "这是一个对象的示例：",
        "<blockquote>var cat = {<br>&nbsp;&nbsp;\"name\": \"Whiskers\",<br>&nbsp;&nbsp;\"legs\": 4,<br>&nbsp;&nbsp;\"tails\": 1,<br>&nbsp;&nbsp;\"enemies\": [\"Water\", \"Dogs\"]<br>};</blockquote>",
        "在这个示例中所有的属性以字符串的形式储存，例如 - <code>\"name\"</code>, <code>\"legs\"</code>，和<code>\"tails\"</code>。但是，你也可以使用数字作为属性。你甚至可以省略单个字符串属性的引号，如下所示：",
        "<blockquote>var anotherObject = {<br>&nbsp;&nbsp;make: \"Ford\",<br>&nbsp;&nbsp;5: \"five\",<br>&nbsp;&nbsp;\"model\": \"focus\"<br>};</blockquote>",
        "但是，如果你的对象具有任何非字符串属性，JavaScript 将自动将它们作为字符串进行类型转换。",
        "<hr>",
        "创建一个叫做<code>myDog</code>的对象，它里面有这些属性：<code>名称\"name\"</code>、<code>腿\"legs\"</code>,<code>尾巴\"tails\"</code>、<code>朋友\"friends\"</code>。",
        "你可以设置对象属性为任何你想要的值，只要<code>\"name\"</code>是字符串、<code>\"legs\"</code>和<code>\"tails\"</code>是数字、<code>\"friends\"</code>是数组。"
      ],
      "solutions": [
        "var myDog = {\n  \"name\": \"Camper\",\n  \"legs\": 4,\n  \"tails\": 1,\n  \"friends\": [\"everything!\"]  \n};"
      ],
      "tests": [
        {
          "text": "<code>myDog</code>应该包含<code>name</code>属性，并且是一个字符串<code>string</code>.",
          "testString": "assert((function(z){if(z.hasOwnProperty(\"name\") && z.name !== undefined && typeof z.name === \"string\"){return true;}else{return false;}})(myDog), '<code>myDog</code>应该包含<code>name</code>属性，并且是一个字符串<code>string</code>.');"
        },
        {
          "text": "<code>myDog</code>应该包含<code>legs</code>属性，并且是一个数字<code>number</code>.",
          "testString": "assert((function(z){if(z.hasOwnProperty(\"legs\") && z.legs !== undefined && typeof z.legs === \"number\"){return true;}else{return false;}})(myDog), '<code>myDog</code>应该包含<code>legs</code>属性，并且是一个数字<code>number</code>.');"
        },
        {
          "text": "<code>myDog</code>应该包含<code>tails</code>属性，并且是一个数字<code>number</code>.",
          "testString": "assert((function(z){if(z.hasOwnProperty(\"tails\") && z.tails !== undefined && typeof z.tails === \"number\"){return true;}else{return false;}})(myDog), '<code>myDog</code>应该包含<code>tails</code>属性，并且是一个数字<code>number</code>.');"
        },
        {
          "text": "<code>myDog</code>应该包含<code>friends</code>属性，并且是一个数组<code>array</code>.",
          "testString": "assert((function(z){if(z.hasOwnProperty(\"friends\") && z.friends !== undefined && Array.isArray(z.friends)){return true;}else{return false;}})(myDog), '<code>myDog</code>应该包含<code>friends</code>属性，并且是一个数组<code>array</code>.');"
        },
        {
          "text": "<code>myDog</code>应该只包含给出的属性",
          "testString": "assert((function(z){return Object.keys(z).length === 4;})(myDog), '<code>myDog</code>应该只包含给出的属性');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// 示例",
            "var ourDog = {",
            "  \"name\": \"Camper\",",
            "  \"legs\": 4,",
            "  \"tails\": 1,",
            "  \"friends\": [\"everything!\"]",
            "};",
            "",
            "// 请把你的代码写在这条注释以下",
            "",
            "var myDog = {",
            "  ",
            "  ",
            "  ",
            "  ",
            "};"
          ],
          "head": [],
          "tail": [
            "(function(z){return z;})(myDog);"
          ]
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244c7",
      "title": "Accessing Object Properties with Dot Notation",
      "description": [
        "有两种方式访问对象属性，一个是点操作符(<code>.</code>)，一个是中括号操作符(<code>[]</code>)。",
        "当你知道属性的名称的时候，使用点操作符。",
        "这是一个使用点操作符读取对象属性的例子：",
        "<blockquote>var myObj = {<br>&nbsp;&nbsp;prop1: \"val1\",<br>&nbsp;&nbsp;prop2: \"val2\"<br>};<br>var prop1val = myObj.prop1; // val1<br>var prop2val = myObj.prop2; // val2</blockquote>",
        "<hr>",
        "通过点操作符读取对象<code>testObj</code>，把<code>hat</code>的属性值赋给变量<code>hatValue</code>，把<code>shirt</code>的属性值赋给<code>shirtValue</code>。"
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "var testObj = {\n  \"hat\": \"ballcap\",\n  \"shirt\": \"jersey\",\n  \"shoes\": \"cleats\"\n};\n\nvar hatValue = testObj.hat;  \nvar shirtValue = testObj.shirt;"
      ],
      "tests": [
        {
          "text": "<code>hatValue</code>应该是一个字符串",
          "testString": "assert(typeof hatValue === 'string' , '<code>hatValue</code>应该是一个字符串');"
        },
        {
          "text": "<code>hatValue</code>的值应该是<code>\"ballcap\"</code>",
          "testString": "assert(hatValue === 'ballcap' , '<code>hatValue</code>的值应该是<code>\"ballcap\"</code>');"
        },
        {
          "text": "<code>shirtValue</code>应该是一个字符串",
          "testString": "assert(typeof shirtValue === 'string' , '<code>shirtValue</code>应该是一个字符串');"
        },
        {
          "text": "<code>shirtValue</code>的值应该是<code>\"jersey\"</code>",
          "testString": "assert(shirtValue === 'jersey' , '<code>shirtValue</code>的值应该是<code>\"jersey\"</code>');"
        },
        {
          "text": "你应该使用点操作符两次",
          "testString": "assert(code.match(/testObj\\.\\w+/g).length > 1, '你应该使用点操作符两次');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// 初始化变量",
            "var testObj = {",
            "  \"hat\": \"ballcap\",",
            "  \"shirt\": \"jersey\",",
            "  \"shoes\": \"cleats\"",
            "};",
            "",
            "// 请把你的代码写在这条注释以下",
            "",
            "var hatValue = testObj;      // 请修改这一行",
            "var shirtValue = testObj;    // 请修改这一行"
          ],
          "head": [],
          "tail": [
            "(function(a,b) { return \"hatValue = '\" + a + \"', shirtValue = '\" + b + \"'\"; })(hatValue,shirtValue);"
          ]
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244c8",
      "title": "Accessing Object Properties with Bracket Notation",
      "description": [
        "第二种访问对象的方式就是中括号操作符(<code>[]</code>)，如果你想访问的属性的名称有一个空格，这时你只能使用中括号操作符(<code>[]</code>)。",
        "这是一个使用中括号操作符(<code>[]</code>)读取对象属性的例子：",
        "<blockquote>var myObj = {<br>&nbsp;&nbsp;\"Space Name\": \"Kirk\",<br>&nbsp;&nbsp;\"More Space\": \"Spock\",<br>&nbsp;&nbsp;\"NoSpace\": \"USS Enterprise\"<br>};<br>myObj[\"Space Name\"]; // Kirk<br>myObj['More Space']; // Spock<br>myObj[\"NoSpace\"];    // USS Enterprise</blockquote>",
        "提示：属性名称中如果有空格，必须把属性名称用单引号或双引号包裹起来。",
        "<hr>",
        "用中括号操作符读取对象<code>testObj</code>的属性<code>\"an entree\"</code>值和属性<code>\"the drink\"</code>值，并赋给<code>entreeValue</code>和<code>drinkValue</code>。"
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "var testObj = {\n  \"an entree\": \"hamburger\",\n  \"my side\": \"veggies\",\n  \"the drink\": \"water\"\n};\nvar entreeValue = testObj[\"an entree\"];\nvar drinkValue = testObj['the drink'];"
      ],
      "tests": [
        {
          "text": "<code>entreeValue</code>应该是一个字符串",
          "testString": "assert(typeof entreeValue === 'string' , '<code>entreeValue</code>应该是一个字符串');"
        },
        {
          "text": "<code>entreeValue</code>的值应该是<code>\"hamburger\"</code>",
          "testString": "assert(entreeValue === 'hamburger' , '<code>entreeValue</code>的值应该是<code>\"hamburger\"</code>');"
        },
        {
          "text": "<code>drinkValue</code>应该是一个字符串",
          "testString": "assert(typeof drinkValue === 'string' , '<code>drinkValue</code>应该是一个字符串');"
        },
        {
          "text": "<code>drinkValue</code>的值应该是<code>\"water\"</code>",
          "testString": "assert(drinkValue === 'water' , '<code>drinkValue</code>的值应该是<code>\"water\"</code>');"
        },
        {
          "text": "你应该使用中括号两次",
          "testString": "assert(code.match(/testObj\\s*?\\[('|\")[^'\"]+\\1\\]/g).length > 1, '你应该使用中括号两次');"
        }
      ],
      "challengeType": 1,
      "guideUrl": "https://guide.freecodecamp.org/certificates/accessing-objects-properties-with-bracket-notation",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// 初始化变量",
            "var testObj = {",
            "  \"an entree\": \"hamburger\",",
            "  \"my side\": \"veggies\",",
            "  \"the drink\": \"water\"",
            "};",
            "",
            "// 请把你的代码写在这条注释以下",
            "",
            "var entreeValue = testObj;   // 请修改这一行",
            "var drinkValue = testObj;    // 请修改这一行"
          ],
          "head": [],
          "tail": [
            "(function(a,b) { return \"entreeValue = '\" + a + \"', drinkValue = '\" + b + \"'\"; })(entreeValue,drinkValue);"
          ]
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244c9",
      "title": "Accessing Object Properties with Variables",
      "description": [
        "中括号操作符的另一个使用方式是用变量来访问一个属性。当你需要遍历对象的属性列表或查表时，这种方式极为有用。",
        "这有一个使用变量来访问属性的例子：",
        "<blockquote>var dogs = {<br>&nbsp;&nbsp;Fido: \"Mutt\",\n  Hunter: \"Doberman\",\n  Snoopie: \"Beagle\"<br>};<br>var myDog = \"Hunter\";<br>var myBreed = dogs[myDog];<br>console.log(myBreed); // \"Doberman\"</blockquote>",
        "还有更多：",
        "<blockquote>var someObj = {<br>&nbsp;&nbsp;propName: \"John\"<br>};<br>function propPrefix(str) {<br>&nbsp;&nbsp;var s = \"prop\";<br>&nbsp;&nbsp;return s + str;<br>}<br>var someProp = propPrefix(\"Name\"); // someProp now holds the value 'propName'<br>console.log(someObj[someProp]); // \"John\"</blockquote>",
        "提示：当我们通过变量名访问属性的时候，不需要给变量名包裹引号。因为实际上我们使用的是变量的值，而不是变量的名称。",
        "<hr>",
        "使用变量<code>playerNumber</code>，通过中括号操作符找到<code>testObj</code>中<code>playerNumber</code>为<code>16</code>的值。然后把名字赋给变量<code>player</code>。"
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "var testObj = {\n  12: \"Namath\",\n  16: \"Montana\",\n  19: \"Unitas\"\n};\nvar playerNumber = 16;\nvar player = testObj[playerNumber];"
      ],
      "tests": [
        {
          "text": "<code>playerNumber</code>应该是一个数字",
          "testString": "assert(typeof playerNumber === 'number', '<code>playerNumber</code>应该是一个数字');"
        },
        {
          "text": "变量<code>player</code>应该是一个字符串",
          "testString": "assert(typeof player === 'string', '变量<code>player</code>应该是一个字符串');"
        },
        {
          "text": "<code>player</code>点值应该是 \"Montana\"",
          "testString": "assert(player === 'Montana', '<code>player</code>点值应该是 \"Montana\"');"
        },
        {
          "text": "你应该使用中括号访问<code>testObj</code>",
          "testString": "assert(/testObj\\s*?\\[.*?\\]/.test(code),'你应该使用中括号访问<code>testObj</code>');"
        },
        {
          "text": "你不应该直接将<code>Montana</code>赋给<code>player</code>",
          "testString": "assert(!code.match(/player\\s*=\\s*\"|\\'\\s*Montana\\s*\"|\\'\\s*;/gi),'你不应该直接将<code>Montana</code>赋给<code>player</code>');"
        },
        {
          "text": "你应该在中括号中使用<code>playerNumber</code>变量",
          "testString": "assert(/testObj\\s*?\\[\\s*playerNumber\\s*\\]/.test(code),'你应该在中括号中使用<code>playerNumber</code>变量');"
        }
      ],
      "challengeType": 1,
      "guideUrl": "https://guide.freecodecamp.org/certificates/accessing-objects-properties-with-variables",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// 初始化变量",
            "var testObj = {",
            "  12: \"Namath\",",
            "  16: \"Montana\",",
            "  19: \"Unitas\"",
            "};",
            "",
            "// 请把你的代码写在这条注释以下;",
            "",
            "var playerNumber;       // 请修改这一行",
            "var player = testObj;   // 请修改这一行"
          ],
          "head": [],
          "tail": [
            "if(typeof player !== \"undefined\"){(function(v){return v;})(player);}"
          ]
        }
      }
    },
    {
      "id": "56bbb991ad1ed5201cd392d1",
      "title": "Updating Object Properties",
      "description": [
        "当你创建了一个对象后，你可以用点操作符或中括号操作符来更新对象的属性。",
        "举个例子，让我们看看<code>ourDog</code>:",
        "<blockquote>var ourDog = {<br>&nbsp;&nbsp;\"name\": \"Camper\",<br>&nbsp;&nbsp;\"legs\": 4,<br>&nbsp;&nbsp;\"tails\": 1,<br>&nbsp;&nbsp;\"friends\": [\"everything!\"]<br>};</blockquote>",
        "让我们更改它的名称为 \"Happy Camper\"，这有两种方式来更新对象的<code>name</code>属性：",
        "<code>ourDog.name = \"Happy Camper\";</code> or",
        "<code>ourDog[\"name\"] = \"Happy Camper\";</code>",
        "Now when we evaluate <code>ourDog.name</code>, instead of getting \"Camper\", we'll get his new name, \"Happy Camper\".",
        "<hr>",
        "更新<code>myDog</code>对象的<code>name</code>属性，让它的名字从 \"Coder\" 变成 \"Happy Coder\"。"
      ],
      "solutions": [
        "var myDog = {\n  \"name\": \"Coder\",\n  \"legs\": 4,\n  \"tails\": 1,\n  \"friends\": [\"freeCodeCamp Campers\"]\n};\nmyDog.name = \"Happy Coder\";"
      ],
      "tests": [
        {
          "text": "更新<code>myDog</code>的<code>\"name\"</code>属性, 使其等于 \"Happy Coder\"",
          "testString": "assert(/happy coder/gi.test(myDog.name), '更新<code>myDog</code>的<code>\"name\"</code>属性, 使其等于 \"Happy Coder\"');"
        },
        {
          "text": "不要修改<code>myDog</code>的定义",
          "testString": "assert(/\"name\": \"Coder\"/.test(code), '不要修改<code>myDog</code>的定义');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// 示例",
            "var ourDog = {",
            "  \"name\": \"Camper\",",
            "  \"legs\": 4,",
            "  \"tails\": 1,",
            "  \"friends\": [\"everything!\"]",
            "};",
            "",
            "ourDog.name = \"Happy Camper\";",
            "",
            "// 初始化变量",
            "var myDog = {",
            "  \"name\": \"Coder\",",
            "  \"legs\": 4,",
            "  \"tails\": 1,",
            "  \"friends\": [\"freeCodeCamp Campers\"]",
            "};",
            "",
            "// 请把你的代码写在这条注释以下",
            "",
            ""
          ],
          "head": [],
          "tail": [
            "(function(z){return z;})(myDog);"
          ]
        }
      }
    },
    {
      "id": "56bbb991ad1ed5201cd392d2",
      "title": "Add New Properties to a JavaScript Object",
      "description": [
        "你也可以像更改属性一样给对象添加属性。",
        "看看我们是如何给<code>ourDog</code>添加<code>\"bark\"</code>属性：",
        "<code>ourDog.bark = \"bow-wow\";</code> ",
        "或者",
        "<code>ourDog[\"bark\"] = \"bow-wow\";</code>",
        "现在当我们访问<code>ourDog.bark</code>时会得到 ourDog 的 bark 值 \"bow-wow\".",
        "<hr>",
        "给<code>myDog</code>添加一个<code>\"bark\"</code>属性，设置它的值为狗的声音，例如：\"woof\"。"
      ],
      "solutions": [
        "var myDog = {\n  \"name\": \"Happy Coder\",\n  \"legs\": 4,\n  \"tails\": 1,\n  \"friends\": [\"freeCodeCamp Campers\"]\n};\nmyDog.bark = \"Woof Woof\";"
      ],
      "tests": [
        {
          "text": "给<code>myDog</code>添加<code>\"bark\"</code>属性",
          "testString": "assert(myDog.bark !== undefined, '给<code>myDog</code>添加<code>\"bark\"</code>属性');"
        },
        {
          "text": "不能在初始化 myDog 的时候添加<code>\"bark\"</code>属性",
          "testString": "assert(!/bark[^\\n]:/.test(code), '不能在初始化 myDog 的时候添加<code>\"bark\"</code>属性');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// 示例",
            "var ourDog = {",
            "  \"name\": \"Camper\",",
            "  \"legs\": 4,",
            "  \"tails\": 1,",
            "  \"friends\": [\"everything!\"]",
            "};",
            "",
            "ourDog.bark = \"bow-wow\";",
            "",
            "// 初始化变量",
            "var myDog = {",
            "  \"name\": \"Happy Coder\",",
            "  \"legs\": 4,",
            "  \"tails\": 1,",
            "  \"friends\": [\"freeCodeCamp Campers\"]",
            "};",
            "",
            "// 请把你的代码写在这条注释以下",
            ""
          ],
          "head": [],
          "tail": [
            "(function(z){return z;})(myDog);"
          ]
        }
      }
    },
    {
      "id": "56bbb991ad1ed5201cd392d3",
      "title": "Delete Properties from a JavaScript Object",
      "description": [
        "我们同样可以删除对象的属性，例如：",
        "<code>delete ourDog.bark;</code>",
        "<hr>",
        "删除<code>myDog</code>对象的<code>\"tails\"</code>属性。"
      ],
      "solutions": [
        "var ourDog = {\n  \"name\": \"Camper\",\n  \"legs\": 4,\n  \"tails\": 1,\n  \"friends\": [\"everything!\"],\n  \"bark\": \"bow-wow\"\n};\nvar myDog = {\n  \"name\": \"Happy Coder\",\n  \"legs\": 4,\n  \"tails\": 1,\n  \"friends\": [\"freeCodeCamp Campers\"],\n  \"bark\": \"woof\"\n};\ndelete myDog.tails;"
      ],
      "tests": [
        {
          "text": "从<code>myDog</code>中删除<code>\"tails\"</code>属性",
          "testString": "assert(typeof myDog === \"object\" && myDog.tails === undefined, '从<code>myDog</code>中删除<code>\"tails\"</code>属性');"
        },
        {
          "text": "不要修改<code>myDog</code>的初始化",
          "testString": "assert(code.match(/\"tails\": 1/g).length > 1, '不要修改<code>myDog</code>的初始化');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// 示例",
            "var ourDog = {",
            "  \"name\": \"Camper\",",
            "  \"legs\": 4,",
            "  \"tails\": 1,",
            "  \"friends\": [\"everything!\"],",
            "  \"bark\": \"bow-wow\"",
            "};",
            "",
            "delete ourDog.bark;",
            "",
            "// 初始化变量",
            "var myDog = {",
            "  \"name\": \"Happy Coder\",",
            "  \"legs\": 4,",
            "  \"tails\": 1,",
            "  \"friends\": [\"freeCodeCamp Campers\"],",
            "  \"bark\": \"woof\"",
            "};",
            "",
            "// 请把你的代码写在这条注释以下",
            "",
            ""
          ],
          "head": [],
          "tail": [
            "(function(z){return z;})(myDog);"
          ]
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244ca",
      "title": "Using Objects for Lookups",
      "description": [
        "对象和字典一样，可以用来存储键/值对。如果你的数据跟对象一样，你可以用对象来查找你想要的值，而不是使用switch或if/else语句。当你知道你的输入数据在某个范围时，这种查找方式极为有效。",
        "这是简单的反向字母表：",
        "<blockquote>var alpha = {<br>&nbsp;&nbsp;1:\"Z\",<br>&nbsp;&nbsp;2:\"Y\",<br>&nbsp;&nbsp;3:\"X\",<br>&nbsp;&nbsp;4:\"W\",<br>&nbsp;&nbsp;...<br>&nbsp;&nbsp;24:\"C\",<br>&nbsp;&nbsp;25:\"B\",<br>&nbsp;&nbsp;26:\"A\"<br>};<br>alpha[2]; // \"Y\"<br>alpha[24]; // \"C\"<br><br>var value = 2;<br>alpha[value]; // \"Y\"</blockquote>",
        "<hr>",
        "把 switch 语句转化为<code>lookup</code>对象。使用它来查找<code>val</code>属性的值，并赋值给<code>result</code>变量。"
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "function phoneticLookup(val) {\n  var result = \"\";\n\n  var lookup = {\n    alpha: \"Adams\",\n    bravo: \"Boston\",\n    charlie: \"Chicago\",\n    delta: \"Denver\",\n    echo: \"Easy\",\n    foxtrot: \"Frank\"\n  };\n\n  result = lookup[val];\n\n  return result;\n}"
      ],
      "tests": [
        {
          "text": "<code>phoneticLookup(\"alpha\")</code>应该等于<code>\"Adams\"</code>",
          "testString": "assert(phoneticLookup(\"alpha\") === 'Adams', '<code>phoneticLookup(\"alpha\")</code>应该等于<code>\"Adams\"</code>');"
        },
        {
          "text": "<code>phoneticLookup(\"bravo\")</code>应该等于<code>\"Boston\"</code>",
          "testString": "assert(phoneticLookup(\"bravo\") === 'Boston', '<code>phoneticLookup(\"bravo\")</code>应该等于<code>\"Boston\"</code>');"
        },
        {
          "text": "<code>phoneticLookup(\"charlie\")</code>应该等于<code>\"Chicago\"</code>",
          "testString": "assert(phoneticLookup(\"charlie\") === 'Chicago', '<code>phoneticLookup(\"charlie\")</code>应该等于<code>\"Chicago\"</code>');"
        },
        {
          "text": "<code>phoneticLookup(\"delta\")</code>应该等于<code>\"Denver\"</code>",
          "testString": "assert(phoneticLookup(\"delta\") === 'Denver', '<code>phoneticLookup(\"delta\")</code>应该等于<code>\"Denver\"</code>');"
        },
        {
          "text": "<code>phoneticLookup(\"echo\")</code>应该等于<code>\"Easy\"</code>",
          "testString": "assert(phoneticLookup(\"echo\") === 'Easy', '<code>phoneticLookup(\"echo\")</code>应该等于<code>\"Easy\"</code>');"
        },
        {
          "text": "<code>phoneticLookup(\"foxtrot\")</code>应该等于<code>\"Frank\"</code>",
          "testString": "assert(phoneticLookup(\"foxtrot\") === 'Frank', '<code>phoneticLookup(\"foxtrot\")</code>应该等于<code>\"Frank\"</code>');"
        },
        {
          "text": "<code>phoneticLookup(\"\")</code>应该等于<code>undefined</code>",
          "testString": "assert(typeof phoneticLookup(\"\") === 'undefined', '<code>phoneticLookup(\"\")</code>应该等于<code>undefined</code>');"
        },
        {
          "text": "请不要修改<code>return</code>语句",
          "testString": "assert(code.match(/return\\sresult;/), '请不要修改<code>return</code>语句');"
        },
        {
          "text": "请不要使用<code>case</code>，<code>switch</code>，或<code>if</code>语句",
          "testString": "assert(!/case|switch|if/g.test(code), '请不要使用<code>case</code>，<code>switch</code>,或<code>if</code>语句'); "
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// 初始化变量",
            "function phoneticLookup(val) {",
            "  var result = \"\";",
            "",
            "  // 请把你的代码写在这条注释以下",
            "  switch(val) {",
            "    case \"alpha\": ",
            "      result = \"Adams\";",
            "      break;",
            "    case \"bravo\": ",
            "      result = \"Boston\";",
            "      break;",
            "    case \"charlie\": ",
            "      result = \"Chicago\";",
            "      break;",
            "    case \"delta\": ",
            "      result = \"Denver\";",
            "      break;",
            "    case \"echo\": ",
            "      result = \"Easy\";",
            "      break;",
            "    case \"foxtrot\": ",
            "      result = \"Frank\";",
            "  }",
            "",
            "  // 请把你的代码写在这条注释以上",
            "  return result;",
            "}",
            "",
            "// 你可以修改这一行来测试你的代码",
            "phoneticLookup(\"charlie\");"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "567af2437cbaa8c51670a16c",
      "title": "Testing Objects for Properties",
      "description": [
        "有时检查一个对象属性是否存在是非常有用的，我们可以用<code>.hasOwnProperty(propname)</code>方法来检查对象是否有该属性。如果有返回<code>true</code>，反之返回<code>false</code>。",
        "<strong>示例</strong>",
        "<blockquote>var myObj = {<br>&nbsp;&nbsp;top: \"hat\",<br>&nbsp;&nbsp;bottom: \"pants\"<br>};<br>myObj.hasOwnProperty(\"top\");    // true<br>myObj.hasOwnProperty(\"middle\"); // false</blockquote>",
        "<hr>",
        "修改函数<code>checkObj</code>检查<code>myObj</code>是否有<code>checkProp</code>属性，如果属性存在，返回属性对应的值，如果不存在，返回<code>\"Not Found\"</code>。"
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "var myObj = {\n  gift: \"pony\",\n  pet: \"kitten\",\n  bed: \"sleigh\"\n};\nfunction checkObj(checkProp) {\n  if(myObj.hasOwnProperty(checkProp)) {\n    return myObj[checkProp];\n  } else {\n    return \"Not Found\";\n  }\n}"
      ],
      "tests": [
        {
          "text": "<code>checkObj(\"gift\")</code>应该返回<code>\"pony\"</code>.",
          "testString": "assert(checkObj(\"gift\") === \"pony\", '<code>checkObj(\"gift\")</code>应该返回 <code>\"pony\"</code>.');"
        },
        {
          "text": "<code>checkObj(\"pet\")</code>应该返回<code>\"kitten\"</code>.",
          "testString": "assert(checkObj(\"pet\") === \"kitten\", '<code>checkObj(\"pet\")</code>应该返回 <code>\"kitten\"</code>.');"
        },
        {
          "text": "<code>checkObj(\"house\")</code>应该返回<code>\"Not Found\"</code>.",
          "testString": "assert(checkObj(\"house\") === \"Not Found\", '<code>checkObj(\"house\")</code>应该返回<code>\"Not Found\"</code>.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// 初始化变量",
            "var myObj = {",
            "  gift: \"pony\",",
            "  pet: \"kitten\",",
            "  bed: \"sleigh\"",
            "};",
            "",
            "function checkObj(checkProp) {",
            "  // 请把你的代码写在这条注释以下",
            "  ",
            "  return \"Change Me!\";",
            "}",
            "",
            "// 你可以修改这一行来测试你的代码",
            "checkObj(\"gift\");"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244cb",
      "title": "Manipulating Complex Objects",
      "description": [
        "有时你可能希望将数据存储在灵活的<dfn>数据结构</dfn>中。JavaScript 对象是处理灵活数据的一种方法。它可以储存<dfn>字符串</dfn>，<dfn>数字</dfn>，<dfn>布尔值</dfn>，<dfn>函数</dfn>，和<dfn>对象</dfn>以及这些值的任意组合。",
        "这是一个复杂数据结构的示例：",
        "<blockquote>var ourMusic = [<br>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;\"artist\": \"Daft Punk\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\"title\": \"Homework\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\"release_year\": 1997,<br>&nbsp;&nbsp;&nbsp;&nbsp;\"formats\": [ <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"CD\", <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"Cassette\", <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"LP\"<br>&nbsp;&nbsp;&nbsp;&nbsp;],<br>&nbsp;&nbsp;&nbsp;&nbsp;\"gold\": true<br>&nbsp;&nbsp;}<br>];</blockquote>",
        "这是一个对象数组，并且对象有各种关于专辑的 <dfn>详细信息</dfn>。它也有一个嵌套的<code>formats</code>的数组。附加专辑记录可以被添加到数组的最上层。",
        "对象将数据以一种键-值对的形式保存。在上面的示例中，<code>\"artist\": \"Daft Punk\"</code>是一个具有<code>\"artist\"</code>键和<code>\"Daft Punk\"</code>值的属性。",
        "<a href='http://www.json.org/' target=_blank>JavaScript Object Notation</a> 简称<code>JSON</code>是用于存储数据的相关数据交换格式。",
        "<blockquote>{<br>&nbsp;&nbsp;\"artist\": \"Daft Punk\",<br>&nbsp;&nbsp;\"title\": \"Homework\",<br>&nbsp;&nbsp;\"release_year\": 1997,<br>&nbsp;&nbsp;\"formats\": [ <br>&nbsp;&nbsp;&nbsp;&nbsp;\"CD\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\"Cassette\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\"LP\"<br>&nbsp;&nbsp;],<br>&nbsp;&nbsp;\"gold\": true<br>}</blockquote>",
        "<strong>提示</strong><br>数组中有多个 JSON 对象的时候，对象与对象之间要用逗号隔开。",
        "<hr>",
        "添加一个新专辑到<code>myMusic</code>的JSON对象。添加<code>artist</code>和<code>title</code>字符串，<code>release_year</code>数字和<code>formats</code>字符串数组。"
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "var myMusic = [\n  {\n    \"artist\": \"Billy Joel\",\n    \"title\": \"Piano Man\",\n    \"release_year\": 1973,\n    \"formats\": [ \n      \"CS\", \n      \"8T\", \n      \"LP\" ],\n    \"gold\": true\n  }, \n  {\n    \"artist\": \"ABBA\",\n    \"title\": \"Ring Ring\",\n    \"release_year\": 1973,\n    \"formats\": [ \n      \"CS\", \n      \"8T\", \n      \"LP\",\n    \"CD\",\n  ]\n  }\n];"
      ],
      "tests": [
        {
          "text": "<code>myMusic</code>应该是一个数组",
          "testString": "assert(Array.isArray(myMusic), '<code>myMusic</code>应该是一个数组');"
        },
        {
          "text": "<code>myMusic</code>应该至少包含两个元素",
          "testString": "assert(myMusic.length > 1, '<code>myMusic</code>应该至少包含两个元素');"
        },
        {
          "text": "<code>myMusic[1]</code>应该是一个对象",
          "testString": "assert(typeof myMusic[1] === 'object', '<code>myMusic[1]</code>应该是一个对象');"
        },
        {
          "text": "<code>myMusic[1]</code>至少要包含四个属性",
          "testString": "assert(Object.keys(myMusic[1]).length > 3, '<code>myMusic[1]</code>至少要包含四个属性');"
        },
        {
          "text": "<code>myMusic[1]</code>应该包含一个类型为字符串的<code>artist</code>的属性",
          "testString": "assert(myMusic[1].hasOwnProperty('artist') && typeof myMusic[1].artist === 'string', '<code>myMusic[1]</code>应该包含一个类型为字符串的<code>artist</code>的属性');"
        },
        {
          "text": "<code>myMusic[1]</code>应该包含一个类型为字符串的<code>title</code>的属性",
          "testString": "assert(myMusic[1].hasOwnProperty('title') && typeof myMusic[1].title === 'string', '<code>myMusic[1]</code>应该包含一个类型为字符串的<code>title</code>的属性');"
        },
        {
          "text": "<code>myMusic[1]</code>应该包含一个类型为数字的<code>release_year</code> 应该包含一个类型为数字的属性",
          "testString": "assert(myMusic[1].hasOwnProperty('release_year') && typeof myMusic[1].release_year === 'number', '<code>myMusic[1]</code>应该包含一个类型为数字的<code>release_year</code> 应该包含一个类型为数字的属性');"
        },
        {
          "text": "<code>myMusic[1]</code>应该包含一个类型为数组的<code>formats</code>属性",
          "testString": "assert(myMusic[1].hasOwnProperty('formats') && Array.isArray(myMusic[1].formats), '<code>myMusic[1]</code>应该包含一个类型为数组的<code>formats</code>属性');"
        },
        {
          "text": "<code>formats</code>应该是一个至少包含两个字符串元素的数组",
          "testString": "assert(myMusic[1].formats.every(function(item) { return (typeof item === \"string\")}) && myMusic[1].formats.length > 1, '<code>formats</code>应该是一个至少包含两个字符串元素的数组');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "var myMusic = [",
            "  {",
            "    \"artist\": \"Billy Joel\",",
            "    \"title\": \"Piano Man\",",
            "    \"release_year\": 1973,",
            "    \"formats\": [ ",
            "      \"CD\",",
            "      \"8T\",",
            "      \"LP\"",
            "    ],",
            "    \"gold\": true",
            "  }",
            "  // 请在这里添加专辑",
            "];",
            ""
          ],
          "head": [],
          "tail": [
            "(function(x){ if (Array.isArray(x)) { return JSON.stringify(x); } return \"myMusic is not an array\"})(myMusic);"
          ]
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244cc",
      "title": "Accessing Nested Objects",
      "description": [
        "通过串联起来的点操作符或中括号操作符来访问对象的嵌套属性。",
        "下面是一个嵌套的对象：",
        "<blockquote>var ourStorage = {<br>&nbsp;&nbsp;\"desk\": {<br>&nbsp;&nbsp;&nbsp;&nbsp;\"drawer\": \"stapler\"<br>&nbsp;&nbsp;},<br>&nbsp;&nbsp;\"cabinet\": {<br>&nbsp;&nbsp;&nbsp;&nbsp;\"top drawer\": { <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"folder1\": \"a file\",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"folder2\": \"secrets\"<br>&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;\"bottom drawer\": \"soda\"<br>&nbsp;&nbsp;}<br>};<br>ourStorage.cabinet[\"top drawer\"].folder2;  // \"secrets\"<br>ourStorage.desk.drawer; // \"stapler\"</blockquote>",
        "<hr>",
        "检索对象<code>myStorage</code>中嵌套属性<code>glove box</code>的值。因为属性的名字带有空格，请使用中括号操作符来访问属性的值。"
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "var myStorage = {  \n  \"car\":{  \n    \"inside\":{  \n      \"glove box\":\"maps\",\n      \"passenger seat\":\"crumbs\"\n    },\n    \"outside\":{  \n      \"trunk\":\"jack\"\n    }\n  }\n};\nvar gloveBoxContents = myStorage.car.inside[\"glove box\"];"
      ],
      "tests": [
        {
          "text": "<code>gloveBoxContents</code>应该等于\"maps\"",
          "testString": "assert(gloveBoxContents === \"maps\", '<code>gloveBoxContents</code>应该等于\"maps\"');"
        },
        {
          "text": "Use dot and bracket notation to access <code>myStorage</code>",
          "testString": "assert(/=\\s*myStorage\\.car\\.inside\\[\\s*(\"|')glove box\\1\\s*\\]/g.test(code), 'Use dot and bracket notation to access <code>myStorage</code>');"
        }
      ],
      "challengeType": 1,
      "guideUrl": "https://guide.freecodecamp.org/certificates/accessing-nested-objects-in-json",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// 初始化变量",
            "var myStorage = {",
            "  \"car\": {",
            "    \"inside\": {",
            "      \"glove box\": \"maps\",",
            "      \"passenger seat\": \"crumbs\"",
            "     },",
            "    \"outside\": {",
            "      \"trunk\": \"jack\"",
            "    }",
            "  }",
            "};",
            "",
            "var gloveBoxContents = undefined; // 请修改这一行",
            ""
          ],
          "head": [],
          "tail": [
            "(function(x) { ",
            "  if(typeof x != 'undefined') { ",
            "    return \"gloveBoxContents = \" + x;",
            "  }",
            "  return \"gloveBoxContents is undefined\";",
            "})(gloveBoxContents);"
          ]
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244cd",
      "title": "Accessing Nested Arrays",
      "description": [
        "正如我们在前面的例子所见，对象可以嵌套对象和数组。与访问嵌套对象一样，用中括号操作符同样可以访问嵌套数组。",
        "下面是如何访问嵌套数组的例子：",
        "<blockquote>var ourPets = [<br>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;animalType: \"cat\",<br>&nbsp;&nbsp;&nbsp;&nbsp;names: [<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"Meowzer\",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"Fluffy\",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"Kit-Cat\"<br>&nbsp;&nbsp;&nbsp;&nbsp;]<br>&nbsp;&nbsp;},<br>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;animalType: \"dog\",<br>&nbsp;&nbsp;&nbsp;&nbsp;names: [<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"Spot\",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"Bowser\",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"Frankie\"<br>&nbsp;&nbsp;&nbsp;&nbsp;]<br>&nbsp;&nbsp;}<br>];<br>ourPets[0].names[1]; // \"Fluffy\"<br>ourPets[1].names[0]; // \"Spot\"</blockquote>",
        "<hr>",
        "使用点操作符和中括号操作符来检索变量<code>myPlants</code>的第二棵树。"
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "var myPlants = [\n  { \n    type: \"flowers\",\n    list: [\n      \"rose\",\n      \"tulip\",\n      \"dandelion\"\n    ]\n  },\n  {\n    type: \"trees\",\n    list: [\n      \"fir\",\n      \"pine\",\n      \"birch\"\n    ]\n  }  \n];\n\n// 请把你的代码写在这条注释以下\n\nvar secondTree = myPlants[1].list[1];"
      ],
      "tests": [
        {
          "text": "<code>secondTree</code>应该等于 \"pine\"",
          "testString": "assert(secondTree === \"pine\", '<code>secondTree</code>应该等于 \"pine\"');"
        },
        {
          "text": "使用点操作符和中括号操作符来检索变量<code>myPlants</code>",
          "testString": "assert(/=\\s*myPlants\\[1\\].list\\[1\\]/.test(code), '使用点操作符和中括号操作符来检索变量<code>myPlants</code>');"
        }
      ],
      "challengeType": 1,
      "guideUrl": "https://guide.freecodecamp.org/certificates/access-array-data-with-indexes",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// 初始化变量",
            "var myPlants = [",
            "  { ",
            "    type: \"flowers\",",
            "    list: [",
            "      \"rose\",",
            "      \"tulip\",",
            "      \"dandelion\"",
            "    ]",
            "  },",
            "  {",
            "    type: \"trees\",",
            "    list: [",
            "      \"fir\",",
            "      \"pine\",",
            "      \"birch\"",
            "    ]",
            "  }  ",
            "];",
            "",
            "// 请把你的代码写在这条注释以下",
            "",
            "var secondTree = \"\"; // 请修改这一行",
            ""
          ],
          "head": [],
          "tail": [
            "(function(x) { ",
            "  if(typeof x != 'undefined') { ",
            "    return \"secondTree = \" + x;",
            "  }",
            "  return \"secondTree is undefined\";",
            "})(secondTree);"
          ]
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244cf",
      "title": "Record Collection",
      "description": [
        "你将获得一个 JSON 对象，用来表示你的部分音乐专辑收藏。每张专辑都有几个属性和一个唯一的 id 号作为键值。并非所有专辑都有完整的信息。",
        "写一个功能，获取一个专辑的<code>id</code>（如<code>2548</code>），属性<code>prop</code>（如“code>\"artist\"</code>或<code>\"tracks\"</code>），以及一个值<code>value</code>（如<code>\"Addicted to Love\"</code>）来修改音乐专辑收藏的数据。",
        "如果属性<code>prop</code>不是<code>\"tracks\"</code>且值<code>value</code>不为空（<code>\"\"</code>），则更新或设置该专辑属性的值<code>value</code>。",
        "你的函数必须始终返回整个音乐专辑集合对象。",
        "处理不完整数据有几条规则：",
        "如果属性<code>prop</code>是<code>\"tracks\"</code>，但是专辑没有<code>\"tracks\"</code>属性，则在添加值之前先给<code>\"tracks\"</code>创建一个空数组。",
        "如果<code>prop</code>是<code>\"tracks\"</code>，并且值<code>value</code>不为空（<code>\"\"</code>）， 把值<code>value</code>添加到<code>tracks</code>数组中。",
        "如果值<code>value</code>为空（<code>\"\"</code>），则删除专辑的这一属性<code>prop</code>",
        "<strong>提示</strong><br>使用<code>中括号</code>当<a href=\"javascript-algorithms-and-data-structures/basic-javascript/accessing-object-properties-with-variables\" target=\"_blank\">通过变量访问对象的属性的时候</a>.",
        "Push 是一个数组方法，详情请查看<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push\" target=\"_blank\">Mozilla Developer Network</a>.",
        "你可以参考这一节的内容<a href=\"javascript-algorithms-and-data-structures/basic-javascript/manipulating-complex-objects\" target=\"_blank\">Manipulating Complex Objects</a>复习相关知识。"
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "var collection = {\n    2548: {\n      album: \"Slippery When Wet\",\n      artist: \"Bon Jovi\",\n      tracks: [ \n        \"Let It Rock\", \n        \"You Give Love a Bad Name\" \n      ]\n    },\n    2468: {\n      album: \"1999\",\n      artist: \"Prince\",\n      tracks: [ \n        \"1999\", \n        \"Little Red Corvette\" \n      ]\n    },\n    1245: {\n      artist: \"Robert Palmer\",\n      tracks: [ ]\n    },\n    5439: {\n      album: \"ABBA Gold\"\n    }\n};\n// Keep a copy of the collection for tests\nvar collectionCopy = JSON.parse(JSON.stringify(collection));\n\n// 请把你的代码写在这条注释以下\nfunction updateRecords(id, prop, value) {\n  if(value === \"\") delete collection[id][prop];\n  else if(prop === \"tracks\") {\n    collection[id][prop] = collection[id][prop] || [];\n    collection[id][prop].push(value);\n  } else {\n    collection[id][prop] = value;\n  }\n  \n  return collection;\n}"
      ],
      "tests": [
        {
          "text": "执行<code>updateRecords(5439, \"artist\", \"ABBA\")</code>，后<code>artist</code>属性值应该是<code>\"ABBA\"</code>",
          "testString": "collection = collectionCopy; assert(updateRecords(5439, \"artist\", \"ABBA\")[5439][\"artist\"] === \"ABBA\", '执行<code>updateRecords(5439, \"artist\", \"ABBA\")</code>，后<code>artist</code>属性值应该是<code>\"ABBA\"</code>');"
        },
        {
          "text": "执行<code>updateRecords(5439, \"tracks\", \"Take a Chance on Me\")</code>，后<code>tracks</code>最后的元素应该是<code>\"Take a Chance on Me\"</code>",
          "testString": "assert(updateRecords(5439, \"tracks\", \"Take a Chance on Me\")[5439][\"tracks\"].pop() === \"Take a Chance on Me\", '执行<code>updateRecords(5439, \"tracks\", \"Take a Chance on Me\")</code>，后<code>tracks</code>最后的元素应该是<code>\"Take a Chance on Me\"</code>');"
        },
        {
          "text": "执行<code>updateRecords(2548, \"artist\", \"\")</code>，后<code>artist</code> should not be set",
          "testString": "updateRecords(2548, \"artist\", \"\"); assert(!collection[2548].hasOwnProperty(\"artist\"), '执行<code>updateRecords(2548, \"artist\", \"\")</code>，后<code>artist</code> should not be set');"
        },
        {
          "text": "执行<code>updateRecords(1245, \"tracks\", \"Addicted to Love\")</code>，后<code>tracks</code>最后的元素应该是<code>\"Addicted to Love\"</code>",
          "testString": "assert(updateRecords(1245, \"tracks\", \"Addicted to Love\")[1245][\"tracks\"].pop() === \"Addicted to Love\", '执行<code>updateRecords(1245, \"tracks\", \"Addicted to Love\")</code>，后<code>tracks</code>最后的元素应该是<code>\"Addicted to Love\"</code>');"
        },
        {
          "text": "执行<code>updateRecords(2468, \"tracks\", \"Free\")</code>，后<code>tracks</code>第一个元素应该是<code>\"1999\"</code>",
          "testString": "assert(updateRecords(2468, \"tracks\", \"Free\")[2468][\"tracks\"][0] === \"1999\", '执行<code>updateRecords(2468, \"tracks\", \"Free\")</code>，后<code>tracks</code>第一个元素应该是<code>\"1999\"</code>');"
        },
        {
          "text": "执行<code>updateRecords(2548, \"tracks\", \"\")</code>，后<code>tracks</code>应该被创建",
          "testString": "updateRecords(2548, \"tracks\", \"\"); assert(!collection[2548].hasOwnProperty(\"tracks\"), '执行<code>updateRecords(2548, \"tracks\", \"\")</code>，后<code>tracks</code>应该被创建');"
        },
        {
          "text": "执行<code>updateRecords(1245, \"album\", \"Riptide\")</code>，后<code>album</code>应该是<code>\"Riptide\"</code>",
          "testString": "assert(updateRecords(1245, \"album\", \"Riptide\")[1245][\"album\"] === \"Riptide\", 'After <code>updateRecords(1245, \"album\", \"Riptide\")</code>，后<code>album</code>应该是<code>\"Riptide\"</code>');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// 初始化变量",
            "var collection = {",
            "    \"2548\": {",
            "      \"album\": \"Slippery When Wet\",",
            "      \"artist\": \"Bon Jovi\",",
            "      \"tracks\": [ ",
            "        \"Let It Rock\", ",
            "        \"You Give Love a Bad Name\" ",
            "      ]",
            "    },",
            "    \"2468\": {",
            "      \"album\": \"1999\",",
            "      \"artist\": \"Prince\",",
            "      \"tracks\": [ ",
            "        \"1999\", ",
            "        \"Little Red Corvette\" ",
            "      ]",
            "    },",
            "    \"1245\": {",
            "      \"artist\": \"Robert Palmer\",",
            "      \"tracks\": [ ]",
            "    },",
            "    \"5439\": {",
            "      \"album\": \"ABBA Gold\"",
            "    }",
            "};",
            "// 复制 collection 以便测试",
            "var collectionCopy = JSON.parse(JSON.stringify(collection));",
            "",
            "// 请把你的代码写在这条注释以下",
            "function updateRecords(id, prop, value) {",
            "  ",
            "  ",
            "  return collection;",
            "}",
            "",
            "// 你可以修改这一行来测试你的代码",
            "updateRecords(5439, \"artist\", \"ABBA\");",
            ""
          ],
          "head": [],
          "tail": [
            ";(function(x) { return \"collection = \\n\" + JSON.stringify(x, '\\n', 2); })(collection);"
          ]
        }
      }
    },
    {
      "id": "cf1111c1c11feddfaeb1bdef",
      "title": "Iterate with JavaScript While Loops",
      "description": [
        "你可以使用循环多次执行相同的代码。",
        "我们将学习的第一种类型的循环称为 \"<code>while</code>\" 循环，因为它规定，当 \"while\" 条件为真，循环才会执行，反之不执行。",
        "<blockquote>var ourArray = [];<br>var i = 0;<br>while(i &#60; 5) {<br>&nbsp;&nbsp;ourArray.push(i);<br>&nbsp;&nbsp;i++;<br>}</blockquote>",
        "让我们通过 while 循环将值添加到数组中。",
        "<hr>",
        "通过一个<code>while</code>循环，把从 0 到 4 的值添加到<code>myArray</code>中。"
      ],
      "solutions": [
        "var myArray = [];\nvar i = 0;\nwhile(i < 5) {\n  myArray.push(i);\n  i++;\n}"
      ],
      "tests": [
        {
          "text": "你应该使用<code>while</code>循环",
          "testString": "assert(code.match(/while/g), '你应该使用<code>while</code>循环');"
        },
        {
          "text": "<code>myArray</code>应该等于<code>[0,1,2,3,4]</code>.",
          "testString": "assert.deepEqual(myArray, [0,1,2,3,4], '<code>myArray</code>应该等于<code>[0,1,2,3,4]</code>.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// 初始化变量",
            "var myArray = [];",
            "",
            "// 请把你的代码写在这条注释以下",
            "",
            ""
          ],
          "head": [],
          "tail": [
            "if(typeof myArray !== \"undefined\"){(function(){return myArray;})();}"
          ]
        }
      }
    },
    {
      "id": "cf1111c1c11feddfaeb5bdef",
      "title": "Iterate with JavaScript For Loops",
      "description": [
        "你可以使用循环多次执行相同的代码。",
        "JavaScript 中最常见的循环就是“<code>for循环</code>”。",
        "for循环中的三个表达式用分号隔开：",
        "<code>for ([初始化]; [条件判断]; [计数器])</code>",
        "<code>初始化</code>语句只会在执行循环开始之前执行一次。它通常用于定义和设置你的循环变量。",
        "<code>条件判断</code>语句会在每一轮循环的开始执行，只要条件判断为<code>true</code>就会继续执行循环。当条件为<code>false</code>的时候，循环将停止执行。这意味着，如果条件在一开始就为<code>false</code>，这个循环将不会执行。",
        "<code>计数器</code>是在每一轮循环结束时执行，通常用于递增或递减。",
        "在下面的例子中，先初始化<code>i = 0</code>，条件<code>i &#60; 5</code>为真，进入第一次循环，执行大括号里的代码，第一次循环结束。递增<code>i</code>的值，条件判断，就这样依次执行下去，直到条件判断为假，整个循环结束。",
        "<blockquote>var ourArray = [];<br>for (var i = 0; i &#60; 5; i++) {<br>&nbsp;&nbsp;ourArray.push(i);<br>}</blockquote>",
        "最终<code>ourArray</code>的值为<code>[0,1,2,3,4]</code>.",
        "<hr>",
        "使用<code>for</code>循环把从 1 到 5 添加进<code>myArray</code>中。"
      ],
      "solutions": [
        "var ourArray = [];\nfor (var i = 0; i < 5; i++) {\n  ourArray.push(i);\n}\nvar myArray = [];\nfor (var i = 1; i < 6; i++) {\n  myArray.push(i);\n}"
      ],
      "tests": [
        {
          "text": "你应该使用<code>for</code>循环",
          "testString": "assert(code.match(/for\\s*\\(/g).length > 1, '你应该使用<code>for</code>循环');"
        },
        {
          "text": "<code>myArray</code>应该等于<code>[1,2,3,4,5]</code>",
          "testString": "assert.deepEqual(myArray, [1,2,3,4,5], '<code>myArray</code>应该等于<code>[1,2,3,4,5]</code>');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// 示例",
            "var ourArray = [];",
            "",
            "for (var i = 0; i < 5; i++) {",
            "  ourArray.push(i);",
            "}",
            "",
            "// 初始化变量",
            "var myArray = [];",
            "",
            "// 请把你的代码写在这条注释以下",
            "",
            ""
          ],
          "head": [],
          "tail": [
            "if (typeof myArray !== \"undefined\"){(function(){return myArray;})();}"
          ]
        }
      }
    },
    {
      "id": "56104e9e514f539506016a5c",
      "title": "Iterate Odd Numbers With a For Loop",
      "description": [
        "for循环可以按照我们指定的顺序来迭代，通过更改我们的<code>计数器</code>，我们可以按照偶数顺序来迭代。",
        "初始化<code>i = 0</code>，当<code>i < 10</code>的时候继续循环。",
        "<code>i += 2</code>让<code>i</code>每次循环之后增加2。",
        "<blockquote>var ourArray = [];<br>for (var i = 0; i &#60; 10; i += 2) {<br>&nbsp;&nbsp;ourArray.push(i);<br>}</blockquote>",
        "循环结束后，<code>ourArray</code>的值为<code>[0,2,4,6,8]</code>。",
        "改变<code>计数器</code>，这样我们可以用奇数来数。",
        "<hr>",
        "写一个<code>for</code>循环，把从 1 到 9 的奇数添加到<code>myArray</code>。"
      ],
      "solutions": [
        "var ourArray = [];\nfor (var i = 0; i < 10; i += 2) {\n  ourArray.push(i);\n}\nvar myArray = [];\nfor (var i = 1; i < 10; i += 2) {\n  myArray.push(i);\n}"
      ],
      "tests": [
        {
          "text": "你应该使用<code>for</code>循环",
          "testString": "assert(code.match(/for\\s*\\(/g).length > 1, '你应该使用<code>for</code>循环');"
        },
        {
          "text": "<code>myArray</code>应该等于<code>[1,3,5,7,9]</code>.",
          "testString": "assert.deepEqual(myArray, [1,3,5,7,9], '<code>myArray</code>应该等于<code>[1,3,5,7,9]</code>.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// 示例",
            "var ourArray = [];",
            "",
            "for (var i = 0; i < 10; i += 2) {",
            "  ourArray.push(i);",
            "}",
            "",
            "// 初始化变量",
            "var myArray = [];",
            "",
            "// 请把你的代码写在这条注释以下",
            "",
            ""
          ],
          "head": [],
          "tail": [
            "if(typeof myArray !== \"undefined\"){(function(){return myArray;})();}"
          ]
        }
      }
    },
    {
      "id": "56105e7b514f539506016a5e",
      "title": "Count Backwards With a For Loop",
      "description": [
        "for循环也可以逆向迭代，只要我们定义好合适的条件。",
        "为了能够从后往前两两倒数，我们需要改变我们的<code>初始化</code>，<code>条件判断</code>和<code>计数器</code>。",
        "我们让<code>i = 10</code>，并且当<code>i > 0</code>的时候才继续循环。我们使用<code>i -= 2</code>来让<code>i</code>每次循环递减 2。",
        "<blockquote>var ourArray = [];<br>for (var i=10; i &#62; 0; i-=2) {<br>&nbsp;&nbsp;ourArray.push(i);<br>}</blockquote>",
        "循环结束后，<code>ourArray</code>的值为<code>[10,8,6,4,2]</code>。",
        "让我们改变<code>初始化</code>和<code>计数器</code>，这样我们就可以按照奇数从后往前两两倒着数。",
        "<hr>",
        "使用一个<code>for</code>循环，把 9 到 1 的奇数添加进<code>myArray</code>。"
      ],
      "solutions": [
        "var ourArray = [];\nfor (var i = 10; i > 0; i -= 2) {\n  ourArray.push(i);\n}\nvar myArray = [];\nfor (var i = 9; i > 0; i -= 2) {\n  myArray.push(i);\n}"
      ],
      "tests": [
        {
          "text": "你应该使用<code>for</code>循环",
          "testString": "assert(code.match(/for\\s*\\(/g).length > 1, '你应该使用<code>for</code>循环');"
        },
        {
          "text": "你应该使用数组方法<code>push</code>.",
          "testString": "assert(code.match(/myArray.push/), '你应该使用数组方法<code>push</code>.');"
        },
        {
          "text": "<code>myArray</code>应该等于<code>[9,7,5,3,1]</code>.",
          "testString": "assert.deepEqual(myArray, [9,7,5,3,1], '<code>myArray</code>应该等于<code>[9,7,5,3,1]</code>.');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// 示例",
            "var ourArray = [];",
            "",
            "for (var i = 10; i > 0; i -= 2) {",
            "  ourArray.push(i);",
            "}",
            "",
            "// 初始化变量",
            "var myArray = [];",
            "",
            "// 请把你的代码写在这条注释以下",
            "",
            ""
          ],
          "head": [],
          "tail": [
            "if(typeof myArray !== \"undefined\"){(function(){return myArray;})();}"
          ]
        }
      }
    },
    {
      "id": "5675e877dbd60be8ad28edc6",
      "title": "Iterate Through an Array with a For Loop",
      "description": [
        "迭代输出一个数组的每个元素是 JavaScript 中的常见需求，<code>for</code>循环可以做到这一点。下面的代码将输出数组 <code>arr</code>的每个元素到控制台：",
        "<blockquote>var arr = [10,9,8,7,6];<br>for (var i = 0; i < arr.length; i++) {<br>&nbsp;&nbsp; console.log(arr[i]);<br>}</blockquote>",
        "记住数组的索引从零开始的，这意味着数组的最后一个元素的下标是：数组的长度 -1。我们这个循环的 <dfn>条件</dfn>是<code>i < arr.length</code>，当<code>i</code>的值为 长度 -1 的时候循环就停止了。",
        "<hr>",
        "声明并初始化一个变量<code>total</code>为<code>0</code>。使用<code>for</code>循环，使得<code>total</code>的值为<code>myArr</code>的数组中的每个元素的值的总和。"
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "var ourArr = [ 9, 10, 11, 12];\nvar ourTotal = 0;\n\nfor (var i = 0; i < ourArr.length; i++) {\n  ourTotal += ourArr[i];\n}\n\nvar myArr = [ 2, 3, 4, 5, 6];\nvar total = 0;\n\nfor (var i = 0; i < myArr.length; i++) {\n  total += myArr[i];\n}"
      ],
      "tests": [
        {
          "text": "<code>total</code>应该被声明, 并且初始化值为 0",
          "testString": "assert(code.match(/var.*?total\\s*=\\s*0.*?;/), '<code>total</code>应该被声明, 并且初始化值为 0');"
        },
        {
          "text": "<code>total</code>应该等于 20",
          "testString": "assert(total === 20, '<code>total</code>应该等于 20');"
        },
        {
          "text": "你应该使用<code>for</code>循环在<code>myArr</code>中遍历",
          "testString": "assert(code.match(/for\\s*\\(/g).length > 1 && code.match(/myArr\\s*\\[/), '你应该使用<code>for</code>循环在<code>myArr</code>中遍历');"
        },
        {
          "text": "不能直接把<code>total</code>设置成 20",
          "testString": "assert(!code.match(/total[\\s\\+\\-]*=\\s*(\\d(?!\\s*[;,])|[1-9])/g), '不能直接把<code>total</code>设置成 20');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// 示例",
            "var ourArr = [ 9, 10, 11, 12];",
            "var ourTotal = 0;",
            "",
            "for (var i = 0; i < ourArr.length; i++) {",
            "  ourTotal += ourArr[i];",
            "}",
            "",
            "// 初始化变量",
            "var myArr = [ 2, 3, 4, 5, 6];",
            "",
            "// 请把你的代码写在这条注释以下",
            "",
            ""
          ],
          "head": [],
          "tail": [
            "(function(){if(typeof total !== 'undefined') { return \"total = \" + total; } else { return \"total is undefined\";}})()"
          ]
        }
      }
    },
    {
      "id": "56533eb9ac21ba0edf2244e1",
      "title": "Nesting For Loops",
      "description": [
        "如果你有一个二维数组，可以使用相同的逻辑，先遍历外面的数组，再遍历里面的子数组。下面是一个例子：",
        "<blockquote>var arr = [<br>&nbsp;&nbsp;[1,2], [3,4], [5,6]<br>];<br>for (var i=0; i &lt; arr.length; i++) {<br>&nbsp;&nbsp;for (var j=0; j &lt; arr[i].length; j++) {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(arr[i][j]);<br>&nbsp;&nbsp;}<br>}</blockquote>",
        "一次输出<code>arr</code>中的每个子元素。提示，对于内部循环，我们可以通过<code>arr[i]</code>的<code>.length</code>来获得子数组的长度，因为<code>arr[i]</code>的本身就是一个数组。",
        "<hr>",
        "修改函数<code>multiplyAll</code>，获得<code>arr</code>内部数组的每个数字相乘的结果<code>product</code>。"
      ],
      "releasedOn": "January 1, 2016",
      "solutions": [
        "function multiplyAll(arr) {\n  var product = 1;\n  for (var i = 0; i < arr.length; i++) {\n    for (var j = 0; j < arr[i].length; j++) {\n      product *= arr[i][j];\n    }\n  }\n  return product;\n}\n\nmultiplyAll([[1,2],[3,4],[5,6,7]]);"
      ],
      "tests": [
        {
          "text": "<code>multiplyAll([[1],[2],[3]])</code>应该返回 <code>6</code>",
          "testString": "assert(multiplyAll([[1],[2],[3]]) === 6, '<code>multiplyAll([[1],[2],[3]])</code>应该返回 <code>6</code>');"
        },
        {
          "text": "<code>multiplyAll([[1,2],[3,4],[5,6,7]])</code>应该返回 <code>5040</code>",
          "testString": "assert(multiplyAll([[1,2],[3,4],[5,6,7]]) === 5040, '<code>multiplyAll([[1,2],[3,4],[5,6,7]])</code>应该返回 <code>5040</code>');"
        },
        {
          "text": "<code>multiplyAll([[5,1],[0.2, 4, 0.5],[3, 9]])</code>应该返回 <code>54</code>",
          "testString": "assert(multiplyAll([[5,1],[0.2, 4, 0.5],[3, 9]]) === 54, '<code>multiplyAll([[5,1],[0.2, 4, 0.5],[3, 9]])</code>应该返回 <code>54</code>');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function multiplyAll(arr) {",
            "  var product = 1;",
            "  // 请把你的代码写在这条注释以下",
            "  ",
            "  // 请把你的代码写在这条注释以上",
            "  return product;",
            "}",
            "",
            "// 你可以修改这一行来测试你的代码",
            "multiplyAll([[1,2],[3,4],[5,6,7]]);",
            ""
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "5a2efd662fb457916e1fe604",
      "title": "Iterate with JavaScript Do...While Loops",
      "description": [
        "你可以使用循环来多次执行相同的代码",
        "你学习的下一个循环是 \"<code>do...while</code>\" 循环，因为它首先无论如何先将 \"<code>do</code>\" 内部的代码执行一次，然后它执行 \"<code>while</code>\" 表达式，指定条件为真则继续执行，直到条件为假时停止执行。我们来看一个例子。",
        "<blockquote>var ourArray = [];<br>var i = 0;<br>do {<br>&nbsp;&nbsp;ourArray.push(i);<br>&nbsp;&nbsp;i++;<br>} while (i < 5);</blockquote>",
        "这看起来和其他循环语句差不多，返回的结果是<code>[0, 1, 2, 3, 4]</code>，<code>do...while</code>与其他循环不同点在于，初始条件为假时的表现，让我们通过实际的例子来看看。",
        "这是一个普通的 while 循环，只要<code>i < 5</code>，它就会在循环中运行代码。",
        "<blockquote>var ourArray = []; <br>var i = 5;<br>while (i < 5) {<br>&nbsp;&nbsp;ourArray.push(i);<br>&nbsp;&nbsp;i++;<br>}</blockquote>",
        "注意，我们首先将<code>i</code>的值初始化为 5。执行下一行时，注意到<code>i</code>不小于 5，循环内的代码将不会执行。所以<code>ourArray</code>最终没有添加任何内容，因此示例中的所有代码执行完时，<code>ourArray</code>仍然是<code>[]</code>。",
        "现在，看一下<code>do...while</code>循环。",
        "<blockquote>var ourArray = []; <br>var i = 5;<br>do {<br>&nbsp;&nbsp;ourArray.push(i);<br>&nbsp;&nbsp;i++;<br>} while (i < 5);</blockquote>",
        "在这里，和使用 while 循环时一样，我们将<code>i</code>的值初始化为 5。执行下一行时，没有检查<code>i</code>的值，直接执行花括号内的代码。数组会添加一个元素，并在进行条件检查之前递增<code>i</code>。然后，在条件检查时因为<code>i</code>等于 6 不符合条件<code>i < 5</code>，所以退出循环。最终<code>ourArray</code>的值是<code>[5]</code>。",
        "本质上，<code>do...while</code>循环确保循环内的代码至少运行一次。",
        "让我们通过<code>do...while</code>循环将值添加到数组中。",
        "<hr>",
        "将代码中的<code>while</code>循环更改为<code>do...while</code>循环，实现数字 10 添加到<code>myArray</code>中，代码执行完时，<code>i</code>等于<code>11</code>。"
      ],
      "solutions": [
        "var myArray = [];\nvar i = 10;\ndo {\n  myArray.push(i);\n  i++;\n} while (i < 5)"
      ],
      "tests": [
        {
          "text": "你应该使用<code>do...while</code>循环",
          "testString": "assert(code.match(/do/g), '你应该使用<code>do...while</code>循环');"
        },
        {
          "text": "<code>myArray</code>应该等于<code>[10]</code>.",
          "testString": "assert.deepEqual(myArray, [10], '<code>myArray</code>应该等于<code>[10]</code>.');"
        },
        {
          "text": "<code>i</code>应该等于<code>11</code>",
          "testString": "assert.deepEqual(i, 11, '<code>i</code>应该等于<code>11</code>');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// 初始化变量",
            "var myArray = [];",
            "var i = 10;",
            "",
            "// 请把你的代码写在这条注释以下",
            "",
            "while (i < 5) {",
            "  myArray.push(i);",
            "  i++;",
            "}",
            ""
          ],
          "head": [],
          "tail": [
            "if(typeof myArray !== \"undefined\"){(function(){return myArray;})();}"
          ]
        }
      }
    },
    {
      "id": "5688e62ea601b2482ff8422b",
      "title": "Profile Lookup",
      "description": [
        "我们有一个对象数组，里面存储着通讯录。",
        "函数<code>lookUp</code>有两个预定义参数：<code>firstName</code>值和<code>prop</code>属性 。",
        "函数将会检查通讯录中是否存在一个与传入的<code>firstName</code>相同的联系人。如果存在，那么还需要检查对应的联系人中是否存在<code>prop</code>属性。",
        "如果它们都存在，函数返回<code>prop</code>属性对应的值。",
        "如果<code>firstName</code>值不存在，返回<code>\"No such contact\"</code>。",
        "如果<code>prop</code>属性不存在，返回<code>\"No such property\"</code>。"
      ],
      "releasedOn": "January 8, 2016",
      "solutions": [
        "var contacts = [\n    {\n        \"firstName\": \"Akira\",\n        \"lastName\": \"Laine\",\n        \"number\": \"0543236543\",\n        \"likes\": [\"Pizza\", \"Coding\", \"Brownie Points\"]\n    },\n    {\n        \"firstName\": \"Harry\",\n        \"lastName\": \"Potter\",\n        \"number\": \"0994372684\",\n        \"likes\": [\"Hogwarts\", \"Magic\", \"Hagrid\"]\n    },\n    {\n        \"firstName\": \"Sherlock\",\n        \"lastName\": \"Holmes\",\n        \"number\": \"0487345643\",\n        \"likes\": [\"Intriguing Cases\", \"Violin\"]\n    },\n    {\n        \"firstName\": \"Kristian\",\n        \"lastName\": \"Vos\",\n        \"number\": \"unknown\",\n        \"likes\": [\"JavaScript\", \"Gaming\", \"Foxes\"]\n    },\n];\n\n\n//Write your function in between these comments\nfunction lookUpProfile(name, prop){\n    for(var i in contacts){\n      if(contacts[i].firstName === name) {\n        return contacts[i][prop] || \"No such property\";\n      }\n    }\n   return \"No such contact\";\n}\n//Write your function in between these comments\n\nlookUpProfile(\"Akira\", \"likes\");"
      ],
      "tests": [
        {
          "text": "<code>\"Kristian\", \"lastName\"</code>应该返回 <code>\"Vos\"</code>",
          "testString": "assert(lookUpProfile('Kristian','lastName') === \"Vos\", '<code>\"Kristian\", \"lastName\"</code>应该返回 <code>\"Vos\"</code>');"
        },
        {
          "text": "<code>\"Sherlock\", \"likes\"</code>应该返回 <code>[\"Intriguing Cases\", \"Violin\"]</code>",
          "testString": "assert.deepEqual(lookUpProfile(\"Sherlock\", \"likes\"), [\"Intriguing Cases\", \"Violin\"], '<code>\"Sherlock\", \"likes\"</code>应该返回 <code>[\"Intriguing Cases\", \"Violin\"]</code>');"
        },
        {
          "text": "<code>\"Harry\",\"likes\"</code>应该返回 an array",
          "testString": "assert(typeof lookUpProfile(\"Harry\", \"likes\") === \"object\", '<code>\"Harry\",\"likes\"</code>应该返回 an array');"
        },
        {
          "text": "<code>\"Bob\", \"number\"</code>应该返回 \"No such contact\"",
          "testString": "assert(lookUpProfile(\"Bob\", \"number\") === \"No such contact\", '<code>\"Bob\", \"number\"</code>应该返回 \"No such contact\"');"
        },
        {
          "text": "<code>\"Bob\", \"potato\"</code>应该返回 \"No such contact\"",
          "testString": "assert(lookUpProfile(\"Bob\", \"potato\") === \"No such contact\", '<code>\"Bob\", \"potato\"</code>应该返回 \"No such contact\"');"
        },
        {
          "text": "<code>\"Akira\", \"address\"</code>应该返回 \"No such property\"",
          "testString": "assert(lookUpProfile(\"Akira\", \"address\") === \"No such property\", '<code>\"Akira\", \"address\"</code>应该返回 \"No such property\"');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// 初始化变量",
            "var contacts = [",
            "    {",
            "        \"firstName\": \"Akira\",",
            "        \"lastName\": \"Laine\",",
            "        \"number\": \"0543236543\",",
            "        \"likes\": [\"Pizza\", \"Coding\", \"Brownie Points\"]",
            "    },",
            "    {",
            "        \"firstName\": \"Harry\",",
            "        \"lastName\": \"Potter\",",
            "        \"number\": \"0994372684\",",
            "        \"likes\": [\"Hogwarts\", \"Magic\", \"Hagrid\"]",
            "    },",
            "    {",
            "        \"firstName\": \"Sherlock\",",
            "        \"lastName\": \"Holmes\",",
            "        \"number\": \"0487345643\",",
            "        \"likes\": [\"Intriguing Cases\", \"Violin\"]",
            "    },",
            "    {",
            "        \"firstName\": \"Kristian\",",
            "        \"lastName\": \"Vos\",",
            "        \"number\": \"unknown\",",
            "        \"likes\": [\"JavaScript\", \"Gaming\", \"Foxes\"]",
            "    }",
            "];",
            "",
            "",
            "function lookUpProfile(name, prop){",
            "// 请把你的代码写在这条注释以下",
            "",
            "// 请把你的代码写在这条注释以上",
            "}",
            "",
            "// 你可以修改这一行来测试你的代码",
            "lookUpProfile(\"Akira\", \"likes\");"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "cf1111c1c11feddfaeb9bdef",
      "title": "Generate Random Fractions with JavaScript",
      "description": [
        "随机数非常适合用来创建随机行为。",
        "<code>Math.random()</code>用来生成一个在<code>0</code>（包括 0）到<code>1</code>不包括 1）之间的随机小数，因此<code>Math.random()</code>可能返回 0 但绝不会返回 1。",
        "<strong>提示</strong><br>这一节讲过<a href='storing-values-with-the-assignment-operator' target='_blank'>Storing Values with the Equal Operator</a>，所有函数调用将在<code>return</code>执行之前解析，因此我们可以返回<code>Math.random()</code>函数的值。",
        "<hr>",
        "更改<code>randomFraction</code>使其返回一个随机数而不是<code>0</code>。"
      ],
      "solutions": [
        "function randomFraction() {\n  return Math.random();\n}"
      ],
      "tests": [
        {
          "text": "<code>randomFraction</code>应该返回一个随机数",
          "testString": "assert(typeof randomFraction() === \"number\", '<code>randomFraction</code>应该返回一个随机数');"
        },
        {
          "text": "<code>randomFraction</code>应该返回一个小数",
          "testString": "assert((randomFraction()+''). match(/\\./g), '<code>randomFraction</code>应该返回一个小数');"
        },
        {
          "text": "需要使用<code>Math.random</code>生成随机的小数",
          "testString": "assert(code.match(/Math\\.random/g).length >= 0, '需要使用<code>Math.random</code>生成随机的小数');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function randomFraction() {",
            "",
            "  // 请把你的代码写在这条注释以下",
            "",
            "  return 0;",
            "",
            "  // 请把你的代码写在这条注释以上.",
            "}"
          ],
          "head": [],
          "tail": [
            "(function(){return randomFraction();})();"
          ]
        }
      }
    },
    {
      "id": "cf1111c1c12feddfaeb1bdef",
      "title": "Generate Random Whole Numbers with JavaScript",
      "description": [
        "生成随机小数很棒，但随机数更有用的地方在于生成随机整数。",
        "<ol><li>用<code>Math.random()</code>生成一个随机小数。</li><li>把这个随机小数乘以<code>20</code>。</li><li>用<code>Math.floor()</code>向下取整 获得它最近的整数。</li></ol>",
        "记住<code>Math.random()</code>永远不会返回<code>1</code>。同时因为我们是在用<code>Math.floor()</code>向下取整，所以最终我们获得的结果不可能有<code>20</code>。这确保了我们获得了一个在0到19之间的整数。",
        "把操作连缀起来，代码类似于下面：",
        "<code>Math.floor(Math.random() * 20);</code>",
        "我们先调用<code>Math.random()</code>，把它的结果乘以20，然后把上一步的结果传给<code>Math.floor()</code>，最终通过向下取整获得最近的整数。",
        "<hr>",
        "生成一个<code>0</code>到<code>9</code>之间的随机整数。"
      ],
      "solutions": [
        "var randomNumberBetween0and19 = Math.floor(Math.random() * 20);\nfunction randomWholeNum() {\n  return Math.floor(Math.random() * 10);\n}"
      ],
      "tests": [
        {
          "text": "<code>myFunction</code>的结果应该是一个整数",
          "testString": "assert(typeof randomWholeNum() === \"number\" && (function(){var r = randomWholeNum();return Math.floor(r) === r;})(), '<code>myFunction</code>的结果应该是一个整数');"
        },
        {
          "text": "需要使用<code>Math.random</code>生成随机数字",
          "testString": "assert(code.match(/Math.random/g).length > 1, '需要使用<code>Math.random</code>生成随机数字');"
        },
        {
          "text": "你应该将<code>Math.random</code>的结果乘以 10 来生成 0 到 9 之间的随机数",
          "testString": "assert(code.match(/\\s*?Math.random\\s*?\\(\\s*?\\)\\s*?\\*\\s*?10[\\D]\\s*?/g) || code.match(/\\s*?10\\s*?\\*\\s*?Math.random\\s*?\\(\\s*?\\)\\s*?/g), '你应该将<code>Math.random</code>的结果乘以 10 来生成 0 到 9 之间的随机数');"
        },
        {
          "text": "你需要使用<code>Math.floor</code>移除数字中的小数部分",
          "testString": "assert(code.match(/Math.floor/g).length > 1, '你需要使用<code>Math.floor</code>移除数字中的小数部分');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "var randomNumberBetween0and19 = Math.floor(Math.random() * 20);",
            "",
            "function randomWholeNum() {",
            "",
            "  // 请把你的代码写在这条注释以下",
            "",
            "  return Math.random();",
            "}"
          ],
          "head": [],
          "tail": [
            "(function(){return randomWholeNum();})();"
          ]
        }
      }
    },
    {
      "id": "cf1111c1c12feddfaeb2bdef",
      "title": "Generate Random Whole Numbers within a Range",
      "description": [
        "我们之前生成的随机数是在0到某个数之间，现在我们要生成的随机数是在两个指定的数之间。",
        "我们需要定义一个最小值和一个最大值。",
        "下面是我们将要使用的方法，仔细看看并尝试理解这行代码到底在干嘛：",
        "<code>Math.floor(Math.random() * (max - min + 1)) + min</code>",
        "<hr>",
        "创建一个叫<code>randomRange</code>的函数，参数为 myMin 和 myMax，返回一个在<code>myMin</code>（包括 myMin）和<code>myMax</code>（包括 myMax）之间的随机数。"
      ],
      "solutions": [
        "function randomRange(myMin, myMax) {\n  return Math.floor(Math.random() * (myMax - myMin + 1)) + myMin;\n}"
      ],
      "tests": [
        {
          "text": "<code>randomRange</code>返回的随机数应该大于或等于<code>myMin</code>",
          "testString": "assert(calcMin === 5, '<code>randomRange</code>返回的随机数应该大于或等于<code>myMin</code>');"
        },
        {
          "text": "<code>randomRange</code>返回的随机数应该小于或等于<code>myMax</code>",
          "testString": "assert(calcMax === 15, '<code>randomRange</code>返回的随机数应该小于或等于<code>myMax</code>');"
        },
        {
          "text": "<code>randomRange</code>应该返回一个随机整数, 而不是小数",
          "testString": "assert(randomRange(0,1) % 1 === 0 , '<code>randomRange</code>应该返回一个随机整数, 而不是小数');"
        },
        {
          "text": "<code>randomRange</code>应该使用<code>myMax</code>和<code>myMin</code>, 并且返回两者之间的随机数",
          "testString": "assert((function(){if(code.match(/myMax/g).length > 1 && code.match(/myMin/g).length > 2 && code.match(/Math.floor/g) && code.match(/Math.random/g)){return true;}else{return false;}})(), '<code>randomRange</code>应该使用<code>myMax</code>和<code>myMin</code>, 并且返回两者之间的随机数');"
        }
      ],
      "challengeType": 1,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// 示例",
            "function ourRandomRange(ourMin, ourMax) {",
            "",
            "  return Math.floor(Math.random() * (ourMax - ourMin + 1)) + ourMin;",
            "}",
            "",
            "ourRandomRange(1, 9);",
            "",
            "// 请把你的代码写在这条注释以下",
            "",
            "function randomRange(myMin, myMax) {",
            "",
            "  return 0; // 请修改这一行",
            "",
            "}",
            "",
            "// 你可以修改这一行来测试你的代码",
            "var myRandom = randomRange(5, 15);"
          ],
          "head": [],
          "tail": [
            "var calcMin = 100;",
            "var calcMax = -100;",
            "for(var i = 0; i < 100; i++) {",
            "  var result = randomRange(5,15);",
            "  calcMin = Math.min(calcMin, result);",
            "  calcMax = Math.max(calcMax, result);",
            "}",
            "(function(){",
            "  if(typeof myRandom === 'number') {",
            "    return \"myRandom = \" + myRandom;",
            "  } else {",
            "    return \"myRandom undefined\";",
            "  }",
            "})();"
          ]
        }
      }
    },
    {
      "id": "587d7b7e367417b2b2512b23",
      "title": "Use the parseInt Function",
      "description": [
        "<code>parseInt()</code>函数解析一个字符串返回一个整数下面是一个示例：",
        "<code>var a = parseInt(\"007\");</code>",
        "上面的函数把字符串 \"007\" 转换成数字 7。 如果字符串参数的第一个字符是字符串类型的，结果将不会转换成数字，而是返回<code>NaN</code>.",
        "<hr>",
        "在<code>convertToInteger</code>函数中使用<code>parseInt()</code>转换接受的的字符串<code>str</code>为正数并返回。"
      ],
      "solutions": [],
      "tests": [
        {
          "text": "<code>convertToInteger</code>应该使用<code>parseInt()</code>函数",
          "testString": "assert(/parseInt/g.test(code), '<code>convertToInteger</code>应该使用<code>parseInt()</code>函数');"
        },
        {
          "text": "<code>convertToInteger(\"56\")</code>应该返回一个数字",
          "testString": "assert(typeof(convertToInteger(\"56\")) === \"number\", '<code>convertToInteger(\"56\")</code>应该返回一个数字');"
        },
        {
          "text": "<code>convertToInteger(\"56\")</code>应该返回 56",
          "testString": "assert(convertToInteger(\"56\") === 56, '<code>convertToInteger(\"56\")</code>应该返回 56');"
        },
        {
          "text": "<code>convertToInteger(\"77\")</code>应该返回 77",
          "testString": "assert(convertToInteger(\"77\") === 77, '<code>convertToInteger(\"77\")</code>应该返回 77');"
        },
        {
          "text": "<code>convertToInteger(\"JamesBond\")</code>应该返回 NaN",
          "testString": "assert.isNaN(convertToInteger(\"JamesBond\"), '<code>convertToInteger(\"JamesBond\")</code>应该返回 NaN');"
        }
      ],
      "challengeType": 1,
      "releasedOn": "February 17, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function convertToInteger(str) {",
            "  ",
            "}",
            "",
            "convertToInteger(\"56\");"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7b7e367417b2b2512b22",
      "title": "Use the parseInt Function with a Radix",
      "description": [
        "<code>parseInt()</code>函数解析一个字符串并返回一个整数。它同时可接受第二个参数，一个介于2和36之间的整数，表示字符串的基数。",
        "函数调用如下所示：",
        "<code>parseInt(string, radix);</code>",
        "示例：",
        "<code>var a = parseInt(\"11\", 2);</code>",
        "参数 2 表示 \"11\" 使用二进制数值系统。此示例将字符串 \"11\" 转换为整数 3。",
        "<hr>",
        "在<code>convertToInteger</code中使用<code>parseInt()</code>函数把二进制数转换成十进制并返回。"
      ],
      "solutions": [],
      "tests": [
        {
          "text": "<code>convertToInteger</code>中应该使用<code>parseInt()</code>函数",
          "testString": "assert(/parseInt/g.test(code), '<code>convertToInteger</code>中应该使用<code>parseInt()</code>函数');"
        },
        {
          "text": "<code>convertToInteger(\"10011\")</code>应该返回一个数字",
          "testString": "assert(typeof(convertToInteger(\"10011\")) === \"number\", '<code>convertToInteger(\"10011\")</code>应该返回一个数字');"
        },
        {
          "text": "<code>convertToInteger(\"10011\")</code>应该返回 19",
          "testString": "assert(convertToInteger(\"10011\") === 19, '<code>convertToInteger(\"10011\")</code>应该返回 19');"
        },
        {
          "text": "<code>convertToInteger(\"111001\")</code>应该返回 57",
          "testString": "assert(convertToInteger(\"111001\") === 57, '<code>convertToInteger(\"111001\")</code>应该返回 57');"
        },
        {
          "text": "<code>convertToInteger(\"JamesBond\")</code>应该返回 NaN",
          "testString": "assert.isNaN(convertToInteger(\"JamesBond\"), '<code>convertToInteger(\"JamesBond\")</code>应该返回 NaN');"
        }
      ],
      "challengeType": 1,
      "releasedOn": "February 17, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function convertToInteger(str) {",
            "  ",
            "}",
            "",
            "convertToInteger(\"10011\");"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7b7e367417b2b2512b24",
      "title": "Use the Conditional (Ternary) Operator",
      "description": [
        "条件运算符（也称为三元运算符）的用处就像写成一行的 if-else 表达式",
        "语法如下所示：",
        "<code>condition ? statement-if-true : statement-if-false;</code>",
        "以下函数使用 if-else 语句来检查条件：",
        "<blockquote>function findGreater(a, b) {<br>&nbsp;&nbsp;if(a > b) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return \"a is greater\";<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;else {<br>&nbsp;&nbsp;&nbsp;&nbsp;return \"b is greater\";<br>&nbsp;&nbsp;}<br>}</blockquote>",
        "上面的函数使用条件运算符写法如下：",
        "<blockquote>function findGreater(a, b) {<br>&nbsp;&nbsp;return a > b ? \"a is greater\" : \"b is greater\";<br>}</blockquote>",
        "<hr>",
        "在<code>checkEqual</code>函数中使用条件运算符检查两个数字是否相等，函数应该返回 true 或 false"
      ],
      "solutions": [],
      "tests": [
        {
          "text": "<code>checkEqual</code>应该使用条件运算符",
          "testString": "assert(/.+?\\s*?\\?\\s*?.+?\\s*?:\\s*?.+?/gi.test(code), '<code>checkEqual</code>应该使用条件运算符');"
        },
        {
          "text": "<code>checkEqual(1, 2)</code>应该返回 false",
          "testString": "assert(checkEqual(1, 2) === false, '<code>checkEqual(1, 2)</code>应该返回 false');"
        },
        {
          "text": "<code>checkEqual(1, 1)</code>应该返回 true",
          "testString": "assert(checkEqual(1, 1) === true, '<code>checkEqual(1, 1)</code>应该返回 true');"
        },
        {
          "text": "<code>checkEqual(1, -1)</code>应该返回 false",
          "testString": "assert(checkEqual(1, -1) === false, '<code>checkEqual(1, -1)</code>应该返回 false');"
        }
      ],
      "challengeType": 1,
      "releasedOn": "February 17, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function checkEqual(a, b) {",
            "  ",
            "}",
            "",
            "checkEqual(1, 2);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7b7e367417b2b2512b21",
      "title": "Use Multiple Conditional (Ternary) Operators",
      "description": [
        "在之前的挑战中，你使用了一个条件运算符。你也可以将多个运算符串联在一起以检查多种条件。",
        "下面的函数使用 if，else if 和 else 语句来检查多个条件：",
        "<blockquote>function findGreaterOrEqual(a, b) {<br>&nbsp;&nbsp;if(a === b) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return \"a and b are equal\";<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;else if(a > b) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return \"a is greater\";<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;else {<br>&nbsp;&nbsp;&nbsp;&nbsp;return \"b is greater\";<br>&nbsp;&nbsp;}<br>}</blockquote>",
        "上面的函数使用条件运算符写法如下：",
        "<blockquote>function findGreaterOrEqual(a, b) {<br>&nbsp;&nbsp;return (a === b) ? \"a and b are equal\" : (a > b) ? \"a is greater\" : \"b is greater\";<br>}</blockquote>",
        "<hr>",
        "在 checkSign 函数中使用多个条件运算符来检查数字是正数，负数还是零。"
      ],
      "solutions": [],
      "tests": [
        {
          "text": "<code>checkSign</code>应该使用多个条件运算符",
          "testString": "assert(/.+?\\s*?\\?\\s*?.+?\\s*?:\\s*?.+?\\s*?\\?\\s*?.+?\\s*?:\\s*?.+?/gi.test(code), '<code>checkSign</code>应该使用多个条件运算符');"
        },
        {
          "text": "<code>checkSign(10)</code>应该返回 \"positive\" 注意，结果对大小写敏感",
          "testString": "assert(checkSign(10) === 'positive', '<code>checkSign(10)</code>应该返回 \"positive\" 注意，结果对大小写敏感');"
        },
        {
          "text": "<code>checkSign(-12)</code>应该返回 \"negative\" 注意，结果对大小写敏感",
          "testString": "assert(checkSign(-12) === 'negative', '<code>checkSign(-12)</code>应该返回 \"negative\" 注意，结果对大小写敏感');"
        },
        {
          "text": "<code>checkSign(0)</code>应该返回 \"zero\" 注意，结果对大小写敏感",
          "testString": "assert(checkSign(0) === 'zero', '<code>checkSign(0)</code>应该返回 \"zero\" 注意，结果对大小写敏感');"
        }
      ],
      "challengeType": 1,
      "releasedOn": "February 17, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function checkSign(num) {",
            "  ",
            "}",
            "",
            "checkSign(10);"
          ],
          "head": [],
          "tail": []
        }
      }
    }
  ]
}