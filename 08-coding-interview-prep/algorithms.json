{
  "name": "Algorithms",
  "order": 1,
  "time": "",
  "helpRoom": "HelpJavaScript",
  "challenges": [
    {
      "id": "a3f503de51cf954ede28891d",
      "title": "Find the Symmetric Difference",
      "description": [
        "知识提要：<a href='https://baike.baidu.com/item/%E5%AF%B9%E7%A7%B0%E5%B7%AE'target='_blank'>对称差 (Symmetric Difference)</a>，数学上，两个<a href='https://baike.baidu.com/item/%E9%9B%86%E5%90%88/2908117'target='_blank'>集合</a>的对称差分是只属于其中一个集合，而不属于另一个集合的元素组成的集合，例如：集合<code>let A = [ 1, 2, 3]</code>和<code>let B = [ 2, 3, 4]</code>的对称差分为<code>A &xutri; B = C = [ 1, 4]</code>。 集合论中的这个运算相当于布尔逻辑中的异或运算。",
        "创建一个函数 sym，输入两个或两个以上的数组作为参数，然后返回值为<em>对称差分</em>的数组",
        "思路：设定两个数组 (例如：<code>let A = [1, 2, 3]</code>，<code>let B = [2, 3, 4]</code>)作为参数传入，返回对称差分数组（<code>A &xutri; B = C = [1, 4]</code>），且数组中没有重复项。",
        "如果你遇到了困难，请点击<a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514'target='_blank'>帮助</a>。你可以找人“结对编程”，但不要因此放弃思考。",
      ],
      "solutions": [
        "function sym() {\n  var arrays = [].slice.call(arguments);\n  return arrays.reduce(function (symDiff, arr) {\n    return symDiff.concat(arr).filter(function (val, idx, theArr) {\n      return theArr.indexOf(val) === idx \n        && (symDiff.indexOf(val) === -1 || arr.indexOf(val) === -1);\n    });\n  });\n}\nsym([1, 2, 3], [5, 2, 1, 4]);\n"
      ],
      "tests": [
        {
          "text": "<code>sym([1, 2, 3], [5, 2, 1, 4])</code>应该返回< code>[3, 4, 5]</code>。",
          "testString": "assert.sameMembers(sym([1, 2, 3], [5, 2, 1, 4]), [3, 4, 5],'<code>sym([1, 2, 3], [5, 2, 1, 4])</code>应该返回<code>[3, 4, 5]</code>。');"
        },
        {
          "text": "<code>sym([1, 2, 3], [5, 2, 1, 4])</code>的返回值应该只包含三个元素。",
          "testString": "assert.equal(sym([1, 2, 3], [5, 2, 1, 4]).length, 3,'<code>sym([1, 2, 3], [5, 2, 1, 4])</code>的返回值应该只包含三个元素。');"
        },
        {
          "text": "<code>sym([1, 2, 3, 3], [5, 2, 1, 4])</code>应该返回<code>[3, 4, 5]</code>。",
          "testString": "assert.sameMembers(sym([1, 2, 3, 3], [5, 2, 1, 4]), [3, 4, 5],'<code>sym([1, 2, 3, 3], [5, 2, 1, 4])</code>应该返回<code>[3, 4, 5]</code>。');"
        },
        {
          "text": "<code>sym([1, 2, 3, 3], [5, 2, 1, 4])</code>返回的数组应该只包含三个元素",
          "testString": "assert.equal(sym([1, 2, 3, 3], [5, 2, 1, 4]).length, 3,'<code>sym([1, 2, 3, 3], [5, 2, 1, 4])</code>返回的数组应该只包含三个元素。');"
        },
        {
          "text": "<code>sym([1, 2, 3], [5, 2, 1, 4, 5])</code>应该返回<code>[3, 4, 5]</code>。",
          "testString": "assert.sameMembers(sym([1, 2, 3], [5, 2, 1, 4, 5]), [3, 4, 5],'<code>sym([1, 2, 3], [5, 2, 1, 4, 5])</code>应该返回<code>[3, 4, 5]</code>。');"
        },
        {
          "text": "<code>sym([1, 2, 3], [5, 2, 1, 4, 5])</code>返回的数组应该只包含三个元素。",
          "testString": "assert.equal(sym([1, 2, 3], [5, 2, 1, 4, 5]).length, 3,'<code>sym([1, 2, 3], [5, 2, 1, 4, 5])</code>返回的数组应该只包含三个元素。');"
        },
        {
          "text": "<code>sym([1, 2, 5], [2, 3, 5], [3, 4, 5])</code>应该返回<code>[1, 4, 5]</code>。",
          "testString": "assert.sameMembers(sym([1, 2, 5], [2, 3, 5], [3, 4, 5]), [1, 4, 5],'<code>sym([1, 2, 5], [2, 3, 5], [3, 4, 5])</code>应该返回<code>[1, 4, 5]</code>。');"
        },
        {
          "text": "<code>sym([1, 2, 5], [2, 3, 5], [3, 4, 5])</code>返回的数组应该只包含三个元素。",
          "testString": "assert.equal(sym([1, 2, 5], [2, 3, 5], [3, 4, 5]).length, 3,'<code>sym([1, 2, 5], [2, 3, 5], [3, 4, 5])</code>返回的数组应该只包含三个元素。');"
        },
        {
          "text": "<code>sym([1, 1, 2, 5], [2, 2, 3, 5], [3, 4, 5, 5])</code>应该返回<code>[1, 4, 5]</code>。",
          "testString": "assert.sameMembers(sym([1, 1, 2, 5], [2, 2, 3, 5], [3, 4, 5, 5]), [1, 4, 5],'<code>sym([1, 1, 2, 5], [2, 2, 3, 5], [3, 4, 5, 5])</code>应该返回<code>[1, 4, 5]</code>。');"
        },
        {
          "text": "<code>sym([1, 1, 2, 5], [2, 2, 3, 5], [3, 4, 5, 5])</code>返回的数组应该只包含三个元素。",
          "testString": "assert.equal(sym([1, 1, 2, 5], [2, 2, 3, 5], [3, 4, 5, 5]).length, 3,'<code>sym([1, 1, 2, 5], [2, 2, 3, 5], [3, 4, 5, 5])</code>返回的数组应该只包含三个元素。');"
        },
        {
          "text": "<code>sym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3])</code>应该返回<code>[2, 3, 4, 6, 7]</code>。",
          "testString": "assert.sameMembers(sym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3]), [2, 3, 4, 6, 7],'<code>sym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3])</code> 应该返回 <code>[2, 3, 4, 6, 7]</code>。');"
        },
        {
          "text": "<code>sym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3])</code>返回的数组应该只包含五个元素。",
          "testString": "assert.equal(sym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3]).length, 5,'<code>sym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3])</code>返回的数组应该只包含五个元素。');"
        },
        {
          "text": "<code>sym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3], [5, 3, 9, 8], [1])</code>应该返回<code>[1, 2, 4, 5, 6, 7, 8, 9]</code>。",
          "testString": "assert.sameMembers(sym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3], [5, 3, 9, 8], [1]), [1, 2, 4, 5, 6, 7, 8, 9],'<code>sym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3], [5, 3, 9, 8], [1])</code>应该返回<code>[1, 2, 4, 5, 6, 7, 8, 9]</code>。');"
        },
        {
          "text": "<code>sym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3], [5, 3, 9, 8], [1])</code>返回的数组应该只包含八个元素。",
          "testString": "assert.equal(sym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3], [5, 3, 9, 8], [1]).length, 8,'<code>sym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3], [5, 3, 9, 8], [1])</code>返回的数组应该只包含八个元素。');"
        }
      ],
      "MDNlinks": [
        "Array.prototype.reduce()",
        "Symmetric Difference"
      ],
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function sym(args) {",
            "return args;",
            "}",
            "",
            "sym([1, 2, 3], [5, 2, 1, 4]);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "a56138aff60341a09ed6c480",
      "title": "Inventory Update",
      "description": [
        "创建一个<a href='https://baike.baidu.com/item/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84' target='_blank'>二维数组</a>，比较并更新存储在<code>二维数组</code>中的 ”库存“ 元素，然后并将其与新产生的第二个二维数组进行对比，更新当前的 ”库存“ 项的数量（<code>arr1</code>），如果找不到这个对比对象，那么将新的对象和数量添加到 “库存” 数组中。注意：返回的 “库存” 数组应该是按照数组元素的首字母顺序排序",
        "如果你遇到了困难，请点击<a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>帮助</a>。你可以找人“结对编程“，但不要因此放弃思考。",
      ],
      "solutions": [
        "function updateInventory(arr1, arr2) {\n  arr2.forEach(function(item) {\n    createOrUpdate(arr1, item);\n  });\n  // 所有的存货都必须记帐，否则你将被解雇！\n  return arr1;\n}\n\nfunction createOrUpdate(arr1, item) {\n  var index = -1;\n  while (++index < arr1.length) {\n    if (arr1[index][1] === item[1]) {\n      arr1[index][0] += item[0];\n      return;\n    }\n    if (arr1[index][1] > item[1]) {\n      break;\n    }\n  }\n  arr1.splice(index, 0, item);\n}\n\n// 示例库存列表 \nvar curInv = [\n    [21,'Bowling Ball'],\n    [2,'Dirty Sock'],\n    [1,'Hair Pin'],\n    [5,'Microphone']\n];\n\nvar newInv = [\n    [2,'Hair Pin'],\n    [3,'Half-Eaten Apple'],\n    [67,'Bowling Ball'],\n    [7,'Toothpaste']\n];\n\nupdateInventory(curInv, newInv);\n"
      ],
      "tests": [
        {
          "text": "函数<code>updateInventory</code>应该返回一个数组。",
          "testString": "assert.isArray(updateInventory([[21, \"Bowling Ball\"], [2, \"Dirty Sock\"], [1, \"Hair Pin\"], [5, \"Microphone\"]], [[2, \"Hair Pin\"], [3, \"Half-Eaten Apple\"], [67, \"Bowling Ball\"], [7, \"Toothpaste\"]]),'函数<code>updateInventory</code>应该返回一个数组。');"
        },
        {
          "text": "<code>updateInventory([[21, \"Bowling Ball\"], [2, \"Dirty Sock\"], [1, \"Hair Pin\"], [5, \"Microphone\"]], [[2, \"Hair Pin\"], [3, \"Half-Eaten Apple\"], [67, \"Bowling Ball\"], [7, \"Toothpaste\"]])</code>返回的数组长度应该为 6。",
          "testString": "assert.equal(updateInventory([[21, \"Bowling Ball\"], [2, \"Dirty Sock\"], [1, \"Hair Pin\"], [5, \"Microphone\"]], [[2, \"Hair Pin\"], [3, \"Half-Eaten Apple\"], [67, \"Bowling Ball\"], [7, \"Toothpaste\"]]).length, 6,'<code>updateInventory([[21, \"Bowling Ball\"], [2, \"Dirty Sock\"], [1, \"Hair Pin\"], [5, \"Microphone\"]], [[2, \"Hair Pin\"], [3, \"Half-Eaten Apple\"], [67, \"Bowling Ball\"], [7, \"Toothpaste\"]])</code>应该返回一个长度为 6 的数组。');"
        },
        {
          "text": "<code>updateInventory([[21, \"Bowling Ball\"], [2, \"Dirty Sock\"], [1, \"Hair Pin\"], [5, \"Microphone\"]], [[2, \"Hair Pin\"], [3, \"Half-Eaten Apple\"], [67, \"Bowling Ball\"], [7, \"Toothpaste\"]])</code>应该返回<code>[[88, \"Bowling Ball\"], [2, \"Dirty Sock\"], [3, \"Hair Pin\"], [3, \"Half-Eaten Apple\"], [5, \"Microphone\"], [7, \"Toothpaste\"]]</code>。",
          "testString": "assert.deepEqual(updateInventory([[21, \"Bowling Ball\"], [2, \"Dirty Sock\"], [1, \"Hair Pin\"], [5, \"Microphone\"]], [[2, \"Hair Pin\"], [3, \"Half-Eaten Apple\"], [67, \"Bowling Ball\"], [7, \"Toothpaste\"]]), [[88, \"Bowling Ball\"], [2, \"Dirty Sock\"], [3, \"Hair Pin\"], [3, \"Half-Eaten Apple\"], [5, \"Microphone\"], [7, \"Toothpaste\"]],'<code>updateInventory([[21, \"Bowling Ball\"], [2, \"Dirty Sock\"], [1, \"Hair Pin\"], [5, \"Microphone\"]], [[2, \"Hair Pin\"], [3, \"Half-Eaten Apple\"], [67, \"Bowling Ball\"], [7, \"Toothpaste\"]])</code>应该返回<code>[[88, \"Bowling Ball\"], [2, \"Dirty Sock\"], [3, \"Hair Pin\"], [3, \"Half-Eaten Apple\"], [5, \"Microphone\"], [7, \"Toothpaste\"]]</code>。')；"
        },
        {
          "text": "<code>updateInventory([[21, \"Bowling Ball\"], [2, \"Dirty Sock\"], [1, \"Hair Pin\"], [5, \"Microphone\"]], [])</code>应该返回<code>[[21, \"Bowling Ball\"], [2, \"Dirty Sock\"], [1, \"Hair Pin\"], [5, \"Microphone\"]]</code>。",
          "testString": "assert.deepEqual(updateInventory([[21, \"Bowling Ball\"], [2, \"Dirty Sock\"], [1, \"Hair Pin\"], [5, \"Microphone\"]], []), [[21, \"Bowling Ball\"], [2, \"Dirty Sock\"], [1, \"Hair Pin\"], [5, \"Microphone\"]],'<code>updateInventory([[21, \"Bowling Ball\"], [2, \"Dirty Sock\"], [1, \"Hair Pin\"], [5, \"Microphone\"]], [])</code>应该返回<code>[[21, \"Bowling Ball\"], [2, \"Dirty Sock\"], [1, \"Hair Pin\"], [5, \"Microphone\"]]</code>。')；"
        },
        {
          "text": "<code>updateInventory([], [[2, \"Hair Pin\"], [3, \"Half-Eaten Apple\"], [67, \"Bowling Ball\"], [7, \"Toothpaste\"]])</code>应该返回<code>[[67, \"Bowling Ball\"], [2, \"Hair Pin\"], [3, \"Half-Eaten Apple\"], [7, \"Toothpaste\"]]</code>。",
          "testString": "assert.deepEqual(updateInventory([], [[2, \"Hair Pin\"], [3, \"Half-Eaten Apple\"], [67, \"Bowling Ball\"], [7, \"Toothpaste\"]]), [[67, \"Bowling Ball\"], [2, \"Hair Pin\"], [3, \"Half-Eaten Apple\"], [7, \"Toothpaste\"]],'<code>updateInventory([], [[2, \"Hair Pin\"], [3, \"Half-Eaten Apple\"], [67, \"Bowling Ball\"], [7, \"Toothpaste\"]])</code>应该返回<code>[[67, \"Bowling Ball\"], [2, \"Hair Pin\"], [3, \"Half-Eaten Apple\"], [7, \"Toothpaste\"]]</code>。')；"
        },
        {
          "text": "<code>updateInventory([[0, \"Bowling Ball\"], [0, \"Dirty Sock\"], [0, \"Hair Pin\"], [0, \"Microphone\"]], [[1, \"Hair Pin\"], [1, \"Half-Eaten Apple\"], [1, \"Bowling Ball\"], [1, \"Toothpaste\"]])</code>应该返回<code>[[1, \"Bowling Ball\"], [0, \"Dirty Sock\"], [1, \"Hair Pin\"], [1, \"Half-Eaten Apple\"], [0, \"Microphone\"], [1, \"Toothpaste\"]]</code>。",
          "testString": "assert.deepEqual(updateInventory([[0, \"Bowling Ball\"], [0, \"Dirty Sock\"], [0, \"Hair Pin\"], [0, \"Microphone\"]], [[1, \"Hair Pin\"], [1, \"Half-Eaten Apple\"], [1, \"Bowling Ball\"], [1, \"Toothpaste\"]]), [[1, \"Bowling Ball\"], [0, \"Dirty Sock\"], [1, \"Hair Pin\"], [1, \"Half-Eaten Apple\"], [0, \"Microphone\"], [1, \"Toothpaste\"]],'<code>updateInventory([[0, \"Bowling Ball\"], [0, \"Dirty Sock\"], [0, \"Hair Pin\"], [0, \"Microphone\"]], [[1, \"Hair Pin\"], [1, \"Half-Eaten Apple\"], [1, \"Bowling Ball\"], [1, \"Toothpaste\"]])</code> 应该返回 <code>[[1, \"Bowling Ball\"], [0, \"Dirty Sock\"], [1, \"Hair Pin\"], [1, \"Half-Eaten Apple\"], [0, \"Microphone\"], [1, \"Toothpaste\"]]</code>。')；"
        }
      ],
      "MDNlinks": [
        "Global Array Object"
      ],
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function updateInventory(arr1, arr2) {",
            "// 所有的存货都必须记帐，否则你将被解雇！",
            "    return arr1;",
            "}",
            "",
            "// 两个货物列表示例",
            "var curInv = [",
            "    [21, \"Bowling Ball\"],",
            "    [2, \"Dirty Sock\"],",
            "    [1, \"Hair Pin\"],",
            "    [5, \"Microphone\"]",
            "];",
            "",
            "var newInv = [",
            "    [2, \"Hair Pin\"],",
            "    [3, \"Half-Eaten Apple\"],",
            "    [67, \"Bowling Ball\"],",
            "    [7, \"Toothpaste\"]",
            "];",
            "",
            "updateInventory(curInv, newInv);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "a7bf700cd123b9a54eef01d5",
      "title": "No Repeats Please",
      "description": [
        "把一个字符串中的字符重新排列生成新的字符串，返回新生成的字符串里没有连续重复字符的字符串个数。连续重复只以单个字符为准。",
        "例如：<code>aab</code>应该返回 2， 因为它总共有 6 种排列方式： <code>aab</code>， <code>aab</code>， <code>aba</code>， <code>aba</code>， <code>baa</code>， <code>baa</code>，但是其中只有 2 个没有连续重复的字符（ 字符 a 是本例中的重复字符 ）：<code>aba</code>，<code>aba</code>",
        "如果你遇到了困难，请点击 <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514'target='_blank'> 帮助 </a>。你可以找人” 结对编程 “，但不要因此放弃思考。"
      ],
      "solutions": [
        "function permAlone(str) {\n  return permutor(str).filter(function(perm) {\n    return !perm.match(/(.)\\1/g);\n  }).length;\n}\n\nfunction permutor(str) {\n  // http://staff.roguecc.edu/JMiller/JavaScript/permute.html\n  //permArr: 全局数组：包含排列的列表 \ n  //usedChars: 全局实用数组，其中一个列表包含 \"currently-in-use\"字符  var permArr = [], usedChars = [];\n  function permute(input) {\n    // 将输入参数转换成一个字符串数组 （每个字符都有一个元素）\n    var i, ch, chars = input.split(\"\");\n    for (i = 0; i < chars.length; i++) {\n      // 从字符数组中获取并删除索引为\"i\"的字符 \n      ch = chars.splice(i, 1);\n      // 将删除的字符增加的使用字符的末尾 \n      usedChars.push(ch);\n      // 当char数组中没有其他字符添加时，添加使用的chars列表来排列排列 \n      if (chars.length === 0) permArr[permArr.length] = usedChars.join(\"\");\n      // 从char数组发送字符（减去上面删除的字符）进行置换 \n      permute(chars.join(\"\"));\n      // 将删除的数组添加回char数组中的原位置 \n      chars.splice(i, 0, ch);\n      //删除使用过的字符数组末尾使用的最后一个字符 \n      usedChars.pop();\n    }\n  }\n  permute(str);\n  return permArr;\n}\n\npermAlone('aab');\n"
      ],
      "tests": [
        {
          "text": "<code>permAlone(\"aab\")</code>应该返回一个数字。",
          "testString": "assert.isNumber(permAlone('aab'),'<code>permAlone(\"aab\")</code>应该返回一个数字。');"
        },
        {
          "text": "<code>permAlone(\"aab\")</code>应该返回 2。",
          "testString": "assert.strictEqual(permAlone('aab'), 2,'<code>permAlone(\"aab\")</code>应该返回 2。');"
        },
        {
          "text": "<code>permAlone(\"aaa\")</code>应该返回 0。",
          "testString": "assert.strictEqual(permAlone('aaa'), 0,'<code>permAlone(\"aaa\")</code>应该返回 0。');"
        },
        {
          "text": "<code>permAlone(\"aabb\")</code>应该返回 8。",
          "testString": "assert.strictEqual(permAlone('aabb'), 8,'<code>permAlone(\"aabb\")</code>应该返回 8。');"
        },
        {
          "text": "<code>permAlone(\"abcdefa\")</code>应该返回 3600。",
          "testString": "assert.strictEqual(permAlone('abcdefa'), 3600,'<code>permAlone(\"abcdefa\")</code> 应该返回 3600。');"
        },
        {
          "text": "<code>permAlone(\"abfdefa\")</code>应该返回 2640。",
          "testString": "assert.strictEqual(permAlone('abfdefa'), 2640,'<code>permAlone(\"abfdefa\")</code>应该返回 2640。');"
        },
        {
          "text": "<code>permAlone(\"zzzzzzzz\")</code>应该返回 0。",
          "testString": "assert.strictEqual(permAlone('zzzzzzzz'), 0,'<code>permAlone(\"zzzzzzzz\")</code>应该返回 0。');"
        },
        {
          "text": "<code>permAlone(\"a\")</code>应该返回 1。",
          "testString": "assert.strictEqual(permAlone('a'), 1,'<code>permAlone(\"a\")</code>应该返回 1。');"
        },
        {
          "text": "<code>permAlone(\"aaab\")</code>应该返回 0。",
          "testString": "assert.strictEqual(permAlone('aaab'), 0,'<code>permAlone(\"aaab\")</code>应该返回 0。');"
        },
        {
          "text": "<code>permAlone(\"aaabb\")</code>应该返回 12。",
          "testString": "assert.strictEqual(permAlone('aaabb'), 12,'<code>permAlone(\"aaabb\")</code>应该返回 12。');"
        }
      ],
      "MDNlinks": [
        "Permutations",
        "RegExp"
      ],
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function permAlone(str) {",
            "  return str;",
            "}",
            "",
            "permAlone('aab');"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "a3f503de51cfab748ff001aa",
      "title": "Pairwise",
      "description": [
        "给定一个数组<code>arr</code>，查找其总和等于第二个参数“<code> arg </code>”的元素对，并返回其索引的总和。",
        "你可以使用多个具有相同数字元素但不同索引的对。每对应该使用尽可能低的可用索引。一旦一个元素被使用，它就不能被重用来与另一个元素配对。例如，<code>pairwise([1, 1, 2], 3)</code>使用索引为 0 的元素 1 而不是索引为 1 的元素 1 创建一对<code>[ 2，1 ]</code>，因为 0 + 2 < 1 + 2。",
        "例如：<code>pairwise([7, 9, 11, 13, 15], 20)</code>返回<code>6</code>。满足和为 20 的一组数组是：<code>[7, 13]</code>和<code>[9, 11]</code>，然后我们可以写出对应的数组，以及他们的索引与他们的值。",
        "<table class=\"table\"><tr><th><strong>索引</strong></th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th></tr><tr><td>值</td><td>7</td><td>9</td><td>11</td><td>13</td><td>15</td></tr></table>",
        "然后我们将对应的索引相加，",
        "7 + 13 = 20 &#8594；索引 0 + 3 = 3<br>9 + 11 = 20 &#8594； 索引 1 + 2 = 3<br>3 + 3 = 6 &#8594 应该返回<code>6</code>。",
        "如果你遇到了困难，请点击 <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514'target='_blank'> 帮助 </a>。你可以找人 “结对编程”，但不要因此放弃思考。",
      ],
      "solutions": [
        "function pairwise(arr, arg) {\n  var sum = 0;\n  arr.forEach(function(e, i, a) {\n    if (e != null) {      \n      var diff = arg-e;\n      a[i] = null;\n      var dix = a.indexOf(diff);\n      if (dix !== -1) {\n        sum += dix;\n        sum += i;\n        a[dix] = null;\n      }  \n    }\n  });\n  return sum;\n}\n\npairwise([1,4,2,3,0,5], 7);\n"
      ],
      "tests": [
        {
          "text": "<code>pairwise([1, 4, 2, 3, 0, 5], 7)</code>应该返回 11。",
          "testString": "assert.deepEqual(pairwise([1, 4, 2, 3, 0, 5], 7), 11,'<code>pairwise([1, 4, 2, 3, 0, 5], 7)</code>应该返回 11。');"
        },
        {
          "text": "<code>pairwise([1, 3, 2, 4], 4)</code>应该返回 1。",
          "testString": "assert.deepEqual(pairwise([1, 3, 2, 4], 4), 1,'<code>pairwise([1, 3, 2, 4], 4)</code>应该返回 1。');"
        },
        {
          "text": "<code>pairwise([1, 1, 1], 2)</code>应该返回 1。",
          "testString": "assert.deepEqual(pairwise([1, 1, 1], 2), 1,'<code>pairwise([1, 1, 1], 2)</code>应该返回 1。');"
        },
        {
          "text": "<code>pairwise([0, 0, 0, 0, 1, 1], 1)</code>应该返回 1。.",
          "testString": "assert.deepEqual(pairwise([0, 0, 0, 0, 1, 1], 1), 10,'<code>pairwise([0, 0, 0, 0, 1, 1], 1)</code>应该返回 1。.');"
        },
        {
          "text": "<code>pairwise([], 100)</code>应该返回 0。",
          "testString": "assert.deepEqual(pairwise([], 100), 0,'<code>pairwise([], 100)</code>应该返回 0。');"
        }
      ],
      "MDNlinks": [
        "Array.prototype.reduce()"
      ],
      "challengeType": 5,
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function pairwise(arr, arg) {",
            "  return arg;",
            "}",
            "",
            "pairwise([1,4,2,3,0,5], 7);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "8d5123c8c441eddfaeb5bdef",
      "title": "Implement Bubble Sort",
      "description": [
        "<a href='https://baike.baidu.com/item/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F' target='_blank'>冒泡排序</code>，将是你遇到的几个排序算法中的第一个。给定一个未排序的数组，我们期望能够返回的是一个有序的数组。我们将采用不同的几种方式来实现这个功能，并且了解到不同方式的优劣之处，找到最适合的方式来实现不同的应用环境。尽管大多数的现代编程语言在内部构建了这种排序方式并提供了相应的 API，但仍然很有必要了解一些基本的方法并且知道他们是如何完成实现的",
        "现在我们来了解一下冒泡排序。冒泡排序方法从未排序的数组<em>开头</em>开始，并且将未排序的数组元素往后挪移，然后迭代数组，直到所有的数组元素都完全排序后才停止。这种方式是，通过比较相邻的元素然后置换元素完成排序。这种方式就是便利循环数组，直到整个数组没有元素交换为止，这样就完成了冒泡排序。这个算法的名字由来是因为越大的元素会经由交换慢慢“浮”到数列的顶端（升序或降序排列），就如同碳酸饮料中二氧化碳的气泡最终会上浮到顶端一样，故名“冒泡排序”。",
        "这种方式通过多次迭代数组来完成操作，不管是平均还是最坏的情况，都是具有二次<a href='https://baike.baidu.com/item/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6' target='_blank'>时间复杂度</a>。尽管这个方式简单，但是在实际应用中，大多数情况下不切实际的：时间复杂度过高。",
        "<strong>说明：</strong>创建一个函数并命名为<code>bubbleSort</code>，输入参数是一个数组，且数组元素全部都是整数类型，然后按照从最小到最大的顺序返回整个数组。",
        "<strong>注意：</strong><br>我们将在后台调用这些函数，测试数组在编辑器中也是被注释掉了的。尝试记录输入<code>array</code>来确认你的冒泡排序算法是否正确。",
        "如果你遇到了困难，请点击 <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514'target='_blank'> 帮助 </a>。你可以找人 “结对编程”，但不要因此放弃思考。",
      ],
      "tests": [
        {
          "text": "<code>bubbleSort</code>是一个函数。",
          "testString": "assert(typeof bubbleSort =='function','<code>bubbleSort</code>是一个函数');"
        },
        {
          "text": "<code>bubbleSort</code>返回的应该是按照从最小到最大的排序的数组。",
          "testString": "assert(isSorted(bubbleSort([1,4,2,8,345,123,43,32,5643,63,123,43,2,55,1,234,92])),'<code>bubbleSort</code>返回的应该是按照从最小到最大的排序的数组。');"
        },
        {
          "text": "<code>bubbleSort</code>返回的数组除了顺序之后应该是没有任何其他的改变的。",
          "testString": "assert.sameMembers(bubbleSort([1,4,2,8,345,123,43,32,5643,63,123,43,2,55,1,234,92]), [1,4,2,8,345,123,43,32,5643,63,123,43,2,55,1,234,92],'<code>bubbleSort</code>返回的数组除了顺序之后应该是没有任何其他的改变的。');"
        },
        {
          "text": "<code>bubbleSort</code>不要使用内置的排序方式：<code>.sort()</code>。",
          "testString": "assert.strictEqual(code.search(/\\.sort\\(/), -1,'<code>bubbleSort</code>不要使用内置的排序方式：<code>.sort()</code>。');"
        }
      ],
      "solutions": [],
      "challengeType": 1,
      "releasedOn": "February 17, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function bubbleSort(array) {",
            "// 请在下方区域编写代码",
            "",
            "// 请在上方区域编写代码",
            "return array;",
            "}",
            "",
            "// 测试数组：",
            "// [1, 4, 2, 8, 345, 123, 43, 32, 5643, 63, 123, 43, 2, 55, 1, 234, 92]"
          ],
          "head": [],
          "tail": [
            "function isSorted(arr) {",
            "  var check = (i) => (i == arr.length - 1) ? true : (arr[i] > arr[i + 1]) ? false : check(i + 1);",
            "  return check(0);",
            "};"
          ]
        }
      }
    },
    {
      "id": "587d8259367417b2b2512c85",
      "title": "Implement Selection Sort",
      "description": [
        "现在我们开始实现<a href='https://baike.baidu.com/item/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F' target='_blank'>选择排序</a>。选择排序是通过选择列表中最小值来与列表中的第一个值进行对比交换，然后从第二位置开始逐一对比，选择剩下的列表中最小值与第二个元素交换位置。然后循环遍历列表并交换元素，直到列表最后一个元素，此时的列表就完成了排序。选择排序在所有的情况下都具有二次<a href='https://baike.baidu.com/item/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6' target='_blank'>时间复杂度</a>。",
        "<strong>说明：</strong>创建一个函数并命名为<code>selectionSort</code>，输入参数是一个数组，且数组元素全部都是整数类型，然后按照从最小到最大的顺序返回整个数组。",
        "<strong>注意：</strong><br>我们将在后台调用这些函数，测试数组在编辑器中也是被注释掉了的。尝试记录输入<code>array</code>来确认你的冒泡排序算法是否正确。"
        "如果你遇到了困难，请点击 <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>帮助</a>。你可以找人 “结对编程”，但不要因此放弃思考。",
      ],
      "tests": [
        {
          "text": "<code>selectionSort</code>是一个函数。",
          "testString": "assert(typeof selectionSort == 'function', '<code>selectionSort</code>是一个函数。');"
        },
        {
          "text": "<code>selectionSort</code>返回的应该是按照从最小到最大的排序的数组。",
          "testString": "assert(isSorted(selectionSort([1,4,2,8,345,123,43,32,5643,63,123,43,2,55,1,234,92])), '<code>selectionSort</code>返回的应该是按照从最小到最大的排序的数组。');"
        },
        {
          "text": "<code>selectionSort</code>返回的数组除了顺序之后应该是没有任何其他的改变的。",
          "testString": "assert.sameMembers(selectionSort([1,4,2,8,345,123,43,32,5643,63,123,43,2,55,1,234,92]), [1,4,2,8,345,123,43,32,5643,63,123,43,2,55,1,234,92], '<code>selectionSort</code>返回的数组除了顺序之后应该是没有任何其他的改变的。');"
        },
        {
          "text": "<code>selectionSort</code>不要使用内置的排序方式：<code>.sort()</code>。",
          "testString": "assert.strictEqual(code.search(/\\.sort\\(/), -1, '<code>selectionSort</code>不要使用内置的排序方式：<code>.sort()</code>。');"
        }
      ],
      "solutions": [],
      "challengeType": 1,
      "releasedOn": "February 17, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function selectionSort(array) {",
            "  // 请在下方区域编写代码",
            "",
            "  // 请在上方区域编写代码",
            "  return array;",
            "}",
            "",
            "// 测试数组：",
            "// [1, 4, 2, 8, 345, 123, 43, 32, 5643, 63, 123, 43, 2, 55, 1, 234, 92]"
          ],
          "head": [],
          "tail": [
            "function isSorted(arr) {",
            "  var check = (i) => (i == arr.length - 1) ? true : (arr[i] > arr[i + 1]) ? false : check(i + 1);",
            "  return check(0);",
            "};"
          ]
        }
      }
    },
    {
      "id": "587d8259367417b2b2512c86",
      "title": "Implement Insertion Sort",
      "description": [
        "现在我们开始研究<a href='https://baike.baidu.com/item/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F'  target='_blank'>插入排序</a>。这个方法通过在列表的开头见一个排序的数组来实现整个排序，它以第一个元素开始排序数组，然后检查对比下一个元素，并将其向后交换到排序的书中，直到它处在排序的位置。循环迭代整个列表，将新产生的元素交换到排序部分，直到整个列表处于排序状态。该算法在平均和最坏的情况下具有二次<a href='https://baike.baidu.com/item/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6' target='_blank'>时间复杂度</a>。",
        "<strong>说明：</strong>创建一个函数并命名为<code>insertionSort</code>，输入参数是一个数组，且数组元素全部都是整数类型，然后按照从最小到最大的顺序返回整个数组。",
        "<strong>注意：</strong><br>我们将在后台调用这些函数，测试数组在编辑器中也是被注释掉了的。尝试记录输入<code>array</code>来确认你的冒泡排序算法是否正确。",
        "如果你遇到了困难，请点击 <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514'target='_blank'> 帮助 </a>。你可以找人 “结对编程”，但不要因此放弃思考。",
      ],
      "tests": [
        {
          "text": "<code>insertionSort</code>是一个函数。",
          "testString": "assert(typeof insertionSort == 'function', '<code>insertionSort</code>是一个函数。');"
        },
        {
          "text": "<code>insertionSort</code>返回的应该是按照从最小到最大的排序的数组。",
          "testString": "assert(isSorted(insertionSort([1,4,2,8,345,123,43,32,5643,63,123,43,2,55,1,234,92])), '<code>insertionSort</code>返回的应该是按照从最小到最大的排序的数组。');"
        },
        {
          "text": "<code>insertionSort</code>返回的数组除了顺序之后应该是没有任何其他的改变的。",
          "testString": "assert.sameMembers(insertionSort([1,4,2,8,345,123,43,32,5643,63,123,43,2,55,1,234,92]), [1,4,2,8,345,123,43,32,5643,63,123,43,2,55,1,234,92], '<code>insertionSort</code>返回的数组除了顺序之后应该是没有任何其他的改变的。');"
        },
        {
          "text": "<code>insertionSort</code>不要使用内置的排序方式：<code>.sort()</code>。",
          "testString": "assert.strictEqual(code.search(/\\.sort\\(/), -1, '<code>insertionSort</code>不要使用内置的排序方式：<code>.sort()</code>。');"
        }
      ],
      "solutions": [],
      "challengeType": 1,
      "releasedOn": "February 17, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function insertionSort(array) {",
            "  // 请在下方区域标写代码",
            "",
            "  // 请在上方区域标写代码",
            "  return array;",
            "}",
            "",
            "// 测试数组：",
            "// [1, 4, 2, 8, 345, 123, 43, 32, 5643, 63, 123, 43, 2, 55, 1, 234, 92]"
          ],
          "head": [],
          "tail": [
            "function isSorted(arr) {",
            "  var check = (i) => (i == arr.length - 1) ? true : (arr[i] > arr[i + 1]) ? false : check(i + 1);",
            "  return check(0);",
            "};"
          ]
        }
      }
    },
    {
      "id": "587d825a367417b2b2512c89",
      "title": "Implement Quick Sort",
      "description": [
        "现在我们开始讨论<a href='https://baike.baidu.com/item/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95?fromtitle=%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F&fromid=2084344' target='_blank'>快速排序</code>。快速排序是一种高效的递归分治方法来排序数组。在这个方法中，需要在原始数组中选择一个枢轴值，然后将数组划分为两个子数组，其值大于或者小于枢轴值，然后我们将递归调用两个子数组上的快速排序算法的结果来配合使用，直到空数组或者单个元素的数组的情况，然后返回结果。递归调用的展开结果将返回的是排序后的数组。",
        "快速排序是一种非常有效的排序方式，平均<a href='https://baike.baidu.com/item/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6' target='_blank'>时间复杂度</a>为<i>O(nlog(n))</i>，同时它也是相对比较容易实现的方式。这些特性使得快速排序成为了一种流行而有用的排序方式。",
        "<strong>说明：</strong>创建一个函数并命名为<code>quickSort</code>，输入参数是一个数组，且数组元素全部都是整数类型，然后按照从最小到最大的顺序返回整个数组。虽然选择一个枢轴值很重要，但任何一个枢轴都能满足要求，为了以防万一，我嘛一般选择第一个或者最后一个元素来作为数轴值。",
        "<strong>注意：</strong><br>我们将在后台调用这些函数，测试数组在编辑器中也是被注释掉了的。尝试记录输入<code>array</code>来确认你的冒泡排序算法是否正确。",
        "如果你遇到了困难，请点击 <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514'target='_blank'> 帮助 </a>。你可以找人 “结对编程”，但不要因此放弃思考。",
      ],
      "tests": [
        {
          "text": "<code>quickSort</code>是一个函数。",
          "testString": "assert(typeof quickSort == 'function', '<code>quickSort</code>是一个函数。');"
        },
        {
          "text": "<code>quickSort</code>返回的应该是按照从最小到最大的排序的数组。",
          "testString": "assert(isSorted(quickSort([1,4,2,8,345,123,43,32,5643,63,123,43,2,55,1,234,92])), '<code>quickSort</code>返回的应该是按照从最小到最大的排序的数组。');"
        },
        {
          "text": "<code>quickSort</code>返回的数组除了顺序之后应该是没有任何其他的改变的。",
          "testString": "assert.sameMembers(quickSort([1,4,2,8,345,123,43,32,5643,63,123,43,2,55,1,234,92]), [1,4,2,8,345,123,43,32,5643,63,123,43,2,55,1,234,92], '<code>quickSort</code>返回的数组除了顺序之后应该是没有任何其他的改变的。');"
        },
        {
          "text": "<code>quickSort</code>不要使用内置的排序方式：<code>.sort()</code>。",
          "testString": "assert.strictEqual(code.search(/\\.sort\\(/), -1, '<code>quickSort</code>不要使用内置的排序方式：<code>.sort()</code>。');"
        }
      ],
      "solutions": [],
      "challengeType": 1,
      "releasedOn": "February 17, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function quickSort(array) {",
            "  // 请在下方区域编写代码",
            "",
            "  // 请在上方区域编写代码",
            "  return array;",
            "}",
            "",
            "// 测试函数：",
            "// [1, 4, 2, 8, 345, 123, 43, 32, 5643, 63, 123, 43, 2, 55, 1, 234, 92]"
          ],
          "head": [],
          "tail": [
            "function isSorted(arr) {",
            "  var check = (i) => (i == arr.length - 1) ? true : (arr[i] > arr[i + 1]) ? false : check(i + 1);",
            "  return check(0);",
            "};"
          ]
        }
      }
    },
    {
      "id": "587d825c367417b2b2512c8f",
      "title": "Implement Merge Sort",
      "description": [
        "另一种非常常见的排序方式是<a href='https://baike.baidu.com/item/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F' target='_blank'>归并排序</code>。如同快速排序一样，归并排序也是采用了分而治之的递归方法来排序数组。它利用了这么一个现象，即只要首先对两个数组进行排序，就比较容易对他们进行排序。但是我们的参数只能一个数组，那么又将如何从这个数组中得到两个排序数组呢？我们可以递归的将原始数组一分为二，直到数组里面只包含一个元素为止。单个元素的数组是自然排序的，所以我们可以开始合并。这种合并方式是将拆分的原始数组进行递归调用，最后将所有的元素生成一个最终的排序数组。",
        "合并的步骤是：",
        "<strong>1)</strong>：递归的将输入数组拆分成两个子数组，直到所有的子数组都只包含一个元素。",
        "<strong>2)</strong>：将每一个排序后的子数组合并到一个数组里面，最后返回一个排序的数组。",
        "归并排序是一种高效的排序方式，<a href='https://baike.baidu.com/item/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6' target='_blank'>时间复杂度</a>为<i>O(nlog(n))</i>。因为归并排序的性能优良且相对容易实现，所有这种排序方式很受欢迎。",
        "另外，这将是我们在此章节讨论的最后一种排序算法，但是在后续有关<strong>树型数据结构</strong>的章节中，我们将一起研究<strong>堆排序</strong>，同样它也是一种高效的排序方式，其实现过程需要用到二进制堆的概念。",
        "<strong>Instructions</strong>：创建一个函数并命名为<code>mergeSort</code>，输入参数是一个数组，且数组元素全部都是整数类型，然后按照从最小到最大的顺序返回整个数组>。实现这个排序方式可以采用两个函数来实现：<code>merge</code>负责合并两个排序的数组，<code>merge sort</code>负责生成单个数组的用于归并使用。祝你好用！",
        "<strong>注意：</strong><br>我们将在后台调用这些函数，测试数组在编辑器中也是被注释掉了的。尝试记录输入<code>array</code>来确认你的冒泡排序算法是否正确。",
        "如果你遇到了困难，请点击 <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514'target='_blank'> 帮助 </a>。你可以找人 “结对编程”，但不要因此放弃思考。",
      ],
      "tests": [
        {
          "text": "<code>mergeSort</code>是一个函数。",
          "testString": "assert(typeof mergeSort == 'function', '<code>mergeSort</code>是一个函数。');"
        },
        {
          "text": "<code>mergeSort</code>返回的应该是按照从最小到最大的排序的数组。",
          "testString": "assert(isSorted(mergeSort([1,4,2,8,345,123,43,32,5643,63,123,43,2,55,1,234,92])), '<code>mergeSort</code>返回的应该是按照从最小到最大的排序的数组。');"
        },
        {
          "text": "<code>mergeSort</code>返回的数组除了顺序之后应该是没有任何其他的改变的。",
          "testString": "assert.sameMembers(mergeSort([1,4,2,8,345,123,43,32,5643,63,123,43,2,55,1,234,92]), [1,4,2,8,345,123,43,32,5643,63,123,43,2,55,1,234,92], '<code>mergeSort</code>返回的数组除了顺序之后应该是没有任何其他的改变的。');"
        },
        {
          "text": "<code>mergeSort</code>不要使用内置的排序方式：<code>.sort()</code>。",
          "testString": "assert.strictEqual(code.search(/\\.sort\\(/), -1, '<code>mergeSort</code>不要使用内置的排序方式：<code>.sort()</code>。');"
        }
      ],
      "solutions": [],
      "challengeType": 1,
      "releasedOn": "February 17, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function mergeSort(array) {",
            "  // 请在下方区域编写函数",
            "",
            "  // 请在上方区域编写函数",
            "  return array;",
            "}",
            "",
            "// 测试函数：",
            "// [1, 4, 2, 8, 345, 123, 43, 32, 5643, 63, 123, 43, 2, 55, 1, 234, 92]"
          ],
          "head": [],
          "tail": [
            "function isSorted(arr) {",
            "  var check = (i) => (i == arr.length - 1) ? true : (arr[i] > arr[i + 1]) ? false : check(i + 1);",
            "  return check(0);",
            "};"
          ]
        }
      }
    }
  ]
}
